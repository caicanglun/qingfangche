(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\n                    * Create a cached version of a pure function.\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\n   * Camelize a hyphen-delimited string.\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *'test'\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XG4gIHZhciBzID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvZyAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV1cbiAgfVxuXG4gIHZhciBtc2dzID0gYXJncy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxuXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdiA9ICdbb2JqZWN0IG9iamVjdF0nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2ID09PSBudWxsKSB7XG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHYgPSAnLS0tVU5ERUZJTkVELS0tJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZUeXBlID0gdHlwb2YodikudG9VcHBlckNhc2UoKVxuXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xuICAgICAgICAgIHYgPSAnLS0tQkVHSU46JyArIHZUeXBlICsgJy0tLScgKyB2ICsgJy0tLUVORDonICsgdlR5cGUgKyAnLS0tJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYgPSBTdHJpbmcodilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2XG4gIH0pXG4gIHZhciBtc2cgPSAnJ1xuXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcbiAgICB2YXIgbGFzdE1zZyA9IG1zZ3MucG9wKClcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcblxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xuICAgICAgbXNnICs9IGxhc3RNc2dcbiAgICB9IGVsc2Uge1xuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1zZyA9IG1zZ3NbMF1cbiAgfVxuXG4gIHJldHVybiBtc2dcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/util.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {var Api = __webpack_require__(/*! services/config/api.js */ 17);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 18);\n\n\n/**\n                                                 * 封封微信的的request\n                                                 */\nvar bool = true;\nfunction request(url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"GET\";\n  var loginApi = Api.AuthLoginByWeixin;\n  return new Es6Promise(function (resolve, reject) {\n    wx.request({\n      url: url,\n      data: data,\n      method: method,\n      header: {\n        'Content-Type': 'application/json',\n        // 'Authorization': \"Bearer \"+ wx.getStorageSync('token')\n        'MYTK': wx.getStorageSync('token') },\n\n      success: function success(res) {\n\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res);\n        }\n        // 重新登录\n        // else if (res.statusCode == 401 && url.indexOf(loginApi) == -1) {\n        //   let loginOn = wx.getStorageSync(\"loginOn\");\n\n        // if (!loginOn) {\n        //   wx.setStorageSync(\"loginOn\", true);\n\n        //需要登录后才可以操作\n        // let code = null;\n        // return login().then((res) => {\n        //   code = res.code;\n        //   return getUserInfo();\n        // }).then((userInfo) => {\n\n        //   wx.setStorageSync(\"rawData\", userInfo.rawData)\n        //   wx.setStorageSync(\"signature\", userInfo.signature)\n\n        //   // 重新登录，登录远程服务器\n        //   request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'POST').then(res => { \n        //     wx.setStorageSync(\"loginOn\", false);\n\n        //     if (res.data.code == 200) {\n        //       if (res.data.sessionKey) {\n        //         wx.setStorageSync(\"sessionKey\", res.data.sessionKey);\n        //       }\n\n\n        //     // 获取当前页面的路径\n        //       let getPage = getCurrentPages();\n\n        //       // 拼接当前页面路径\n        //       let pageRoute = `/${getPage[getPage.length-1].route}`;\n        //       let pageOptions = getPage[getPage.length - 1].options;\n        //       let nStr = ``;\n        //       // 当前路径拼接\n        //       for (let attr in pageOptions) {\n        //         nStr += `&${attr}=${pageOptions[attr]}`\n        //       }\n        //       let pageUrl = pageRoute + nStr.replace('&', '?');\n\n        //       if (wx.reLaunch) {\n        //         wx.reLaunch({\n        //           url: pageUrl\n        //         });\n        //       } else {\n        //         wx.switchTab({\n        //           url: '/pages/tab-index/index'\n        //         })\n        //       }\n        //     } else {\n        //       reject(res);\n        //     }\n        //   }).catch((err) => {\n        //     wx.setStorageSync(\"loginOn\", false);\n        //     reject(err);\n        //   });\n\n        // }).catch((err) => {\n        //   wx.setStorageSync(\"loginOn\", false);\n        //   reject(err);\n        // })\n        //}\n        //}\n        // 无权限\n        else if (res.statusCode == 401) {\n            // backIndexPageModal(\"很抱歉，你没有查看权限\");\n\n            uni.navigateTo({\n              url: '/pages/qing-f-c/login/login',\n              success: function success(res) {},\n              fail: function fail() {},\n              complete: function complete() {} });\n\n            return;\n          }\n      },\n      fail: function fail(err) {\n        reject(err);\n\n        if (bool) {\n          bool = false;\n          wx.getNetworkType({\n            success: function success(res) {\n              // 判断有没有网络\n              if (res.networkType == \"none\") {\n                showModal(\"网络连接失败，请检测网络是否正常\", function () {\n                  bool = true;\n                });\n              } else {\n                if (err.errMsg.indexOf(\"timeout\") != -1) {\n                  showModal(\"请求超时，请重新请求！\", function () {\n                    bool = true;\n                  });\n                } else {\n                  showModal(err.errMsg, function () {\n                    bool = true;\n                  });\n                }\n              }\n            } });\n\n        }\n      } });\n\n  });\n}\n\n/**\n   * banner跳转\n   */\n\n// const bannerJumpRequest = (title,orderNo,picId,type,info,startDate,endDate,status) =>{\n//   var url = Api.bannerJump + \"\"\n//   var data = {\n//     title:title,\n//     orderNo:orderNo,\n//     picId:picId,\n//     type:type,\n//     info:info,\n//     startDate: startDate,\n//     endDate: endDate,\n//     status: status,\n//   }\n//   request(url,data,\"POST\")\n// }\n\n// const commentRequest = (url,data={},method=\"GET\") =>{\n//   var url = `${Api.guestComment}?page=1&size=5`\n//   var data = {\n\n//   }\n//   request(url,data,\"GET\")\n// }\n\n// const jumpMpRequest = (m_appid, headerTokne, contentType, end_method)=>{\n//   var url = Api.tiaozhuan\n//   var data={\n//     m_appid: \"wxfa94ddf446523122\",\n//     method: \"POST\",\t\n//     headerTokne: \"\",\n//     contentType: \"application/json\",\n//     end_method: \"/wx/carte/user/receiveData\"\n//   }\n//   request(url,data,\"POST\")\n// }\nvar showToast = function showToast(str) {\n  wx.showToast({\n    title: str,\n    image: '/images/icon-alert.png' });\n\n};\nvar showLoading = function showLoading(str) {\n  wx.showLoading({\n    title: str,\n    mask: true });\n\n};\n\n\n/**\n    * photo upload \n    */\nfunction uploadPic(filePath) {\n  return new Es6Promise(function (resolve, reject) {\n    var uploadTask = wx.uploadFile({\n      url: Api.PicUpload, //仅为示例，非真实的接口地址\n      filePath: filePath,\n      name: 'file',\n      header: {\n        'Authorization': \"Bearer \" + wx.getStorageSync('token') },\n\n      formData: {\n        'user': 'test' },\n\n      success: function success(res) {\n        resolve(res);\n        var data = res.data;\n\n        //do something\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n\n    // uploadTask.onProgressUpdate((res) => {\n    //   console.log(filePath+'上传进度', res.progress)\n    //   console.log(filePath+'已经上传的数据长度', res.totalBytesSent)\n    //   console.log(filePath+'预期需要上传的数据总长度', res.totalBytesExpectedToSend)\n    // })\n  });\n\n}\n\n\n/**\n   * 已经选中的图片上传 array\n   */\nfunction uploadPics(photoList) {\n  return new Es6Promise(function (resolve, reject) {\n    var picArray = photoList;\n    var photoJsonArray = [];\n    if (picArray.length != 0) {\n      for (var i = 0; i < picArray.length; i++) {\n        uploadPic(picArray[i]).then(function (res) {\n          photoJsonArray.push(JSON.parse(res.data));\n          //console.dir(res.data);\n          //console.dir(photoJsonArray);\n          if (photoJsonArray.length == picArray.length) {\n            resolve(photoJsonArray);\n          }\n        }).catch(function (err) {\n          // util.showToast(\"图片上传失败\");\n          reject(err);\n          return;\n        });\n      }\n    } else {\n      resolve([]);\n    }\n  });\n}\n\n/**\n   * 下载图片\n   */\nfunction downloadFile(imgUrl) {\n  return new Es6Promise(function (resolve, reject) {\n    wx.downloadFile({\n      url: imgUrl,\n      success: function success(res) {\n        if (res.statusCode === 200) {\n          resolve(res.tempFilePath);\n        } else {\n          reject();\n        }\n      },\n      fail: function fail(err) {\n        reject();\n      } });\n\n  });\n}\n\n/**\n   * 检查微信会话是否过期\n   */\nfunction checkSession() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.checkSession({\n      success: function success() {\n        resolve(true);\n      },\n      fail: function fail() {\n        reject(false);\n      } });\n\n  });\n}\n\n/**\n   * 调用微信登录\n   */\nfunction login() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.login({\n      success: function success(res) {\n        if (res.code) {\n          //登录远程服务器\n          resolve(res);\n        } else {\n          reject(res);\n        }\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n\n/**\n   * 获取微信用户信息\n   */\nfunction getUserInfo() {\n  return new Es6Promise(function (resolve, reject) {\n    // 查看是否授权\n    // console.log('查看用户是否授权')\n    if (wx.getSetting) {\n      var getPages = getCurrentPages();\n      var page = getPages[getPages.length - 1];\n\n      wx.getSetting({\n        success: function success(getRes) {\n          if (getRes.authSetting['scope.userInfo']) {\n            wx.getUserInfo({\n              withCredentials: true,\n              success: function success(userRes) {\n                resolve(userRes);\n              },\n              fail: function fail(userErr) {\n                console.log(__f__(userErr, 'userInfo', \" at utils/util.js:327\"));\n                reject(err);\n              } });\n\n          } else {\n            page.setData({\n              userAuthor: true });\n\n            // console.log('用户需要授权');\n          }\n        },\n        fail: function fail(err) {\n          page.setData({\n            userAuthor: true });\n\n          console.log(__f__(\"调用 wx.getSetting 方法失败\", err, \" at utils/util.js:342\"));\n        } });\n\n    } else {\n      showModal('当前微信版本暂不支持 wx.getSetting 方法，请升级微信版本！');\n    }\n  });\n}\n\n/**\n   * 重新登录\n   */\nfunction loginAgain() {\n  var code = null;\n  login().then(function (res) {\n    code = res.code;\n    return getUserInfo();\n  }).then(function (userInfo) {\n\n    wx.setStorageSync(\"rawData\", userInfo.rawData);\n    wx.setStorageSync(\"signature\", userInfo.signature);\n\n    // 重新登录，登录远程服务器\n    request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'POST').then(function (res) {\n      if (res.statusCode == 200) {\n        var newData = res.data;\n\n        if (newData.sessionKey) {\n          wx.setStorageSync(\"sessionKey\", newData.sessionKey);\n        }\n\n        // 存储用户信息\n        wx.setStorageSync('userInfo', newData.userInfo);\n        wx.setStorageSync('token', newData.token);\n\n        // 获取当前页面的路径\n        var getPage = getCurrentPages();\n        var nowPage = getPage[getPage.length - 1];\n\n        // 用户已注册\n        if (newData.token && newData.userInfo.company && newData.userInfo.phone) {\n          // 拼接当前页面路径\n          var pageRoute = \"/\".concat(nowPage.route);\n          var pageOptions = nowPage.options;\n          var nStr = \"\";\n          // 当前路径拼接\n          for (var attr in pageOptions) {\n            nStr += \"&\".concat(attr, \"=\").concat(pageOptions[attr]);\n          }\n          var pageUrl = pageRoute + nStr.replace('&', '?');\n\n          // 执行当前页面的 onLoad 事件\n          // nowPage.onLoad(nowPage.options);\n          if (wx.reLaunch) {\n            wx.reLaunch({\n              url: pageUrl });\n\n          } else {\n            wx.switchTab({\n              url: '/pages/tab-index/index' });\n\n          }\n        }\n        // 用户未注册\n        else if (newData.token) {\n            var AppData = getApp().globalData;\n            AppData.regPage.route = nowPage.route;\n            AppData.regPage.opt = nowPage.options;\n\n            if (wx.reLaunch) {\n              // wx.reLaunch({\n              //   url: '/pages/public/authorize',\n              // })\n            } else {\n                // wx.redirectTo({\n                //   url: '/pages/public/authorize',\n                // })\n              }\n          }\n      } else {\n        showModal(\"登录服务器失败\");\n        // reject(res);\n      }\n    }).catch(function (err) {\n      showModal(\"登录服务器失败\");\n      // reject(err);\n    });\n  }).catch(function (err) {\n    showModal(\"登录服务器失败\");\n  });\n}\n\n/**\n   * 判断是否进入注册页\n   */\nfunction goRegPage() {\n  var AppData = getApp().globalData;\n  var userInfo = wx.getStorageSync(\"userInfo\");\n\n  // 用户未注册\n  if (!userInfo.company || !userInfo.phone) {\n    // 获取当前页面的路径\n    var getPage = getCurrentPages();\n    var nowPage = getPage[getPage.length - 1];\n\n    AppData.regPage.route = nowPage.route;\n    AppData.regPage.opt = nowPage.options;\n\n    if (wx.reLaunch) {\n      // wx.reLaunch({\n      //   url: '/pages/public/authorize',\n      // })\n    } else {\n        // wx.redirectTo({\n        //   url: '/pages/public/authorize',\n        // })\n      }\n    return false;\n  } else {\n    return true;\n  }\n}\n\n/**\n   * 微信是否授权判断\n   */\n// function scopeWChat() {\n// return new Promise(function (resolve, reject) {\n//   let token = wx.getStorageSync(\"token\");\n//   let scopeLogin = wx.getStorageSync('scopeLogin');\n\n//   if (!token && scopeLogin) {\n//     wx.getSetting({\n//       success: (res) => {\n//         let scopeInfo = res.authSetting['scope.userInfo'];\n\n//         // 是否授权\n//         if (scopeInfo) {\n//           resolve(true)\n//           wx.removeStorageSync(\"scopeLogin\");\n//         } else {\n//           reject(false);\n//         }\n//       }\n//     })\n//   }\n// })\n// }\n\n/**\n * 获取认证信息\n */\nfunction getApproveData() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      var approveApi = Api.UserApprove;\n\n      request(approveApi, {}, 'get').then(function (res) {\n        resolve(res);\n        wx.setStorageSync(\"approveInfo\", res.data);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取认证失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 获取支持的银行列表\n   */\nfunction getSupportBank() {\n  getPaySaveBank();\n  getPayCreditBank();\n  getCashBank();\n}\n\n/**\n   * 获取付款银行列表--储蓄卡\n   */\nfunction getPaySaveBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserPaySave).then(function (res) {\n        // 获取银行logo\n        var paySaveData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(paySaveData);\n        wx.setStorageSync(\"paySaveList\", paySaveData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取付款卡失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 获取付款银行列表--信用卡\n   */\nfunction getPayCreditBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserPayCredit).then(function (res) {\n        // 获取银行logo\n        var payCreditData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(payCreditData);\n        wx.setStorageSync(\"payCreditList\", payCreditData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取信用卡失败\");\n      });\n    }\n  });\n}\n\n\n/**\n   * 获取收款银行列表\n   */\nfunction getCashBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserCashBank).then(function (res) {\n        // 获取银行logo\n        var cashData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(cashData);\n        wx.setStorageSync(\"cashBankList\", cashData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取收款卡失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 自动消失的提示框\n   */\nfunction showErrorToast(msg) {\n  wx.showToast({\n    title: msg,\n    duration: 2500,\n    image: '../../images/alert.png' });\n\n}\n\n/** \n   * 功能：modal 提醒框\n   * 参数：\n   *    第一个参数：当无第二个参数，为内容；有第二个参数，为标题\n   *    第二个参数：当参数类型为：string时，为内容；参数类型为function：为成功回调函数，并且不能传入第三个参数\n   *    第三个参数：成功回调的函数\n   * 例子：\n   *    showModal(\"内容\")\n   *    showModal(\"标题\", \"内容\")\n   *    showModal(\"内容\", function() { console.log(\"成功回调函数\") })\n   *    showModal(\"标题\", \"内容\", function() { console.log(\"成功回调函数\") })\n   */\nfunction showModal(oTitle, msg, fn) {\n  var sTitle = \"\";\n  var oFn = typeof msg == \"function\" ? msg : fn;\n  var sMsg = \"\";\n\n  if (msg != undefined && typeof msg == \"string\") {\n    sTitle = oTitle;\n    sMsg = msg;\n  } else {\n    sTitle = \"\";\n    sMsg = oTitle;\n  }\n\n  wx.showModal({\n    title: sTitle || \"\",\n    content: sMsg || \"\",\n    confirmColor: \"#ff8834\",\n    showCancel: false,\n    success: function success(res) {\n      oFn && oFn(res);\n    } });\n\n}\n\n/**\n   * 返回首页提醒框\n   */\nfunction backIndexPageModal(msg) {\n  wx.showModal({\n    content: msg,\n    showCancel: false,\n    confirmText: '确认',\n    confirmColor: \"#ff8834\",\n    success: function success(res) {\n      // if (res.confirm) {\n      if (wx.reLaunch) {\n        wx.reLaunch({\n          url: '/pages/tab-index/index' });\n\n      } else {\n        wx.switchTab({\n          url: '/pages/tab-index/index' });\n\n      }\n      // }\n    } });\n\n}\n\n/**\n   * 从需要上传的图片中，筛选出已经上传过的图片；并返回需要上传的图片 及 无需上传的图片对象\n   */\nvar picUpPic = function picUpPic(picListArr, picListObjArr) {\n  var newArr = [];\n  var oldArr = [];\n  var oldPicArr = [];\n\n  // 从新获图片数组中，筛选出已经上传过的图片\n  picListArr.forEach(function (item) {\n    if (item.indexOf(Api.NewApiRootUrl) == -1) {\n      newArr.push(item); // 未上传图片\n    } else {\n      oldArr.push(item); // 上传图片\n    }\n  });\n\n  // 获取已上传图片的图片对象\n  picListObjArr.forEach(function (item) {\n    oldArr.forEach(function (list) {\n      if (list.indexOf(item.id) != -1) {\n        oldPicArr.push(item);\n      }\n    });\n  });\n\n  return [newArr, oldPicArr];\n};\n\n/**\n    * 版本过低提醒框\n    */\nfunction versionTip() {\n  showModal(\"版本提示\", \"当前版本暂不支持该功能，请升级微信版本！\");\n}\n\n//获取当前日期\nfunction getTime(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n\n  var hour = date.getHours();\n  var minute = date.getMinutes();\n  var second = date.getSeconds();\n\n  return [year, month, day].map(formatNumber).join('-');\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\nmodule.exports = {\n  request: request,\n  checkSession: checkSession,\n  login: login,\n  getUserInfo: getUserInfo,\n  goRegPage: goRegPage,\n  // scopeWChat,\n  uploadPic: uploadPic,\n  uploadPics: uploadPics,\n  downloadFile: downloadFile,\n\n  getApproveData: getApproveData,\n  getSupportBank: getSupportBank,\n  getPaySaveBank: getPaySaveBank,\n  getPayCreditBank: getPayCreditBank,\n  getCashBank: getCashBank,\n\n  showErrorToast: showErrorToast,\n  showModal: showModal,\n  showToast: showToast,\n  showLoading: showLoading,\n  versionTip: versionTip,\n  backIndexPageModal: backIndexPageModal,\n\n  getTime: getTime,\n  picUpPic: picUpPic };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 161:
/*!**********************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/components/u-charts/u-charts.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {/*\n * uCharts v1.8.5.20190815\n * uni-app平台高性能跨全端图表，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360）\n * Copyright (c) 2019 QIUN秋云 https://www.ucharts.cn All rights reserved.\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n * \n * uCharts官方网站\n * https://www.uCharts.cn\n * \n * 开源地址:\n * https://gitee.com/uCharts/uCharts\n * \n * uni-app插件市场地址：\n * http://ext.dcloud.net.cn/plugin?id=271\n * \n */\n\n\n\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: [10, 10, 10, 10],\n  pixelRatio: 1,\n  rotate: false,\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarGridCount: 3,\n  radarLabelTextMargin: 15,\n  gaugeLabelTextMargin: 15 };\n\n\nvar assign;\nif (Object.assign) {\n  assign = Object.assign;\n} else {\n  // 使用polyfill\n  assign = function assign(target, varArgs) {\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n    var to = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var nextSource = arguments[index];\n      if (nextSource != null) {\n        for (var nextKey in nextSource) {\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  };\n}\n\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  } };\n\n\n//兼容H5点击事件\nfunction getH5Offset(e) {\n  e.mp = {\n    changedTouches: [] };\n\n  e.mp.changedTouches.push({\n    x: e.offsetX,\n    y: e.offsetY });\n\n  return e;\n}\n\n// hex 转 rgba\nfunction hexToRgb(hexValue, opc) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\n}\n\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[uCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\n\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\n  var seriesTemp = [];\n  for (var k = 0; k < dayArr.length; k++) {\n    var seriesItem = {\n      data: [],\n      name: nameArr[k],\n      color: colorArr[k] };\n\n    for (var i = 0, len = kdata.length; i < len; i++) {\n      if (i < dayArr[k]) {\n        seriesItem.data.push(null);\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayArr[k]; j++) {\n        sum += kdata[i - j][1];\n      }\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\n    }\n    seriesTemp.push(seriesItem);\n  }\n  return seriesTemp;\n}\n\nfunction calValidDistance(distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n  }\n  return validDistance;\n}\n\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\n\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY };\n\n}\n\nfunction createCurveControlPoints(points, i) {\n\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y,\n      points[\n      i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy },\n\n    ctrB: {\n      x: pBx,\n      y: pBy } };\n\n\n}\n\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y };\n\n}\n\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction fillSeries(series, opts, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (typeof item.show == \"undefined\") {\n      item.show = true;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (!item.pointShape) {\n      item.pointShape = \"circle\";\n    }\n    if (!item.legendShape) {\n      switch (item.type) {\n        case 'line':\n          item.legendShape = \"line\";\n          break;\n        case 'column':\n          item.legendShape = \"rect\";\n          break;\n        case 'area':\n          item.legendShape = \"triangle\";\n          break;\n        default:\n          item.legendShape = \"circle\";}\n\n    }\n    return item;\n  });\n}\n\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else if (range >= 0.01) {\n    limit = 0.01;\n  } else if (range >= 0.001) {\n    limit = 0.001;\n  } else if (range >= 0.0001) {\n    limit = 0.0001;\n  } else if (range >= 0.00001) {\n    limit = 0.00001;\n  } else {\n    limit = 0.000001;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit) };\n\n}\n\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  for (var i = 0; i < text.length; i++) {\n    var item = text[i];\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  }\n  return width * fontSize / 10;\n}\n\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\n\nfunction dataCombineStack(series, len) {\n  var sum = new Array(len);\n  for (var j = 0; j < sum.length; j++) {\n    sum[j] = 0;\n  }\n  for (var i = 0; i < series.length; i++) {\n    for (var j = 0; j < sum.length; j++) {\n      sum[j] += series[i].data[j];\n    }\n  }\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\n  }, []);\n}\n\nfunction getTouches(touches, opts, e) {\n  var x, y;\n  if (touches.clientX) {\n    if (opts.rotate) {\n      y = opts.height - touches.clientX * opts.pixelRatio;\n      x = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    } else {\n      x = touches.clientX * opts.pixelRatio;\n      y = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    }\n  } else {\n    if (opts.rotate) {\n      y = opts.height - touches.x * opts.pixelRatio;\n      x = touches.y * opts.pixelRatio;\n    } else {\n      x = touches.x * opts.pixelRatio;\n      y = touches.y * opts.pixelRatio;\n    }\n  }\n  return {\n    x: x,\n    y: y };\n\n}\n\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined' && item.show) {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.type = item.type;\n      seriesItem.style = item.style;\n      seriesItem.pointShape = item.pointShape;\n      seriesItem.disableLegend = item.disableLegend;\n      seriesItem.name = item.name;\n      seriesItem.show = item.show;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  }\n  return data;\n}\n\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\n\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\n\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color };\n\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i = 0; _i < validCalPoints.length; _i++) {\n    var item = validCalPoints[_i];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getMixToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color,\n      disableLegend: item.disableLegend ? true : false };\n\n  });\n  textList = textList.filter(function (item) {\n    if (item.disableLegend !== true) {\n      return item;\n    }\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i2 = 0; _i2 < validCalPoints.length; _i2++) {\n    var item = validCalPoints[_i2];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getCandleToolTipData(series, seriesData, calPoints, index, categories, extra) {\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var upColor = extra.color.upFill;\n  var downColor = extra.color.downFill;\n  //颜色顺序为开盘，收盘，最低，最高\n  var color = [upColor, upColor, downColor, upColor];\n  var textList = [];\n  var text0 = {\n    text: categories[index],\n    color: null };\n\n  textList.push(text0);\n  seriesData.map(function (item) {\n    if (index == 0 && item.data[1] - item.data[0] < 0) {\n      color[1] = downColor;\n    } else {\n      if (item.data[0] < series[index - 1][1]) {\n        color[0] = downColor;\n      }\n      if (item.data[1] < item.data[0]) {\n        color[1] = downColor;\n      }\n      if (item.data[2] > series[index - 1][1]) {\n        color[2] = upColor;\n      }\n      if (item.data[3] < series[index - 1][1]) {\n        color[3] = downColor;\n      }\n    }\n    var text1 = {\n      text: '开盘：' + item.data[0],\n      color: color[0] };\n\n    var text2 = {\n      text: '收盘：' + item.data[1],\n      color: color[1] };\n\n    var text3 = {\n      text: '最低：' + item.data[2],\n      color: color[2] };\n\n    var text4 = {\n      text: '最高：' + item.data[3],\n      color: color[3] };\n\n    textList.push(text1, text2, text3, text4);\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  offset.x = Math.round(validCalPoints[0][0].x);\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction filterSeries(series) {\n  var tempSeries = [];\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].show == true) {\n      tempSeries.push(series[i]);\n    }\n  }\n  return tempSeries;\n}\n\nfunction findCurrentIndex(currentPoints, xAxisPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  var spacing = 0;\n  if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\n    spacing = opts.chartData.eachSpacing / 2;\n  }\n  if (isInExactChartArea(currentPoints, opts, config)) {\n    xAxisPoints.forEach(function (item, index) {\n      if (currentPoints.x + offset + spacing > item) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\n\nfunction findLegendIndex(currentPoints, legendData, opts) {\n  var currentIndex = -1;\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\n    var points = legendData.points;\n    var index = -1;\n    for (var i = 0, len = points.length; i < len; i++) {\n      var item = points[i];\n      for (var j = 0; j < item.length; j++) {\n        index += 1;\n        var area = item[j]['area'];\n        if (currentPoints.x > area[0] && currentPoints.x < area[2] && currentPoints.y > area[1] && currentPoints.y < area[3]) {\n          currentIndex = index;\n          break;\n        }\n      }\n    }\n    return currentIndex;\n  }\n  return currentIndex;\n}\n\nfunction isInExactLegendArea(currentPoints, area) {\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y &&\n  currentPoints.y < area.end.y;\n}\n\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x < opts.width - opts.area[1] + 10 && currentPoints.x > opts.area[3] - 10 && currentPoints.y > opts.area[0] && currentPoints.y < opts.height - opts.area[2];\n}\n\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n\n      return item;\n    });\n\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <=\n      rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n\n  return currentIndex;\n}\n\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\n  var currentIndex = -1;\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\n    var item = funnelData.series[i];\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findWordChartCurrentIndex(currentPoints, wordData) {\n  var currentIndex = -1;\n  for (var i = 0, len = wordData.length; i < len; i++) {\n    var item = wordData[i];\n    if (currentPoints.x > item.area[0] && currentPoints.x < item.area[2] && currentPoints.y > item.area[1] && currentPoints.y < item.area[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findMapChartCurrentIndex(currentPoints, opts) {\n  var currentIndex = -1;\n  var cData = opts.chartData.mapData;\n  var data = opts.series;\n  var tmp = pointToCoordinate(currentPoints.y, currentPoints.x, cData.bounds, cData.scale, cData.xoffset, cData.yoffset);\n  var poi = [tmp.x, tmp.y];\n  for (var i = 0, len = data.length; i < len; i++) {\n    var item = data[i].geometry.coordinates;\n    if (isPoiWithinPoly(poi, item)) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\n\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n\n  return newPoints;\n}\n\nfunction calLegendData(series, opts, config, chartData) {\n  var legendData = {\n    area: {\n      start: {\n        x: 0,\n        y: 0 },\n\n      end: {\n        x: 0,\n        y: 0 },\n\n      width: 0,\n      height: 0,\n      wholeWidth: 0,\n      wholeHeight: 0 },\n\n    points: [],\n    widthArr: [],\n    heightArr: [] };\n\n  if (opts.legend.show === false) {\n    chartData.legendData = legendData;\n    return legendData;\n  }\n\n  var padding = opts.legend.padding;\n  var margin = opts.legend.margin;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n    var legendList = [];\n    var widthCount = 0;\n    var widthCountArr = [];\n    var currentRow = [];\n    for (var i = 0; i < series.length; i++) {\n      var item = series[i];\n      var itemWidth = shapeWidth + shapeRight + measureText(item.name || 'undefined', fontSize) + opts.legend.itemGap;\n      if (widthCount + itemWidth > opts.width - opts.padding[1] - opts.padding[3]) {\n        legendList.push(currentRow);\n        widthCountArr.push(widthCount - opts.legend.itemGap);\n        widthCount = itemWidth;\n        currentRow = [item];\n      } else {\n        widthCount += itemWidth;\n        currentRow.push(item);\n      }\n    }\n    if (currentRow.length) {\n      legendList.push(currentRow);\n      widthCountArr.push(widthCount - opts.legend.itemGap);\n      legendData.widthArr = widthCountArr;\n      var legendWidth = Math.max.apply(null, widthCountArr);\n      switch (opts.legend.float) {\n        case 'left':\n          legendData.area.start.x = opts.padding[3];\n          legendData.area.end.x = opts.padding[3] + 2 * padding;\n          break;\n        case 'right':\n          legendData.area.start.x = opts.width - opts.padding[1] - legendWidth - 2 * padding;\n          legendData.area.end.x = opts.width - opts.padding[1];\n          break;\n        default:\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;}\n\n      legendData.area.width = legendWidth + 2 * padding;\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\n      legendData.points = legendList;\n    }\n  } else {\n    var len = series.length;\n    var maxHeight = opts.height - opts.padding[0] - opts.padding[2] - 2 * margin - 2 * padding;\n    var maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\n    legendData.area.height = maxLength * lineHeight + padding * 2;\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\n    switch (opts.legend.float) {\n      case 'top':\n        legendData.area.start.y = opts.padding[0] + margin;\n        legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n        break;\n      case 'bottom':\n        legendData.area.start.y = opts.height - opts.padding[2] - margin - legendData.area.height;\n        legendData.area.end.y = opts.height - opts.padding[2] - margin;\n        break;\n      default:\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;}\n\n    var lineNum = len % maxLength === 0 ? len / maxLength : Math.floor(len / maxLength + 1);\n    var _currentRow = [];\n    for (var _i3 = 0; _i3 < lineNum; _i3++) {\n      var temp = series.slice(_i3 * maxLength, _i3 * maxLength + maxLength);\n      _currentRow.push(temp);\n    }\n\n    legendData.points = _currentRow;\n\n    if (_currentRow.length) {\n      for (var _i4 = 0; _i4 < _currentRow.length; _i4++) {\n        var _item = _currentRow[_i4];\n        var maxWidth = 0;\n        for (var j = 0; j < _item.length; j++) {\n          var _itemWidth = shapeWidth + shapeRight + measureText(_item[j].name || 'undefined', fontSize) + opts.legend.itemGap;\n          if (_itemWidth > maxWidth) {\n            maxWidth = _itemWidth;\n          }\n        }\n        legendData.widthArr.push(maxWidth);\n        legendData.heightArr.push(_item.length * lineHeight + padding * 2);\n      }\n      var _legendWidth = 0;\n      for (var _i5 = 0; _i5 < legendData.widthArr.length; _i5++) {\n        _legendWidth += legendData.widthArr[_i5];\n      }\n      legendData.area.width = _legendWidth - opts.legend.itemGap + 2 * padding;\n      legendData.area.wholeWidth = legendData.area.width + padding;\n    }\n  }\n\n  switch (opts.legend.position) {\n    case 'top':\n      legendData.area.start.y = opts.padding[0] + margin;\n      legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n      break;\n    case 'bottom':\n      legendData.area.start.y = opts.height - opts.padding[2] - legendData.area.height - margin;\n      legendData.area.end.y = opts.height - opts.padding[2] - margin;\n      break;\n    case 'left':\n      legendData.area.start.x = opts.padding[3];\n      legendData.area.end.x = opts.padding[3] + legendData.area.width;\n      break;\n    case 'right':\n      legendData.area.start.x = opts.width - opts.padding[1] - legendData.area.width;\n      legendData.area.end.x = opts.width - opts.padding[1];\n      break;}\n\n  chartData.legendData = legendData;\n  return legendData;\n}\n\nfunction calCategoriesData(categories, opts, config, eachSpacing) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n\n  if (opts.xAxis.rotateLabel == true && maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\n\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n\n  var data = [];var _loop2 = function _loop2(\n  i) {\n    var each = series[i];\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion *\n      process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n\n    data.push(listItem);};for (var i = 0; i < series.length; i++) {_loop2(i);\n  }\n\n  return data;\n}\n\nfunction getPieDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var count = 0;\n  var _start_ = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  }\n  for (var _i6 = 0; _i6 < series.length; _i6++) {\n    var _item2 = series[_i6];\n    _item2.data = _item2.data === null ? 0 : _item2.data;\n    if (count === 0) {\n      _item2._proportion_ = 1 / series.length * process;\n    } else {\n      _item2._proportion_ = _item2.data / count * process;\n    }\n    _item2._radius_ = radius;\n  }\n  for (var _i7 = 0; _i7 < series.length; _i7++) {\n    var _item3 = series[_i7];\n    _item3._start_ = _start_;\n    _start_ += 2 * _item3._proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getFunnelDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  series = series.sort(function (a, b) {return parseInt(b.data) - parseInt(a.data);});\n  for (var i = 0; i < series.length; i++) {\n    series[i].radius = series[i].data / series[0].data * radius * process;\n    series[i]._proportion_ = series[i].data / series[0].data;\n  }\n  return series.reverse();\n}\n\nfunction getRoseDataPoints(series, type, minRadius, radius) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var count = 0;\n  var _start_ = 0;\n\n  var dataArr = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n    dataArr.push(item.data);\n  }\n\n  var minData = Math.min.apply(null, dataArr);\n  var maxData = Math.max.apply(null, dataArr);\n  var radiusLength = radius - minRadius;\n\n  for (var _i8 = 0; _i8 < series.length; _i8++) {\n    var _item4 = series[_i8];\n    _item4.data = _item4.data === null ? 0 : _item4.data;\n    if (count === 0 || type == 'area') {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = 1 / series.length * process;\n    } else {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = _item4.data / count * process;\n    }\n    _item4._radius_ = minRadius + radiusLength * ((_item4.data - minData) / (maxData - minData));\n  }\n  for (var _i9 = 0; _i9 < series.length; _i9++) {\n    var _item5 = series[_i9];\n    _item5._start_ = _start_;\n    _start_ += 2 * _item5._rose_proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getArcbarDataPoints(series, arcbarOption) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process == 1) {\n    process = 0.999999;\n  }\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    var totalAngle = void 0;\n    if (arcbarOption.type == 'default') {\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\n      } else {\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\n      }\n    } else {\n      totalAngle = 2;\n    }\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\n  var totalAngle = startAngle - endAngle + 1;\n  var tempStartAngle = startAngle;\n  for (var i = 0; i < categories.length; i++) {\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\n    categories[i]._startAngle_ = tempStartAngle;\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\n    if (categories[i]._endAngle_ >= 2) {\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\n    }\n    tempStartAngle = categories[i]._endAngle_;\n  }\n  return categories;\n}\n\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\n  var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    if (gaugeOption.pointer.color == 'auto') {\n      for (var _i10 = 0; _i10 < categories.length; _i10++) {\n        if (item.data <= categories[_i10].value) {\n          item.color = categories[_i10].color;\n          break;\n        }\n      }\n    } else {\n      item.color = gaugeOption.pointer.color;\n    }\n    var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\n    item._oldAngle_ = gaugeOption.oldAngle;\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\n      item._oldAngle_ += 2;\n    }\n    if (item.data >= gaugeOption.oldData) {\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\n    } else {\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\n    }\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  }\n\n  return maxLength;\n}\n\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / columnLen);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    if (item.width <= 0) {\n      item.width = 1;\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\n\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n\n    if (index > 0) {\n      item.width -= 2 * border;\n    }\n    return item;\n  });\n}\n\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\n\n  return points.map(function (item, indexn) {\n\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    return item;\n  });\n}\n\nfunction getXAxisPoints(categories, opts, config) {\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  if ((opts.type == 'line' || opts.type == 'area') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\n    dataCount -= 1;\n  }\n  var eachSpacing = spacingValid / dataCount;\n\n  var xAxisPoints = [];\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.xAxis.boundaryGap !== 'justify') {\n    if (opts.enableScroll === true) {\n      xAxisPoints.push(startX + categories.length * eachSpacing);\n    } else {\n      xAxisPoints.push(endX);\n    }\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var cPoints = [];\n      item.forEach(function (items, indexs) {\n        var point = {};\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n        var value = items.value || items;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        height *= process;\n        point.y = opts.height - Math.round(height) - opts.area[2];\n        cPoints.push(point);\n      });\n      points.push(cPoints);\n    }\n  });\n\n  return points;\n}\n\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index];\n      if (boundaryGap == 'center') {\n        point.x += Math.round(eachSpacing / 2);\n      }\n      var value = item;\n      if (typeof item === 'object' && item !== null) {\n        value = item.value;\n      }\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n\n      if (seriesIndex > 0) {\n        var value = 0;\n        for (var i = 0; i <= seriesIndex; i++) {\n          value += stackSeries[i].data[index];\n        }\n        var value0 = value - item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\n      } else {\n        var value = item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = 0;\n      }\n      var heightc = height0;\n      height *= process;\n      heightc *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getYAxisTextList(series, opts, config, stack) {\n  var data;\n  if (stack == 'stack') {\n    data = dataCombineStack(series, opts.categories.length);\n  } else {\n    data = dataCombine(series);\n  }\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor == Array) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor == Array) {\n        item.map(function (subitem) {\n          sorted.push(subitem);\n        });\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  if (typeof opts.yAxis.min === 'number') {\n    minData = Math.min(opts.yAxis.min, minData);\n  }\n  if (typeof opts.yAxis.max === 'number') {\n    maxData = Math.max(opts.yAxis.max, maxData);\n  }\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / config.yAxisSplit;\n\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\n\nfunction calYAxisData(series, opts, config) {\n  //堆叠图重算Y轴\n  var columnstyle = assign({}, {\n    type: \"\" },\n  opts.extra.column);\n  var ranges = getYAxisTextList(series, opts, config, columnstyle.type);\n  var yAxisWidth = config.yAxisWidth;\n  var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n  var rangesFormat = ranges.map(function (item) {\n    item = util.toFixed(item, 6);\n    item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n    yAxisWidth = Math.max(yAxisWidth, measureText(item, yAxisFontSize) + 5);\n    return item;\n  });\n  if (opts.yAxis.disabled === true) {\n    yAxisWidth = 0;\n  }\n\n  return {\n    rangesFormat: rangesFormat,\n    ranges: ranges,\n    yAxisWidth: yAxisWidth };\n\n}\n\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\n  var ranges = getYAxisTextList(series, opts, config);\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var maxVal = ranges[0];\n  var minVal = ranges[ranges.length - 1];\n  var minAxis = opts.padding[3];\n  var maxAxis = opts.padding[1] + spacingValid;\n  var item = maxVal - (maxVal - minVal) * (point - minAxis) / (maxAxis - minAxis);\n  item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n  return item;\n}\n\nfunction calMarkLineData(minRange, maxRange, points, opts) {\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  for (var i = 0; i < points.length; i++) {\n    var height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\n  }\n  return points;\n}\n\nfunction contextRotate(context, opts) {\n  if (opts.rotateLock !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n  } else if (opts._rotate_ !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n    opts._rotate_ = true;\n  }\n}\n\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  context.setStrokeStyle(\"#ffffff\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setFillStyle(color);\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 3.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 4 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n\nfunction drawRingTitle(opts, config, context, center) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX || 0);\n    var startY = center.y + subtitlefontSize / 2 + (opts.subtitle.offsetY || 0);\n    if (title) {\n      startY += (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.closePath();\n    context.stroke();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\n    var _startY = center.y + titlefontSize / 2 + (opts.title.offsetY || 0);\n    if (subtitle) {\n      _startY -= (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      //var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.beginPath();\n      context.setFontSize(series.textSize || config.fontSize);\n      context.setFillStyle(series.textColor || '#666666');\n      var value = data[index];\n      if (typeof data[index] === 'object' && data[index] !== null) {\n        value = data[index].value;\n      }\n      var formatVal = series.format ? series.format(value) : value;\n      context.fillText(String(formatVal), item.x - measureText(formatVal, series.textSize || config.fontSize) / 2, item.y -\n      2);\n      context.closePath();\n      context.stroke();\n    }\n  });\n\n}\n\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\n  radius -= gaugeOption.width / 2 + config.gaugeLabelTextMargin;\n\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\n  var splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\n  var nowAngle = gaugeOption.startAngle;\n  var nowNumber = gaugeOption.startNumber;\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    var pos = {\n      x: radius * Math.cos(nowAngle * Math.PI),\n      y: radius * Math.sin(nowAngle * Math.PI) };\n\n    var labelText = gaugeOption.labelFormat ? gaugeOption.labelFormat(nowNumber) : nowNumber;\n    pos.x += centerPosition.x - measureText(labelText) / 2;\n    pos.y += centerPosition.y;\n    var startX = pos.x;\n    var startY = pos.y;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(gaugeOption.labelColor || '#666666');\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n\n    nowAngle += splitAngle;\n    if (nowAngle >= 2) {\n      nowAngle = nowAngle % 2;\n    }\n    nowNumber += splitNumber;\n  }\n\n}\n\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle) };\n\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(radarOption.labelColor || '#666666');\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n}\n\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n\n  var seriesConvert = series.map(function (item) {\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_.toFixed(4) * 100) + '%';\n    if (item._rose_proportion_) item._proportion_ = item._rose_proportion_;\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var color = item.color;\n    var radius = item._radius_;\n    return {\n      arc: arc,\n      text: text,\n      color: color,\n      radius: radius,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n  });\n  for (var i = 0; i < seriesConvert.length; i++) {\n    var item = seriesConvert[i];\n    // line end\n    var orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\n    var orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * item.radius;\n    var orginY2 = Math.sin(item.arc) * item.radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text);\n    var startY = orginY3;\n\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3 }))\n    {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2 },\n\n      lineEnd: {\n        x: orginX1,\n        y: orginY1 },\n\n      start: {\n        x: orginX3,\n        y: startY },\n\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  }\n\n  for (var _i11 = 0; _i11 < textObjectCollection.length; _i11++) {\n    var _item6 = textObjectCollection[_i11];\n    var lineStartPoistion = convertCoordinateOrigin(_item6.lineStart.x, _item6.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(_item6.lineEnd.x, _item6.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(_item6.start.x, _item6.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(_item6.color);\n    context.setFillStyle(_item6.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = _item6.start.x < 0 ? textPosition.x + _item6.width : textPosition.x;\n    var textStartX = _item6.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + _item6.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(_item6.textSize || config.fontSize);\n    context.setFillStyle(_item6.textColor || '#666666');\n    context.fillText(_item6.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  }\n}\n\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.xAxisLabel) {\n    var labelText = opts.categories[opts.tooltip.index];\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n\n    var textX = offsetX - 0.5 * textWidth;\n    var textY = endY;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawMarkLine(minRange, maxRange, opts, config, context) {\n  var markLineOption = assign({}, {\n    type: 'solid',\n    dashLength: 4,\n    data: [] },\n  opts.extra.markLine);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.padding[1];\n  var points = calMarkLineData(minRange, maxRange, markLineOption.data, opts);\n\n  for (var i = 0; i < points.length; i++) {\n    var item = assign({}, {\n      lineColor: '#DE4A42',\n      showLabel: false,\n      labelFontColor: '#666666',\n      labelBgColor: '#DFE8FF',\n      labelBgOpacity: 0.8,\n      yAxisIndex: 0 },\n    points[i]);\n\n    if (markLineOption.type == 'dash') {\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\n    }\n    context.setStrokeStyle(item.lineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.beginPath();\n    context.moveTo(startX, item.y);\n    context.lineTo(endX, item.y);\n    context.stroke();\n    context.setLineDash([]);\n    if (item.showLabel) {\n      var labelText = opts.yAxis.format ? opts.yAxis.format(Number(item.value)) : item.value;\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText, config.fontSize);\n      var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n      var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n      var bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = item.y;\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\n      context.setStrokeStyle(item.labelBgColor);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.beginPath();\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(item.labelFontColor);\n      context.fillText(String(labelText), textX, textY + 0.5 * config.fontSize);\n      context.stroke();\n    }\n  }\n}\n\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 },\n  opts.extra.tooltip);\n\n  var startX = opts.area[3];\n  var endX = opts.width - opts.padding[1];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(startX, opts.tooltip.offset.y);\n  context.lineTo(endX, opts.tooltip.offset.y);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.yAxisLabel) {\n    var labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n    var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n    var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n    var bgWidth = bgEndX - bgStartX;\n\n    var textX = bgStartX + (bgWidth - textWidth) / 2;\n    var textY = opts.tooltip.offset.y;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(labelText, textX, textY + 0.5 * config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\n  var toolTipOption = assign({}, {\n    activeBgColor: '#000000',\n    activeBgOpacity: 0.08 },\n  opts.extra.tooltip);\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\n  context.rect(offsetX - eachSpacing / 2, startY, eachSpacing, endY - startY);\n  context.closePath();\n  context.fill();\n}\n\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    bgColor: '#000000',\n    bgOpacity: 0.7,\n    fontColor: '#FFFFFF' },\n  opts.extra.tooltip);\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n\n  offset = assign({\n    x: 0,\n    y: 0 },\n  offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text, config.fontSize);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n  if (toolTipHeight + offset.y > opts.height) {\n    offset.y = opts.height - toolTipHeight;\n  }\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  }\n\n  context.closePath();\n  context.fill();\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    if (item.color !== null) {\n      context.beginPath();\n      context.setFillStyle(item.color);\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n      config.toolTipPadding + 1;\n      if (isOverRightBorder) {\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n      }\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\n      context.closePath();\n    }\n  });\n\n  // draw text list\n\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n    config.toolTipPadding;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.fontColor);\n    context.fillText(item.text, startX, startY + config.fontSize);\n    context.closePath();\n    context.stroke();\n  });\n}\n\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, opts.padding[3] + 0.5 * config.fontSize);\n  context.closePath();\n  context.stroke();\n  context.restore();\n}\n\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var columnOption = assign({}, {\n    type: 'group',\n    width: eachSpacing / 2,\n    meter: {\n      border: 4,\n      fillColor: '#FFFFFF' } },\n\n  opts.extra.column);\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    switch (columnOption.type) {\n      case 'group':\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(tooltipPoints);\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setStrokeStyle(item.color || eachSeries.color);\n            context.setLineWidth(1);\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2;\n            var height = opts.height - item.y - opts.area[2];\n            context.moveTo(startX - 1, item.y);\n            context.lineTo(startX + item.width - 2, item.y);\n            context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n            context.lineTo(startX, opts.height - opts.area[2]);\n            context.lineTo(startX, item.y);\n            //context.rect(startX, item.y, item.width, height);\n            context.closePath();\n            context.stroke();\n            context.fill();\n          }\n        });\n        break;\n      case 'stack':\n        // 绘制堆叠数据图\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config,\n        seriesIndex,\n        series, process);\n        calPoints.push(points);\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\n\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2 + 1;\n            var height = opts.height - item.y - opts.area[2];\n            var height0 = opts.height - item.y0 - opts.area[2];\n            if (seriesIndex > 0) {\n              height -= height0;\n            }\n            context.moveTo(startX, item.y);\n            context.fillRect(startX, item.y, item.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        });\n        break;\n      case 'meter':\n        // 绘制温度计数据图\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        calPoints.push(points);\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meter.\n        border);\n        if (seriesIndex == 0) {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              //画背景颜色\n              context.beginPath();\n              context.setFillStyle(columnOption.meter.fillColor);\n              var startX = item.x - item.width / 2;\n              var height = opts.height - item.y - opts.area[2];\n              context.moveTo(startX, item.y);\n              context.fillRect(startX, item.y, item.width, height);\n              context.closePath();\n              context.fill();\n              //画边框线\n              if (columnOption.meter.border > 0) {\n                context.beginPath();\n                context.setStrokeStyle(eachSeries.color);\n                context.setLineWidth(columnOption.meter.border * opts.pixelRatio);\n                context.moveTo(startX + columnOption.meter.border * 0.5, item.y + height);\n                context.lineTo(startX + columnOption.meter.border * 0.5, item.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + item.width - columnOption.meter.border * 0.5, item.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + item.width - columnOption.meter.border * 0.5, item.y + height);\n                context.stroke();\n              }\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              context.beginPath();\n              context.setFillStyle(item.color || eachSeries.color);\n              var startX = item.x - item.width / 2;\n              var height = opts.height - item.y - opts.area[2];\n              context.moveTo(startX, item.y);\n              context.fillRect(startX, item.y, item.width, height);\n              context.closePath();\n              context.fill();\n            }\n          });\n        }\n        break;}\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      switch (columnOption.type) {\n        case 'group':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'stack':\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config,\n          seriesIndex,\n          series, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'meter':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          drawPointText(points, eachSeries, config, context);\n          break;}\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var candleOption = assign({}, {\n    color: {},\n    average: {} },\n  opts.extra.candle);\n  candleOption.color = assign({}, {\n    upLine: '#f04864',\n    upFill: '#f04864',\n    downLine: '#2fc25b',\n    downFill: '#2fc25b' },\n  candleOption.color);\n  candleOption.average = assign({}, {\n    show: false,\n    name: [],\n    day: [],\n    color: config.colors },\n  candleOption.average);\n  opts.extra.candle = candleOption;\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  //画均线\n  if (candleOption.average.show) {\n    seriesMA.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      //calPoints.push(points);\n      var splitPointList = splitPoints(points);\n\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(1);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n              item.x, item.\n              y);\n            }\n          });\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    });\n  }\n  //画K线\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList = splitPointList[0];\n\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      //如果上涨\n      if (data[index][1] - data[index][0] > 0) {\n        context.setStrokeStyle(candleOption.color.upLine);\n        context.setFillStyle(candleOption.color.upFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      } else {\n        context.setStrokeStyle(candleOption.color.downLine);\n        context.setFillStyle(candleOption.color.downFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      }\n      context.closePath();\n      context.fill();\n      context.stroke();\n    });\n  });\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var areaOption = assign({}, {\n    type: 'straight',\n    opacity: 0.2,\n    addLine: false,\n    width: 2 },\n  opts.extra.area);\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    var splitPointList = splitPoints(points);var _loop3 = function _loop3(\n\n    i) {\n      var points = splitPointList[i];\n      // 绘制区域数\n      context.beginPath();\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setLineWidth(areaOption.width * opts.pixelRatio);\n      if (points.length > 1) {\n        var firstPoint = points[0];\n        var lastPoint = points[points.length - 1];\n\n        context.moveTo(firstPoint.x, firstPoint.y);\n        if (areaOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var item = points[0];\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, endY);\n        context.lineTo(item.x - eachSpacing / 2, endY);\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n      }\n      context.closePath();\n      context.fill();\n\n      //画连线\n      if (areaOption.addLine) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(areaOption.width * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (areaOption.type === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      }};for (var i = 0; i < splitPointList.length; i++) {_loop3(i);\n    }\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var lineOption = opts.extra.line || {\n    type: 'straight',\n    width: 2 };\n\n  lineOption.type = lineOption.type ? lineOption.type : 'straight';\n  lineOption.width = lineOption.width ? lineOption.width : 2;\n\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setLineWidth(lineOption.width * opts.pixelRatio);\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        if (lineOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n              item.x, item.\n              y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n      context.closePath();\n      context.stroke();\n    });\n\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawMixDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  var columnIndex = 0;\n  var columnLength = 0;\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (eachSeries.type == 'column') {\n      columnLength += 1;\n    }\n  });\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    // 绘制柱状数据图\n    if (eachSeries.type == 'column') {\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n      points.forEach(function (item, index) {\n        if (item !== null) {\n          context.beginPath();\n          context.setStrokeStyle(item.color || eachSeries.color);\n          context.setLineWidth(1);\n          context.setFillStyle(item.color || eachSeries.color);\n          var startX = item.x - item.width / 2;\n          var height = opts.height - item.y - opts.area[2];\n          context.moveTo(startX, item.y);\n          context.moveTo(startX - 1, item.y);\n          context.lineTo(startX + item.width - 2, item.y);\n          context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n          context.lineTo(startX, opts.height - opts.area[2]);\n          context.lineTo(startX, item.y);\n          //context.rect(startX, item.y, item.width, height);\n          context.closePath();\n          context.stroke();\n          context.fill();\n          context.closePath();\n          context.fill();\n        }\n      });\n      columnIndex += 1;\n    }\n\n    //绘制区域图数据\n\n    if (eachSeries.type == 'area') {\n      var _splitPointList = splitPoints(points);var _loop4 = function _loop4(\n      i) {\n        var points = _splitPointList[i];\n        // 绘制区域数据\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setFillStyle(hexToRgb(eachSeries.color, 0.2));\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length > 1) {\n          firstPoint = points[0];\n          var lastPoint = points[points.length - 1];\n          context.moveTo(firstPoint.x, firstPoint.y);\n          if (eachSeries.style === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.lineTo(lastPoint.x, endY);\n          context.lineTo(firstPoint.x, endY);\n          context.lineTo(firstPoint.x, firstPoint.y);\n        } else {\n          var item = points[0];\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, endY);\n          context.lineTo(item.x - eachSpacing / 2, endY);\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n        }\n        context.closePath();\n        context.fill();};for (var i = 0; i < _splitPointList.length; i++) {var firstPoint;_loop4(i);\n      }\n    }\n\n    // 绘制折线数据图\n    if (eachSeries.type == 'line') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (eachSeries.style == 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\n                item.x,\n                item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    }\n\n    // 绘制点数据图\n    if (eachSeries.type == 'point') {\n      points.forEach(function (pointsa, index) {\n        if (pointsa) {\n          context.beginPath();\n          context.setFillStyle(eachSeries.color);\n          context.setStrokeStyle('#FFFFFF');\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(pointsa.x + 3.5 * opts.pixelRatio, pointsa.y);\n          context.arc(pointsa.x, pointsa.y, 4 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n          context.stroke();\n        }\n      });\n    }\n\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    var columnIndex = 0;\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      if (eachSeries.type !== 'column') {\n        drawPointText(points, eachSeries, config, context);\n      } else {\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n        drawPointText(points, eachSeries, config, context);\n        columnIndex += 1;\n      }\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing,\n    minRange: minRange,\n    maxRange: maxRange };\n\n}\n\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'candle' || opts.type == 'mix')) {\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.restore();\n\n}\n\nfunction drawXAxis(categories, opts, config, context) {\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  startX = xAxisData.startX,\n  endX = xAxisData.endX,\n  eachSpacing = xAxisData.eachSpacing;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var startY = opts.height - opts.area[2];\n  var endY = opts.area[0];\n\n  //绘制滚动条\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\n    var scrollScreenWidth = endX - startX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(startX, scrollY);\n    context.lineTo(endX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(startX + scrollLeft, scrollY);\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.closePath();\n    context.setLineCap('butt');\n  }\n\n  context.save();\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n\n  if (opts.xAxis.disableGrid !== true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    if (opts.xAxis.gridType == 'dash') {\n      context.setLineDash([opts.xAxis.dashLength, opts.xAxis.dashLength]);\n    }\n    if (opts.xAxis.type === 'calibration') {\n      xAxisPoints.forEach(function (item, index) {\n        if (index > 0) {\n          context.beginPath();\n          context.moveTo(item - eachSpacing / 2, startY);\n          context.lineTo(item - eachSpacing / 2, startY + 4 * opts.pixelRatio);\n          context.closePath();\n          context.stroke();\n        }\n      });\n    } else {\n      opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\n      xAxisPoints.forEach(function (item, index) {\n        if (index % opts.xAxis.gridEval == 0) {\n          context.beginPath();\n          context.moveTo(item, startY);\n          context.lineTo(item, endY);\n          context.stroke();\n        }\n      });\n    }\n    context.setLineDash([]);\n  }\n\n\n  //不绘制X轴\n  if (opts.xAxis.disabled !== true) {\n    // 对X轴列表做抽稀处理\n    var validWidth = opts.width - opts.padding[1] - opts.padding[3] - config.yAxisWidth - config.yAxisTitleWidth;\n    //默认全部显示X轴标签\n    var maxXAxisListLength = categories.length;\n    //如果设置了X轴单屏数量\n    if (opts.xAxis.labelCount) {\n      //如果设置X轴密度\n      if (opts.xAxis.itemCount) {\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\n      } else {\n        maxXAxisListLength = opts.xAxis.labelCount;\n      }\n      maxXAxisListLength -= 1;\n    }\n\n    var ratio = Math.ceil(categories.length / maxXAxisListLength);\n\n    var newCategories = [];\n    var cgLength = categories.length;\n    for (var i = 0; i < cgLength; i++) {\n      if (i % ratio !== 0) {\n        newCategories.push(\"\");\n      } else {\n        newCategories.push(categories[i]);\n      }\n    }\n    newCategories[cgLength - 1] = categories[cgLength - 1];\n\n    var xAxisFontSize = opts.xAxis.fontSize || config.fontSize;\n    if (config._xAxisTextAngle_ === 0) {\n      newCategories.forEach(function (item, index) {\n        var offset = -measureText(item, xAxisFontSize) / 2;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        context.fillText(item, xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - xAxisFontSize) / 2);\n        context.closePath();\n        context.stroke();\n      });\n\n    } else {\n      newCategories.forEach(function (item, index) {\n        context.save();\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        var textWidth = measureText(item);\n        var offset = -textWidth;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + xAxisFontSize / 2 + 5, opts.height),\n        transX = _calRotateTranslate.transX,\n        transY = _calRotateTranslate.transY;\n\n        context.rotate(-1 * config._xAxisTextAngle_);\n        context.translate(transX, transY);\n        context.fillText(item, xAxisPoints[index] + offset, startY + xAxisFontSize + 5);\n        context.closePath();\n        context.stroke();\n        context.restore();\n      });\n    }\n  }\n  context.restore();\n\n}\n\nfunction drawYAxisGrid(categories, opts, config, context) {\n  if (opts.yAxis.disableGrid === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / config.yAxisSplit;\n  var startX = opts.area[3];\n  var xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n  xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\n  var TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\n  var endX = startX + TotalWidth;\n\n  var points = [];\n  for (var i = 0; i < config.yAxisSplit + 1; i++) {\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\n  }\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  if (opts.yAxis.gridType == 'dash') {\n    context.setLineDash([opts.yAxis.dashLength, opts.yAxis.dashLength]);\n  }\n  context.setStrokeStyle(opts.yAxis.gridColor || \"#cccccc\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.beginPath();\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n    context.stroke();\n  });\n  context.setLineDash([]);\n\n  context.restore();\n}\n\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var rangesFormat = opts.chartData.yAxisData.rangesFormat;\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var endY = opts.height - opts.area[2];\n  var fillEndY = endY + config.xAxisHeight;\n  if (opts.xAxis.scrollShow) {\n    fillEndY -= 3 * opts.pixelRatio;\n  }\n  // set YAxis background\n  context.beginPath();\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, fillEndY);\n  }\n  if (opts.enableScroll == true) {\n    context.fillRect(endX, 0, opts.width, fillEndY);\n  }\n  context.closePath();\n  context.stroke();\n\n  var points = [];\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    points.push(opts.area[0] + eachSpacing * i);\n  }\n\n  var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n  rangesFormat.forEach(function (item, index) {\n    var pos = points[index] ? points[index] : endY;\n    context.beginPath();\n    context.setFontSize(yAxisFontSize);\n    context.setFillStyle(opts.yAxis.fontColor || '#666666');\n    context.fillText(String(item), opts.area[3] - config.yAxisWidth, pos + yAxisFontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n  if (opts.yAxis.title) {\n    drawYAxisTitle(opts.yAxis.title, opts, config, context);\n  }\n}\n\nfunction drawLegend(series, opts, config, context, chartData) {\n  if (opts.legend.show === false) {\n    return;\n  }\n  var legendData = chartData.legendData;\n  var legendList = legendData.points;\n  var legendArea = legendData.area;\n  var padding = opts.legend.padding;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var itemGap = opts.legend.itemGap;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n\n  //画背景及边框\n  context.beginPath();\n  context.setLineWidth(opts.legend.borderWidth);\n  context.setStrokeStyle(opts.legend.borderColor);\n  context.setFillStyle(opts.legend.backgroundColor);\n  context.moveTo(legendArea.start.x, legendArea.start.y);\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\n  context.closePath();\n  context.fill();\n  context.stroke();\n\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    var height = 0;\n    width = legendData.widthArr[listIndex];\n    height = legendData.heightArr[listIndex];\n    var startX = 0;\n    var startY = 0;\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n      startX = legendArea.start.x + (legendArea.width - width) / 2;\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\n    } else {\n      if (listIndex == 0) {\n        width = 0;\n      } else {\n        width = legendData.widthArr[listIndex - 1];\n      }\n      startX = legendArea.start.x + padding + width;\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\n    }\n\n    context.setFontSize(config.fontSize);\n    for (var i = 0; i < itemList.length; i++) {\n      var item = itemList[i];\n      item.area = [0, 0, 0, 0];\n      item.area[0] = startX;\n      item.area[1] = startY;\n      item.area[3] = startY + lineHeight;\n      context.beginPath();\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\n      switch (item.legendShape) {\n        case 'line':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio, 15 * opts.pixelRatio, 4 * opts.pixelRatio);\n          break;\n        case 'triangle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'diamond':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'circle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight, 5 * opts.pixelRatio, 0, 2 * Math.PI);\n          break;\n        case 'rect':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          break;\n        default:\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);}\n\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      startX += shapeWidth + shapeRight;\n      var fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\n      context.fillText(item.name, startX, startY + fontTrans);\n      context.closePath();\n      context.stroke();\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n        startX += measureText(item.name, fontSize) + itemGap;\n        item.area[2] = startX;\n      } else {\n        item.area[2] = startX + measureText(item.name, fontSize) + itemGap;;\n        startX -= shapeWidth + shapeRight;\n        startY += lineHeight;\n      }\n    }\n  });\n}\n\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = assign({}, {\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    ringWidth: 0,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.pie);\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = pieOption.activeRadius;\n  }\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n\n  series = getPieDataPoints(series, radius, process);\n\n  var activeRadius = pieOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += pieOption.offsetAngle * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, opts.extra.pie.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_,\n        eachSeries._start_ + 2 *\n        eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(pieOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(pieOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (pieOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.pie.ringWidth === 'number' && opts.extra.pie.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.pie.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawRoseDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var roseOption = assign({}, {\n    type: 'area',\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.rose);\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = roseOption.activeRadius;\n  }\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n  var minRadius = roseOption.minRadius || radius * 0.5;\n\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\n\n  var activeRadius = roseOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_,\n        eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(roseOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(roseOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 *\n    eachSeries._rose_proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (roseOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawArcbarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var arcbarOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    type: 'default',\n    width: 12 * opts.pixelRatio },\n  opts.extra.arcbar);\n\n  series = getArcbarDataPoints(series, arcbarOption, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= arcbarOption.width / 2;\n\n  //背景颜色\n  context.setLineWidth(arcbarOption.width);\n  context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\n  context.setLineCap('round');\n  context.beginPath();\n  if (arcbarOption.type == 'default') {\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle *\n    Math.PI, false);\n  } else {\n    context.arc(centerPosition.x, centerPosition.y, radius, 0, 2 * Math.PI, false);\n  }\n  context.stroke();\n\n  for (var i = 0; i < series.length; i++) {\n    var eachSeries = series[i];\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ *\n    Math.PI, false);\n    context.stroke();\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gaugeOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    width: 15,\n    splitLine: {\n      fixRadius: 0,\n      splitNumber: 10,\n      width: 15,\n      color: '#FFFFFF',\n      childNumber: 5,\n      childWidth: 5 },\n\n    pointer: {\n      width: 15,\n      color: 'auto' } },\n\n  opts.extra.gauge);\n\n  if (gaugeOption.oldAngle == undefined) {\n    gaugeOption.oldAngle = gaugeOption.startAngle;\n  }\n  if (gaugeOption.oldData == undefined) {\n    gaugeOption.oldData = 0;\n  }\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\n\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= gaugeOption.width / 2;\n  var innerRadius = radius - gaugeOption.width;\n\n  //画背景\n  context.setLineWidth(gaugeOption.width);\n  context.setLineCap('butt');\n  for (var i = 0; i < categories.length; i++) {\n    var eachCategories = categories[i];\n    context.beginPath();\n    context.setStrokeStyle(eachCategories.color);\n    context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ *\n    Math.PI, false);\n    context.stroke();\n  }\n  context.save();\n\n  //画刻度线\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n  var startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n  var endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n  var childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\n\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n  for (var _i12 = 0; _i12 < gaugeOption.splitLine.splitNumber + 1; _i12++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(2 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(endX, 0);\n    context.stroke();\n    context.rotate(splitAngle * Math.PI);\n  }\n  context.restore();\n\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n  for (var _i13 = 0; _i13 < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; _i13++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(childendX, 0);\n    context.stroke();\n    context.rotate(childAngle * Math.PI);\n  }\n  context.restore();\n\n  //画指针\n  series = getGaugeDataPoints(series, categories, gaugeOption, process);\n\n  for (var _i14 = 0; _i14 < series.length; _i14++) {\n    var eachSeries = series[_i14];\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((eachSeries._proportion_ - 1) * Math.PI);\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(gaugeOption.pointer.width, 0);\n    context.lineTo(0, -gaugeOption.pointer.width / 2);\n    context.lineTo(-innerRadius, 0);\n    context.lineTo(0, gaugeOption.pointer.width / 2);\n    context.lineTo(gaugeOption.pointer.width, 0);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFillStyle('#FFFFFF');\n    context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n  }\n\n  if (opts.dataLabel !== false) {\n    drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  if (process === 1 && opts.type === 'gauge') {\n    opts.extra.gauge.oldAngle = series[0]._proportion_;\n    opts.extra.gauge.oldData = series[0].data;\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    innerRadius: innerRadius,\n    categories: categories,\n    totalAngle: totalAngle };\n\n}\n\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = assign({}, {\n    gridColor: '#cccccc',\n    labelColor: '#666666',\n    opacity: 0.2 },\n  opts.extra.radar);\n\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin),\n  centerPosition.y - config.radarLabelTextMargin);\n  //TODO逻辑不对\n  radius -= opts.padding[1];\n\n  // draw grid\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor);\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n  // draw split line grid\n\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor);\n    coordinateAngle.forEach(function (angle, index) {\n      var pos = convertCoordinateOrigin(radius / config.radarGridCount * i * Math.cos(angle), radius / config.radarGridCount *\n      i * Math.sin(angle), centerPosition);\n      if (index === 0) {\n        startPos = pos;\n        context.moveTo(pos.x, pos.y);\n      } else {\n        context.lineTo(pos.x, pos.y);\n      }\n    });\n    context.lineTo(startPos.x, startPos.y);\n    context.stroke();\n    context.closePath();\n  };\n\n  for (var i = 1; i <= config.radarGridCount; i++) {\n    _loop(i);\n  }\n\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(hexToRgb(eachSeries.color, radarOption.opacity));\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle };\n\n}\n\nfunction normalInt(min, max, iter) {\n  iter = iter == 0 ? 1 : iter;\n  var arr = [];\n  for (var i = 0; i < iter; i++) {\n    arr[i] = Math.random();\n  };\n  return Math.floor(arr.reduce(function (i, j) {return i + j;}) / iter * (max - min)) + min;\n};\n\nfunction collisionNew(area, points, width, height) {\n  var isIn = false;\n  for (var i = 0; i < points.length; i++) {\n    if (points[i].area) {\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\n          isIn = true;\n          break;\n        } else {\n          isIn = false;\n        }\n      } else {\n        isIn = true;\n        break;\n      }\n    }\n  }\n  return isIn;\n};\n\nfunction getBoundingBox(data) {\n  var bounds = {},coords;\n  bounds.xMin = 180;\n  bounds.xMax = 0;\n  bounds.yMin = 90;\n  bounds.yMax = 0;\n  for (var i = 0; i < data.length; i++) {\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        var longitude = coords[j][0];\n        var latitude = coords[j][1];\n        var point = {\n          x: longitude,\n          y: latitude };\n\n        bounds.xMin = bounds.xMin < point.x ? bounds.xMin : point.x;\n        bounds.xMax = bounds.xMax > point.x ? bounds.xMax : point.x;\n        bounds.yMin = bounds.yMin < point.y ? bounds.yMin : point.y;\n        bounds.yMax = bounds.yMax > point.y ? bounds.yMax : point.y;\n      }\n    }\n  }\n  return bounds;\n}\n\nfunction coordinateToPoint(latitude, longitude, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (longitude - bounds.xMin) * scale + xoffset,\n    y: (bounds.yMax - latitude) * scale + yoffset };\n\n}\n\nfunction pointToCoordinate(pointY, pointX, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (pointX - xoffset) / scale + bounds.xMin,\n    y: bounds.yMax - (pointY - yoffset) / scale };\n\n}\n\nfunction isRayIntersectsSegment(poi, s_poi, e_poi) {\n  if (s_poi[1] == e_poi[1]) {return false;}\n  if (s_poi[1] > poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (s_poi[1] < poi[1] && e_poi[1] < poi[1]) {return false;}\n  if (s_poi[1] == poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (e_poi[1] == poi[1] && s_poi[1] > poi[1]) {return false;}\n  if (s_poi[0] < poi[0] && e_poi[1] < poi[1]) {return false;}\n  var xseg = e_poi[0] - (e_poi[0] - s_poi[0]) * (e_poi[1] - poi[1]) / (e_poi[1] - s_poi[1]);\n  if (xseg < poi[0]) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction isPoiWithinPoly(poi, poly) {\n  var sinsc = 0;\n  for (var i = 0; i < poly.length; i++) {\n    var epoly = poly[i][0];\n    if (poly.length == 1) {\n      epoly = poly[i][0];\n    }\n    for (var j = 0; j < epoly.length - 1; j++) {\n      var s_poi = epoly[j];\n      var e_poi = epoly[j + 1];\n      if (isRayIntersectsSegment(poi, s_poi, e_poi)) {\n        sinsc += 1;\n      }\n    }\n  }\n\n  if (sinsc % 2 == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nfunction drawMapDataPoints(series, opts, config, context) {\n  var mapOption = assign({}, {\n    border: true,\n    borderWidth: 1,\n    borderColor: '#666666',\n    fillOpacity: 0.6,\n    activeBorderColor: '#f04864',\n    activeFillColor: '#facc14',\n    activeFillOpacity: 1 },\n  opts.extra.map);\n  var coords, point;\n  var data = series;\n  var bounds = getBoundingBox(data);\n  var xScale = opts.width / Math.abs(bounds.xMax - bounds.xMin);\n  var yScale = opts.height / Math.abs(bounds.yMax - bounds.yMin);\n  var scale = xScale < yScale ? xScale : yScale;\n  var xoffset = opts.width / 2 - Math.abs(bounds.xMax - bounds.xMin) / 2 * scale;\n  var yoffset = opts.height / 2 - Math.abs(bounds.yMax - bounds.yMin) / 2 * scale;\n  context.beginPath();\n  context.clearRect(0, 0, opts.width, opts.height);\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  for (var i = 0; i < data.length; i++) {\n    context.beginPath();\n    context.setLineWidth(mapOption.borderWidth * opts.pixelRatio);\n    context.setStrokeStyle(mapOption.borderColor);\n    context.setFillStyle(hexToRgb(series[i].color, mapOption.fillOpacity));\n    if (opts.tooltip) {\n      if (opts.tooltip.index == i) {\n        context.setStrokeStyle(mapOption.activeBorderColor);\n        context.setFillStyle(hexToRgb(mapOption.activeFillColor, mapOption.activeFillOpacity));\n      }\n    }\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        point = coordinateToPoint(coords[j][1], coords[j][0], bounds, scale, xoffset, yoffset);\n        if (j === 0) {\n          context.beginPath();\n          context.moveTo(point.x, point.y);\n        } else {\n          context.lineTo(point.x, point.y);\n        }\n      }\n      context.fill();\n      if (mapOption.border == true) {\n        context.stroke();\n      }\n    }\n    if (opts.dataLabel == true) {\n      var centerPoint = data[i].properties.centroid;\n      if (centerPoint) {\n        point = coordinateToPoint(centerPoint[1], centerPoint[0], bounds, scale, xoffset, yoffset);\n        var fontSize = data[i].textSize || config.fontSize;\n        var text = data[i].properties.name;\n        context.beginPath();\n        context.setFontSize(fontSize);\n        context.setFillStyle(data[i].textColor || '#666666');\n        context.fillText(text, point.x - measureText(text, fontSize) / 2, point.y + fontSize / 2);\n        context.closePath();\n        context.stroke();\n      }\n    }\n  }\n  opts.chartData.mapData = {\n    bounds: bounds,\n    scale: scale,\n    xoffset: xoffset,\n    yoffset: yoffset };\n\n  drawToolTipBridge(opts, config, context, 1);\n  context.draw();\n}\n\nfunction getWordCloudPoint(opts, type) {\n  var points = opts.series.sort(function (a, b) {return parseInt(b.textSize) - parseInt(a.textSize);});\n  switch (type) {\n    case 'normal':\n      for (var i = 0; i < points.length; i++) {\n        var text = points[i].name;\n        var tHeight = points[i].textSize;\n        var tWidth = measureText(text, tHeight);\n        var x = void 0,y = void 0;\n        var area = void 0;\n        var breaknum = 0;\n        while (true) {\n          breaknum++;\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\n          var isCollision = collisionNew(area, points, opts.width, opts.height);\n          if (!isCollision) break;\n          if (breaknum == 1000) {\n            area = [-100, -100, -100, -100];\n            break;\n          }\n        };\n        points[i].area = area;\n      }\n      break;\n    case 'vertical':var\n      Spin = function Spin() {\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\n        if (Math.random() > 0.7) {\n          return true;\n        } else {return false;};\n      };;\n      for (var _i15 = 0; _i15 < points.length; _i15++) {\n        var _text = points[_i15].name;\n        var _tHeight = points[_i15].textSize;\n        var _tWidth = measureText(_text, _tHeight);\n        var isSpin = Spin();\n        var _x = void 0,_y = void 0,_area = void 0,areav = void 0;\n        var _breaknum = 0;\n        while (true) {\n          _breaknum++;\n          var _isCollision = void 0;\n          if (isSpin) {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_y - 5 - _tWidth + opts.width / 2, -_x - 5 + opts.height / 2, _y + 5 + opts.width / 2, -_x + _tHeight + 5 + opts.height / 2];\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) - 5, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) + _tHeight, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) + _tWidth + 5];\n            _isCollision = collisionNew(areav, points, opts.height, opts.width);\n          } else {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_x - 5 + opts.width / 2, _y - 5 - _tHeight + opts.height / 2, _x + _tWidth + 5 + opts.width / 2, _y + 5 + opts.height / 2];\n            _isCollision = collisionNew(_area, points, opts.width, opts.height);\n          }\n          if (!_isCollision) break;\n          if (_breaknum == 1000) {\n            _area = [-1000, -1000, -1000, -1000];\n            break;\n          }\n        };\n        if (isSpin) {\n          points[_i15].area = areav;\n          points[_i15].areav = _area;\n        } else {\n          points[_i15].area = _area;\n        }\n        points[_i15].rotate = isSpin;\n      };\n      break;}\n\n  return points;\n}\n\n\nfunction drawWordCloudDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var wordOption = assign({}, {\n    type: 'normal',\n    autoColors: true },\n  opts.extra.word);\n\n  context.beginPath();\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  context.save();\n  var points = opts.chartData.wordCloudData;\n  context.translate(opts.width / 2, opts.height / 2);\n\n  for (var i = 0; i < points.length; i++) {\n    context.save();\n    if (points[i].rotate) {\n      context.rotate(90 * Math.PI / 180);\n    }\n    var text = points[i].name;\n    var tHeight = points[i].textSize;\n    var tWidth = measureText(text, tHeight);\n    context.beginPath();\n    context.setStrokeStyle(points[i].color);\n    context.setFillStyle(points[i].color);\n    context.setFontSize(tHeight);\n    if (points[i].rotate) {\n      if (points[i].areav[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n      }\n    } else {\n      if (points[i].area[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n\n      }\n    }\n\n    context.stroke();\n    context.restore();\n  }\n  context.restore();\n}\n\nfunction drawFunnelDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var funnelOption = assign({}, {\n    activeWidth: 10,\n    activeOpacity: 0.3,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF',\n    fillOpacity: 1,\n    labelAlign: 'right' },\n  opts.extra.funnel);\n  var eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.height - opts.area[2] };\n\n  var activeWidth = funnelOption.activeWidth;\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\n  series = getFunnelDataPoints(series, radius, process);\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  for (var i = 0; i < series.length; i++) {\n    if (i == 0) {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(-activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(activeWidth, 0);\n          context.lineTo(-activeWidth, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    } else {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(0, 0);\n          context.lineTo(-series[i - 1].radius - activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(series[i - 1].radius + activeWidth, 0);\n          context.lineTo(0, 0);\n          context.closePath();\n          context.fill();\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i - 1].radius, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(series[i - 1].radius, 0);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    }\n    context.translate(0, -eachSpacing);\n  }\n  context.restore();\n\n  if (opts.dataLabel !== false && process === 1) {\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var startX = void 0,endX = void 0,startY = void 0,fontSize = void 0;\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    if (labelAlign == 'right') {\n      if (i == 0) {\n        startX = (item.funnelArea[2] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\n      }\n      endX = startX + activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    } else {\n      if (i == 0) {\n        startX = (item.funnelArea[0] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\n      }\n      endX = startX - activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX - 5 - measureText(text), startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    }\n\n  }\n}\n\n\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\n\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  } };\n\n\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n\n  function createAnimationFrame() {\n    if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\n\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeries(series, opts, config);\n  var duration = opts.animation ? opts.duration : 0;\n  this.animationInstance && this.animationInstance.stop();\n  var seriesMA = null;\n  if (type == 'candle') {\n    var average = assign({}, opts.extra.candle.average);\n    if (average.show) {\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\n      seriesMA = fillSeries(seriesMA, opts, config);\n      opts.seriesMA = seriesMA;\n    } else if (opts.seriesMA) {\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\n    } else {\n      seriesMA = series;\n    }\n  } else {\n    seriesMA = series;\n  }\n\n  /* 过滤掉show=false的series */\n  opts._series_ = series = filterSeries(series);\n\n  //重新计算图表区域\n\n  opts.area = new Array(4);\n  //复位绘图区域\n  for (var j = 0; j < 4; j++) {\n    opts.area[j] = opts.padding[j];\n  }\n\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData),\n  legendHeight = _calLegendData.area.wholeHeight,\n  legendWidth = _calLegendData.area.wholeWidth;\n  //TODO废弃config.legendHeight参数\n  config.legendHeight = legendHeight;\n  switch (opts.legend.position) {\n    case 'top':\n      opts.area[0] += legendHeight;\n      break;\n    case 'bottom':\n      opts.area[2] += legendHeight;\n      break;\n    case 'left':\n      opts.area[3] += legendWidth;\n      break;\n    case 'right':\n      opts.area[1] += legendWidth;\n      break;}\n\n\n  var _calYAxisData = {},yAxisWidth = 0;\n  if (opts.type === 'line' || opts.type === 'column' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle') {\n    _calYAxisData = calYAxisData(series, opts, config);\n    yAxisWidth = _calYAxisData.yAxisWidth;\n    config.yAxisWidth = yAxisWidth;\n    opts.area[3] += yAxisWidth;\n  } else {\n    config.yAxisWidth = yAxisWidth;\n  }\n  opts.chartData.yAxisData = _calYAxisData;\n\n  if (opts.categories && opts.categories.length) {\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\n    var _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n    xAxisHeight = _calCategoriesData.xAxisHeight,\n    angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n    opts.area[2] += xAxisHeight;\n    opts.chartData.categoriesData = _calCategoriesData;\n  }\n\n  //计算右对齐偏移距离\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\n    var offsetLeft = 0,\n    xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n    startX = opts.chartData.xAxisData.startX,\n    endX = opts.chartData.xAxisData.endX,\n    eachSpacing = opts.chartData.xAxisData.eachSpacing;\n    var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var screenWidth = endX - startX;\n    offsetLeft = screenWidth - totalWidth;\n    _this.scrollOption = {\n      currentOffset: offsetLeft,\n      startTouchX: offsetLeft,\n      distance: 0,\n      lastMoveTime: 0 };\n\n    opts._scrollDistance_ = offsetLeft;\n  }\n\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA);\n  }\n\n  switch (type) {\n    case 'word':\n      var wordOption = assign({}, {\n        type: 'normal',\n        autoColors: true },\n      opts.extra.word);\n      if (opts.updateData == true || opts.updateData == undefined) {\n        opts.chartData.wordCloudData = getWordCloudPoint(opts, wordOption.type);\n      }\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawWordCloudDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'map':\n      context.clearRect(0, 0, opts.width, opts.height);\n      drawMapDataPoints(series, opts, config, context);\n      break;\n    case 'funnel':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawLineDataPoints.xAxisPoints,\n          calPoints = _drawLineDataPoints.calPoints,\n          eachSpacing = _drawLineDataPoints.eachSpacing,\n          minRange = _drawLineDataPoints.minRange,\n          maxRange = _drawLineDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'mix':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawMixDataPoints.xAxisPoints,\n          calPoints = _drawMixDataPoints.calPoints,\n          eachSpacing = _drawMixDataPoints.eachSpacing,\n          minRange = _drawMixDataPoints.minRange,\n          maxRange = _drawMixDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n          calPoints = _drawColumnDataPoints.calPoints,\n          eachSpacing = _drawColumnDataPoints.eachSpacing,\n          minRange = _drawColumnDataPoints.minRange,\n          maxRange = _drawColumnDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n          calPoints = _drawAreaDataPoints.calPoints,\n          eachSpacing = _drawAreaDataPoints.eachSpacing,\n          minRange = _drawAreaDataPoints.minRange,\n          maxRange = _drawAreaDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'rose':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'arcbar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'candle':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\n          xAxisPoints = _drawCandleDataPoints.xAxisPoints,\n          calPoints = _drawCandleDataPoints.calPoints,\n          eachSpacing = _drawCandleDataPoints.eachSpacing,\n          minRange = _drawCandleDataPoints.minRange,\n          maxRange = _drawCandleDataPoints.maxRange;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(minRange, maxRange, opts, config, context);\n          }\n          if (seriesMA) {\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\n          } else {\n            drawLegend(opts.series, opts, config, context, opts.chartData);\n          }\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;}\n\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\n\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\n\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        console.error(__f__(e, \" at components/u-charts/u-charts.js:4518\"));\n      }\n    });\n  }\n};\n\nvar Charts = function Charts(opts) {\n  opts.pixelRatio = opts.pixelRatio ? opts.pixelRatio : 1;\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = assign({}, opts.title);\n  opts.subtitle = assign({}, opts.subtitle);\n  opts.duration = opts.duration ? opts.duration : 1000;\n  opts.yAxis = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio },\n  opts.yAxis);\n  opts.xAxis = assign({}, {\n    rotateLabel: false,\n    type: 'calibration',\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio,\n    scrollAlign: 'left',\n    boundaryGap: 'center' },\n  opts.xAxis);\n  opts.legend = assign({}, {\n    show: true,\n    position: 'bottom',\n    float: 'center',\n    backgroundColor: 'rgba(0,0,0,0)',\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    padding: 5,\n    margin: 5,\n    itemGap: 10,\n    fontSize: opts.fontSize,\n    lineHeight: opts.fontSize,\n    fontColor: '#333333',\n    format: {},\n    hiddenColor: '#CECECE' },\n  opts.legend);\n  opts.legend.borderWidth = opts.legend.borderWidth * opts.pixelRatio;\n  opts.legend.itemGap = opts.legend.itemGap * opts.pixelRatio;\n  opts.legend.padding = opts.legend.padding * opts.pixelRatio;\n  opts.legend.margin = opts.legend.margin * opts.pixelRatio;\n  opts.extra = assign({}, opts.extra);\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation ? true : false;\n\n  var config$$1 = JSON.parse(JSON.stringify(config));\n  config$$1.colors = opts.colors ? opts.colors : config$$1.colors;\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  if (opts.type == 'pie' || opts.type == 'ring') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  if (opts.type == 'rose') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n  config$$1.yAxisSplit = opts.yAxis.splitNumber ? opts.yAxis.splitNumber : config.yAxisSplit;\n\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配高分屏\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\n  for (var i = 0; i < 4; i++) {\n    opts.padding[i] *= opts.pixelRatio;\n  }\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    config$$1.xAxisHeight += 6 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.legendHeight = config.legendHeight * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  opts.$this = opts.$this ? opts.$this : this;\n\n  this.context = uni.createCanvasContext(opts.canvasId, opts.$this);\n  /* 兼容原生H5\n                                                                     this.context = document.getElementById(opts.canvasId).getContext(\"2d\");\n                                                                     this.context.setStrokeStyle = function(e){ return this.strokeStyle=e; }\n                                                                     this.context.setLineWidth = function(e){ return this.lineWidth=e; }\n                                                                     this.context.setLineCap = function(e){ return this.lineCap=e; }\n                                                                     this.context.setFontSize = function(e){ return this.font=e+\"px sans-serif\"; }\n                                                                     this.context.setFillStyle = function(e){ return this.fillStyle=e; }\n                                                                     this.context.draw = function(){ }\n                                                                     */\n\n  opts.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0,\n    lastMoveTime: 0 };\n\n\n  this.opts = opts;\n  this.config = config$$1;\n\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\n\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts = assign({}, this.opts, data);\n  this.opts.updateData = true;\n  var scrollPosition = data.scrollPosition || 'current';\n  switch (scrollPosition) {\n    case 'current':\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      break;\n    case 'left':\n      this.opts._scrollDistance_ = 0;\n      this.scrollOption = {\n        currentOffset: 0,\n        startTouchX: 0,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      break;\n    case 'right':\n      var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n      yAxisWidth = _calYAxisData.yAxisWidth;\n      this.config.yAxisWidth = yAxisWidth;\n      var offsetLeft = 0;\n      var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n      xAxisPoints = _getXAxisPoints0.xAxisPoints,\n      startX = _getXAxisPoints0.startX,\n      endX = _getXAxisPoints0.endX,\n      eachSpacing = _getXAxisPoints0.eachSpacing;\n      var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n      var screenWidth = endX - startX;\n      offsetLeft = screenWidth - totalWidth;\n      this.scrollOption = {\n        currentOffset: offsetLeft,\n        startTouchX: offsetLeft,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      this.opts._scrollDistance_ = offsetLeft;\n      break;}\n\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.zoom = function () {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\n  if (this.opts.enableScroll !== true) {\n    console.log(__f__('请启用滚动条后使用！', \" at components/u-charts/u-charts.js:4679\"));\n    return;\n  }\n  //当前屏幕中间点\n  var centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(\n  this.opts.xAxis.itemCount / 2);\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = val.itemCount;\n  //重新计算x轴偏移距离\n  var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n  yAxisWidth = _calYAxisData.yAxisWidth;\n  this.config.yAxisWidth = yAxisWidth;\n  var offsetLeft = 0;\n  var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n  xAxisPoints = _getXAxisPoints0.xAxisPoints,\n  startX = _getXAxisPoints0.startX,\n  endX = _getXAxisPoints0.endX,\n  eachSpacing = _getXAxisPoints0.eachSpacing;\n  var centerLeft = eachSpacing * centerPoint;\n  var screenWidth = endX - startX;\n  var MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\n  offsetLeft = screenWidth / 2 - centerLeft;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption = {\n    currentOffset: offsetLeft,\n    startTouchX: offsetLeft,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\n\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\n\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose') {\n      return findPieChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.radarData, this.opts.categories.length);\n    } else if (this.opts.type === 'funnel') {\n      return findFunnelChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.funnelData);\n    } else if (this.opts.type === 'map') {\n      return findMapChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts);\n    } else if (this.opts.type === 'word') {\n      return findWordChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.wordCloudData);\n    } else {\n      return findCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.xAxisPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\n\nCharts.prototype.getLegendDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    return findLegendIndex({\n      x: _touches$.x,\n      y: _touches$.y },\n    this.opts.chartData.legendData);\n  }\n  return -1;\n};\n\nCharts.prototype.touchLegend = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var index = this.getLegendDataIndex(e);\n    if (index >= 0) {\n      this.opts.series[index].show = !this.opts.series[index].show;\n      this.opts.animation = option.animation ? true : false;\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n    }\n  }\n\n};\n\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (!touches) {\n    console.log(__f__(\"touchError\", \" at components/u-charts/u-charts.js:4815\"));\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  var currentOffset = this.scrollOption.currentOffset;\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: currentOffset,\n    animation: false });\n\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'mix') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getMixToolTipData.textList,\n        offset = _getMixToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'candle') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts.chartData.calPoints,\n        index, this.opts.categories, this.opts.extra.candle, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose' || this.opts.type === 'funnel') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'map' || this.opts.type === 'word') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.properties.name,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    opts.updateData = false;\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'radar') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var textList = seriesData.map(function (item) {\n          return {\n            text: option.format ? option.format(item) : item.name + ': ' + item.data,\n            color: item.color };\n\n        });\n        var offset = {\n          x: _touches$.x,\n          y: _touches$.y };\n\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\n\nCharts.prototype.translate = function (distance) {\n  this.scrollOption = {\n    currentOffset: distance,\n    startTouchX: distance,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: distance,\n    animation: false });\n\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\n};\n\nCharts.prototype.scrollStart = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    this.scrollOption.startTouchX = _touches$.x;\n  }\n};\n\nCharts.prototype.scroll = function (e) {\n  if (this.scrollOption.lastMoveTime === 0) {\n    this.scrollOption.lastMoveTime = Date.now();\n  }\n  var Limit = this.opts.extra.touchMoveLimit || 20;\n  var currMoveTime = Date.now();\n  var duration = currMoveTime - this.scrollOption.lastMoveTime;\n  if (duration < Math.floor(1000 / Limit)) return;\n  this.scrollOption.lastMoveTime = currMoveTime;\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches && this.opts.enableScroll === true) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var _distance;\n    _distance = _touches$.x - this.scrollOption.startTouchX;\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(currentOffset + _distance, this.opts.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false });\n\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n    return currentOffset + _distance;\n  }\n};\n\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n    currentOffset = _scrollOption.currentOffset,\n    distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nif ( true && typeof module.exports === \"object\") {\n  module.exports = Charts;\n  //export default Charts;//建议使用nodejs的module导出方式，如报错请使用export方式导出\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91LWNoYXJ0cy91LWNoYXJ0cy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJ5QXhpc1dpZHRoIiwieUF4aXNTcGxpdCIsInhBeGlzSGVpZ2h0IiwieEF4aXNMaW5lSGVpZ2h0IiwibGVnZW5kSGVpZ2h0IiwieUF4aXNUaXRsZVdpZHRoIiwicGFkZGluZyIsInBpeGVsUmF0aW8iLCJyb3RhdGUiLCJjb2x1bWVQYWRkaW5nIiwiZm9udFNpemUiLCJkYXRhUG9pbnRTaGFwZSIsImNvbG9ycyIsInBpZUNoYXJ0TGluZVBhZGRpbmciLCJwaWVDaGFydFRleHRQYWRkaW5nIiwieEF4aXNUZXh0UGFkZGluZyIsInRpdGxlQ29sb3IiLCJ0aXRsZUZvbnRTaXplIiwic3VidGl0bGVDb2xvciIsInN1YnRpdGxlRm9udFNpemUiLCJ0b29sVGlwUGFkZGluZyIsInRvb2xUaXBCYWNrZ3JvdW5kIiwidG9vbFRpcE9wYWNpdHkiLCJ0b29sVGlwTGluZUhlaWdodCIsInJhZGFyR3JpZENvdW50IiwicmFkYXJMYWJlbFRleHRNYXJnaW4iLCJnYXVnZUxhYmVsVGV4dE1hcmdpbiIsImFzc2lnbiIsIk9iamVjdCIsInRhcmdldCIsInZhckFyZ3MiLCJUeXBlRXJyb3IiLCJ0byIsImluZGV4IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwibmV4dFNvdXJjZSIsIm5leHRLZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ1dGlsIiwidG9GaXhlZCIsIm51bSIsImxpbWl0IiwiaXNGbG9hdCIsImFwcHJveGltYXRlbHlFcXVhbCIsIm51bTEiLCJudW0yIiwiTWF0aCIsImFicyIsImlzU2FtZVNpZ24iLCJpc1NhbWVYQ29vcmRpbmF0ZUFyZWEiLCJwMSIsInAyIiwieCIsImlzQ29sbGlzaW9uIiwib2JqMSIsIm9iajIiLCJlbmQiLCJzdGFydCIsIndpZHRoIiwieSIsImhlaWdodCIsImZsYWciLCJnZXRINU9mZnNldCIsImUiLCJtcCIsImNoYW5nZWRUb3VjaGVzIiwicHVzaCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaGV4VG9SZ2IiLCJoZXhWYWx1ZSIsIm9wYyIsInJneCIsImhleCIsInJlcGxhY2UiLCJtIiwiciIsImciLCJiIiwicmdiIiwiZXhlYyIsInBhcnNlSW50IiwiZmluZFJhbmdlIiwidHlwZSIsImlzTmFOIiwiRXJyb3IiLCJtdWx0aXBsZSIsImNlaWwiLCJmbG9vciIsImNhbENhbmRsZU1BIiwiZGF5QXJyIiwibmFtZUFyciIsImNvbG9yQXJyIiwia2RhdGEiLCJzZXJpZXNUZW1wIiwiayIsInNlcmllc0l0ZW0iLCJkYXRhIiwibmFtZSIsImNvbG9yIiwiaSIsImxlbiIsInN1bSIsImoiLCJjYWxWYWxpZERpc3RhbmNlIiwiZGlzdGFuY2UiLCJjaGFydERhdGEiLCJvcHRzIiwiZGF0YUNoYXJ0QXJlYVdpZHRoIiwiYXJlYSIsImRhdGFDaGFydFdpZHRoIiwiZWFjaFNwYWNpbmciLCJ4QXhpc0RhdGEiLCJ4QXhpc1BvaW50cyIsInZhbGlkRGlzdGFuY2UiLCJpc0luQW5nbGVSYW5nZSIsImFuZ2xlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYWRqdXN0IiwiUEkiLCJjYWxSb3RhdGVUcmFuc2xhdGUiLCJoIiwieHYiLCJ5diIsInRyYW5zWCIsInNxcnQiLCJ0cmFuc1kiLCJjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMiLCJwb2ludHMiLCJpc05vdE1pZGRsZVBvaW50IiwibWF4IiwibWluIiwiYSIsInBBeCIsInBBeSIsInBCeCIsInBCeSIsImxhc3QiLCJjdHJBIiwiY3RyQiIsImNvbnZlcnRDb29yZGluYXRlT3JpZ2luIiwiY2VudGVyIiwiYXZvaWRDb2xsaXNpb24iLCJvYmoiLCJmaWxsU2VyaWVzIiwic2VyaWVzIiwibWFwIiwiaXRlbSIsInNob3ciLCJwb2ludFNoYXBlIiwibGVnZW5kU2hhcGUiLCJnZXREYXRhUmFuZ2UiLCJtaW5EYXRhIiwibWF4RGF0YSIsInJhbmdlIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsIm1lYXN1cmVUZXh0IiwidGV4dCIsInVuZGVmaW5lZCIsIlN0cmluZyIsInNwbGl0IiwidGVzdCIsImRhdGFDb21iaW5lIiwicmVkdWNlIiwiY29uY2F0IiwiZGF0YUNvbWJpbmVTdGFjayIsIkFycmF5IiwiZ2V0VG91Y2hlcyIsInRvdWNoZXMiLCJjbGllbnRYIiwicGFnZVkiLCJjdXJyZW50VGFyZ2V0Iiwib2Zmc2V0VG9wIiwiZ2V0U2VyaWVzRGF0YUl0ZW0iLCJzdHlsZSIsImRpc2FibGVMZWdlbmQiLCJmb3JtYXQiLCJnZXRNYXhUZXh0TGlzdExlbmd0aCIsImxpc3QiLCJsZW5ndGhMaXN0IiwiYXBwbHkiLCJnZXRSYWRhckNvb3JkaW5hdGVTZXJpZXMiLCJlYWNoQW5nbGUiLCJDb29yZGluYXRlU2VyaWVzIiwiZ2V0VG9vbFRpcERhdGEiLCJzZXJpZXNEYXRhIiwiY2FsUG9pbnRzIiwiY2F0ZWdvcmllcyIsIm9wdGlvbiIsInRleHRMaXN0IiwidmFsaWRDYWxQb2ludHMiLCJvZmZzZXQiLCJyb3VuZCIsImdldE1peFRvb2xUaXBEYXRhIiwiZmlsdGVyIiwiZ2V0Q2FuZGxlVG9vbFRpcERhdGEiLCJleHRyYSIsInVwQ29sb3IiLCJ1cEZpbGwiLCJkb3duQ29sb3IiLCJkb3duRmlsbCIsInRleHQwIiwidGV4dDEiLCJ0ZXh0MiIsInRleHQzIiwidGV4dDQiLCJmaWx0ZXJTZXJpZXMiLCJ0ZW1wU2VyaWVzIiwiZmluZEN1cnJlbnRJbmRleCIsImN1cnJlbnRQb2ludHMiLCJjdXJyZW50SW5kZXgiLCJzcGFjaW5nIiwieEF4aXMiLCJib3VuZGFyeUdhcCIsImlzSW5FeGFjdENoYXJ0QXJlYSIsImZvckVhY2giLCJmaW5kTGVnZW5kSW5kZXgiLCJsZWdlbmREYXRhIiwiaXNJbkV4YWN0TGVnZW5kQXJlYSIsImZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4IiwicmFkYXJEYXRhIiwiY291bnQiLCJlYWNoQW5nbGVBcmVhIiwiaXNJbkV4YWN0UGllQ2hhcnRBcmVhIiwicmFkaXVzIiwiZml4QW5nbGUiLCJhdGFuMiIsImFuZ2xlTGlzdCIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleCIsImZ1bm5lbERhdGEiLCJmdW5uZWxBcmVhIiwiZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleCIsIndvcmREYXRhIiwiZmluZE1hcENoYXJ0Q3VycmVudEluZGV4IiwiY0RhdGEiLCJtYXBEYXRhIiwidG1wIiwicG9pbnRUb0Nvb3JkaW5hdGUiLCJib3VuZHMiLCJzY2FsZSIsInhvZmZzZXQiLCJ5b2Zmc2V0IiwicG9pIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsImlzUG9pV2l0aGluUG9seSIsImZpbmRQaWVDaGFydEN1cnJlbnRJbmRleCIsInBpZURhdGEiLCJfc3RhcnRfIiwiX3Byb3BvcnRpb25fIiwicG93Iiwic3BsaXRQb2ludHMiLCJuZXdQb2ludHMiLCJpdGVtcyIsImNhbExlZ2VuZERhdGEiLCJ3aG9sZVdpZHRoIiwid2hvbGVIZWlnaHQiLCJ3aWR0aEFyciIsImhlaWdodEFyciIsImxlZ2VuZCIsIm1hcmdpbiIsInNoYXBlV2lkdGgiLCJzaGFwZVJpZ2h0IiwibGluZUhlaWdodCIsInBvc2l0aW9uIiwibGVnZW5kTGlzdCIsIndpZHRoQ291bnQiLCJ3aWR0aENvdW50QXJyIiwiY3VycmVudFJvdyIsIml0ZW1XaWR0aCIsIml0ZW1HYXAiLCJsZWdlbmRXaWR0aCIsImZsb2F0IiwibWF4SGVpZ2h0IiwibWF4TGVuZ3RoIiwibGluZU51bSIsInRlbXAiLCJzbGljZSIsIm1heFdpZHRoIiwiY2FsQ2F0ZWdvcmllc0RhdGEiLCJyZXN1bHQiLCJjYXRlZ29yaWVzVGV4dExlbnRoIiwibWF4VGV4dExlbmd0aCIsInJvdGF0ZUxhYmVsIiwic2luIiwiZ2V0UmFkYXJEYXRhUG9pbnRzIiwicHJvY2VzcyIsInJhZGFyT3B0aW9uIiwicmFkYXIiLCJlYWNoIiwibGlzdEl0ZW0iLCJwcm9wb3J0aW9uIiwiY29zIiwiZ2V0UGllRGF0YVBvaW50cyIsIl9yYWRpdXNfIiwiZ2V0RnVubmVsRGF0YVBvaW50cyIsInNvcnQiLCJyZXZlcnNlIiwiZ2V0Um9zZURhdGFQb2ludHMiLCJtaW5SYWRpdXMiLCJkYXRhQXJyIiwicmFkaXVzTGVuZ3RoIiwiX3Jvc2VfcHJvcG9ydGlvbl8iLCJnZXRBcmNiYXJEYXRhUG9pbnRzIiwiYXJjYmFyT3B0aW9uIiwidG90YWxBbmdsZSIsImdldEdhdWdlQXhpc1BvaW50cyIsInRlbXBTdGFydEFuZ2xlIiwidmFsdWUiLCJfc3RhcnRBbmdsZV8iLCJfZW5kQW5nbGVfIiwiZ2V0R2F1Z2VEYXRhUG9pbnRzIiwiZ2F1Z2VPcHRpb24iLCJwb2ludGVyIiwiX29sZEFuZ2xlXyIsIm9sZEFuZ2xlIiwib2xkRGF0YSIsImdldFBpZVRleHRNYXhMZW5ndGgiLCJmaXhDb2x1bWVEYXRhIiwiY29sdW1uTGVuIiwiY29sdW1uIiwiZml4Q29sdW1lTWV0ZXJEYXRhIiwiYm9yZGVyIiwiZml4Q29sdW1lU3RhY2tEYXRhIiwiaW5kZXhuIiwiZ2V0WEF4aXNQb2ludHMiLCJ5QXhpc1RvdGFsV2lkdGgiLCJzcGFjaW5nVmFsaWQiLCJkYXRhQ291bnQiLCJlbmFibGVTY3JvbGwiLCJpdGVtQ291bnQiLCJzdGFydFgiLCJlbmRYIiwiZ2V0Q2FuZGxlRGF0YVBvaW50cyIsInZhbGlkSGVpZ2h0IiwiY1BvaW50cyIsImluZGV4cyIsInBvaW50IiwiZ2V0RGF0YVBvaW50cyIsImdldFN0YWNrRGF0YVBvaW50cyIsInNlcmllc0luZGV4Iiwic3RhY2tTZXJpZXMiLCJ2YWx1ZTAiLCJoZWlnaHQwIiwiaGVpZ2h0YyIsInkwIiwiZ2V0WUF4aXNUZXh0TGlzdCIsInN0YWNrIiwic29ydGVkIiwiY29uc3RydWN0b3IiLCJzdWJpdGVtIiwieUF4aXMiLCJyYW5nZVNwYW4iLCJkYXRhUmFuZ2UiLCJlYWNoUmFuZ2UiLCJjYWxZQXhpc0RhdGEiLCJjb2x1bW5zdHlsZSIsInJhbmdlcyIsInlBeGlzRm9udFNpemUiLCJyYW5nZXNGb3JtYXQiLCJOdW1iZXIiLCJkaXNhYmxlZCIsImNhbFRvb2x0aXBZQXhpc0RhdGEiLCJtYXhWYWwiLCJtaW5WYWwiLCJtaW5BeGlzIiwibWF4QXhpcyIsImNhbE1hcmtMaW5lRGF0YSIsImNvbnRleHRSb3RhdGUiLCJjb250ZXh0Iiwicm90YXRlTG9jayIsInRyYW5zbGF0ZSIsIl9yb3RhdGVfIiwiZHJhd1BvaW50U2hhcGUiLCJzaGFwZSIsImJlZ2luUGF0aCIsInNldFN0cm9rZVN0eWxlIiwic2V0TGluZVdpZHRoIiwic2V0RmlsbFN0eWxlIiwibW92ZVRvIiwibGluZVRvIiwiYXJjIiwicmVjdCIsImNsb3NlUGF0aCIsImZpbGwiLCJzdHJva2UiLCJkcmF3UmluZ1RpdGxlIiwidGl0bGVmb250U2l6ZSIsInRpdGxlIiwic3VidGl0bGVmb250U2l6ZSIsInN1YnRpdGxlIiwidGl0bGVGb250Q29sb3IiLCJzdWJ0aXRsZUZvbnRDb2xvciIsInRpdGxlSGVpZ2h0Iiwic3VidGl0bGVIZWlnaHQiLCJ0ZXh0V2lkdGgiLCJzdGFydFkiLCJzZXRGb250U2l6ZSIsImZpbGxUZXh0IiwiX3RleHRXaWR0aCIsIl9zdGFydFgiLCJfc3RhcnRZIiwiZHJhd1BvaW50VGV4dCIsInRleHRTaXplIiwidGV4dENvbG9yIiwiZm9ybWF0VmFsIiwiZHJhd0dhdWdlTGFiZWwiLCJjZW50ZXJQb3NpdGlvbiIsInNwbGl0QW5nbGUiLCJzcGxpdExpbmUiLCJzcGxpdE51bWJlciIsInRvdGFsTnVtYmVyIiwiZW5kTnVtYmVyIiwic3RhcnROdW1iZXIiLCJub3dBbmdsZSIsIm5vd051bWJlciIsInBvcyIsImxhYmVsVGV4dCIsImxhYmVsRm9ybWF0IiwibGFiZWxDb2xvciIsImRyYXdSYWRhckxhYmVsIiwicG9zUmVsYXRpdmVDYW52YXMiLCJkcmF3UGllVGV4dCIsImxpbmVSYWRpdXMiLCJ0ZXh0T2JqZWN0Q29sbGVjdGlvbiIsImxhc3RUZXh0T2JqZWN0Iiwic2VyaWVzQ29udmVydCIsIm9yZ2luWDEiLCJvcmdpblkxIiwib3JnaW5YMiIsIm9yZ2luWTIiLCJvcmdpblgzIiwib3JnaW5ZMyIsInRleHRPYmplY3QiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwibGluZVN0YXJ0UG9pc3Rpb24iLCJsaW5lRW5kUG9pc3Rpb24iLCJ0ZXh0UG9zaXRpb24iLCJjdXJ2ZVN0YXJ0WCIsInRleHRTdGFydFgiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiZHJhd1Rvb2xUaXBTcGxpdExpbmUiLCJ0b29sVGlwT3B0aW9uIiwidG9vbHRpcCIsImdyaWRUeXBlIiwiZGFzaExlbmd0aCIsImVuZFkiLCJzZXRMaW5lRGFzaCIsImdyaWRDb2xvciIsInhBeGlzTGFiZWwiLCJ0ZXh0WCIsInRleHRZIiwibGFiZWxCZ0NvbG9yIiwibGFiZWxCZ09wYWNpdHkiLCJsYWJlbEZvbnRDb2xvciIsImZvbnRDb2xvciIsImRyYXdNYXJrTGluZSIsIm1hcmtMaW5lT3B0aW9uIiwibWFya0xpbmUiLCJsaW5lQ29sb3IiLCJzaG93TGFiZWwiLCJ5QXhpc0luZGV4IiwiYmdTdGFydFgiLCJiZ0VuZFgiLCJiZ1dpZHRoIiwiZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZSIsInlBeGlzTGFiZWwiLCJkcmF3VG9vbFRpcFNwbGl0QXJlYSIsImFjdGl2ZUJnQ29sb3IiLCJhY3RpdmVCZ09wYWNpdHkiLCJkcmF3VG9vbFRpcCIsImJnQ29sb3IiLCJiZ09wYWNpdHkiLCJsZWdlbmRNYXJnaW5SaWdodCIsImFycm93V2lkdGgiLCJpc092ZXJSaWdodEJvcmRlciIsInRvb2xUaXBXaWR0aCIsInRvb2xUaXBIZWlnaHQiLCJfc2Nyb2xsRGlzdGFuY2VfIiwiZmlsbFJlY3QiLCJkcmF3WUF4aXNUaXRsZSIsInNhdmUiLCJyZXN0b3JlIiwiZHJhd0NvbHVtbkRhdGFQb2ludHMiLCJ5QXhpc0RhdGEiLCJjb2x1bW5PcHRpb24iLCJtZXRlciIsImZpbGxDb2xvciIsInBvcCIsInNoaWZ0IiwiZWFjaFNlcmllcyIsInRvb2x0aXBQb2ludHMiLCJkYXRhTGFiZWwiLCJkcmF3Q2FuZGxlRGF0YVBvaW50cyIsInNlcmllc01BIiwiY2FuZGxlT3B0aW9uIiwiYXZlcmFnZSIsImNhbmRsZSIsInVwTGluZSIsImRvd25MaW5lIiwiZGF5Iiwic3BsaXRQb2ludExpc3QiLCJjdHJsUG9pbnQiLCJiZXppZXJDdXJ2ZVRvIiwiZHJhd0FyZWFEYXRhUG9pbnRzIiwiYXJlYU9wdGlvbiIsIm9wYWNpdHkiLCJhZGRMaW5lIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImRyYXdMaW5lRGF0YVBvaW50cyIsImxpbmVPcHRpb24iLCJsaW5lIiwiZHJhd01peERhdGFQb2ludHMiLCJjb2x1bW5JbmRleCIsImNvbHVtbkxlbmd0aCIsInBvaW50c2EiLCJhZGRQb2ludCIsImRyYXdUb29sVGlwQnJpZGdlIiwiaG9yaXplbnRhbExpbmUiLCJkcmF3WEF4aXMiLCJzY3JvbGxTaG93Iiwic2Nyb2xsWSIsInNjcm9sbFNjcmVlbldpZHRoIiwic2Nyb2xsVG90YWxXaWR0aCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsTGVmdCIsInNldExpbmVDYXAiLCJzY3JvbGxCYWNrZ3JvdW5kQ29sb3IiLCJzY3JvbGxDb2xvciIsImRpc2FibGVHcmlkIiwiZ3JpZEV2YWwiLCJ2YWxpZFdpZHRoIiwibWF4WEF4aXNMaXN0TGVuZ3RoIiwibGFiZWxDb3VudCIsInJhdGlvIiwibmV3Q2F0ZWdvcmllcyIsImNnTGVuZ3RoIiwieEF4aXNGb250U2l6ZSIsIl94QXhpc1RleHRBbmdsZV8iLCJfY2FsUm90YXRlVHJhbnNsYXRlIiwiZHJhd1lBeGlzR3JpZCIsInhBeGlzZWFjaFNwYWNpbmciLCJUb3RhbFdpZHRoIiwiZHJhd1lBeGlzIiwiZmlsbEVuZFkiLCJiYWNrZ3JvdW5kIiwiZHJhd0xlZ2VuZCIsImxlZ2VuZEFyZWEiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiaXRlbUxpc3QiLCJsaXN0SW5kZXgiLCJoaWRkZW5Db2xvciIsImZvbnRUcmFucyIsImRyYXdQaWVEYXRhUG9pbnRzIiwicGllT3B0aW9uIiwiYWN0aXZlT3BhY2l0eSIsImFjdGl2ZVJhZGl1cyIsIm9mZnNldEFuZ2xlIiwibGFiZWxXaWR0aCIsInJpbmdXaWR0aCIsInBpZSIsIl9waWVUZXh0TWF4TGVuZ3RoXyIsImxpbmVKb2luIiwiaW5uZXJQaWVXaWR0aCIsInZhbGlkIiwiZHJhd1Jvc2VEYXRhUG9pbnRzIiwicm9zZU9wdGlvbiIsInJvc2UiLCJkcmF3QXJjYmFyRGF0YVBvaW50cyIsImFyY2JhciIsImRyYXdHYXVnZURhdGFQb2ludHMiLCJmaXhSYWRpdXMiLCJjaGlsZE51bWJlciIsImNoaWxkV2lkdGgiLCJnYXVnZSIsImlubmVyUmFkaXVzIiwiZWFjaENhdGVnb3JpZXMiLCJjaGlsZEFuZ2xlIiwiY2hpbGRlbmRYIiwiZHJhd1JhZGFyRGF0YVBvaW50cyIsImNvb3JkaW5hdGVBbmdsZSIsIl9sb29wIiwic3RhcnRQb3MiLCJyYWRhckRhdGFQb2ludHMiLCJub3JtYWxJbnQiLCJpdGVyIiwiYXJyIiwicmFuZG9tIiwiY29sbGlzaW9uTmV3IiwiaXNJbiIsImdldEJvdW5kaW5nQm94IiwiY29vcmRzIiwieE1pbiIsInhNYXgiLCJ5TWluIiwieU1heCIsImNvb3JkYSIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiY29vcmRpbmF0ZVRvUG9pbnQiLCJwb2ludFkiLCJwb2ludFgiLCJpc1JheUludGVyc2VjdHNTZWdtZW50Iiwic19wb2kiLCJlX3BvaSIsInhzZWciLCJwb2x5Iiwic2luc2MiLCJlcG9seSIsImRyYXdNYXBEYXRhUG9pbnRzIiwibWFwT3B0aW9uIiwiZmlsbE9wYWNpdHkiLCJhY3RpdmVCb3JkZXJDb2xvciIsImFjdGl2ZUZpbGxDb2xvciIsImFjdGl2ZUZpbGxPcGFjaXR5IiwieFNjYWxlIiwieVNjYWxlIiwiY2xlYXJSZWN0IiwiY2VudGVyUG9pbnQiLCJwcm9wZXJ0aWVzIiwiY2VudHJvaWQiLCJkcmF3IiwiZ2V0V29yZENsb3VkUG9pbnQiLCJ0SGVpZ2h0IiwidFdpZHRoIiwiYnJlYWtudW0iLCJTcGluIiwiaXNTcGluIiwiYXJlYXYiLCJkcmF3V29yZENsb3VkRGF0YVBvaW50cyIsIndvcmRPcHRpb24iLCJhdXRvQ29sb3JzIiwid29yZCIsIndvcmRDbG91ZERhdGEiLCJzdHJva2VUZXh0IiwiZHJhd0Z1bm5lbERhdGFQb2ludHMiLCJmdW5uZWxPcHRpb24iLCJhY3RpdmVXaWR0aCIsImxhYmVsQWxpZ24iLCJmdW5uZWwiLCJkcmF3RnVubmVsVGV4dCIsImRyYXdDYW52YXMiLCJUaW1pbmciLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwibGluZWFyIiwiQW5pbWF0aW9uIiwiaXNTdG9wIiwiZHVyYXRpb24iLCJ0aW1pbmciLCJkZWxheSIsImNyZWF0ZUFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsInN0ZXAiLCJ0aW1lU3RhbXAiLCJEYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJzdGFydFRpbWVTdGFtcCIsIl9zdGVwIiwidGltZXN0YW1wIiwib25Qcm9jZXNzIiwib25BbmltYXRpb25GaW5pc2giLCJ0aW1pbmdGdW5jdGlvbiIsImJpbmQiLCJzdG9wIiwiZHJhd0NoYXJ0cyIsIl90aGlzIiwiYW5pbWF0aW9uIiwiYW5pbWF0aW9uSW5zdGFuY2UiLCJfc2VyaWVzXyIsIl9jYWxMZWdlbmREYXRhIiwiX2NhbFlBeGlzRGF0YSIsIl9jYWxDYXRlZ29yaWVzRGF0YSIsImNhdGVnb3JpZXNEYXRhIiwic2Nyb2xsQWxpZ24iLCJvZmZzZXRMZWZ0IiwidG90YWxXaWR0aCIsInNjcmVlbldpZHRoIiwic2Nyb2xsT3B0aW9uIiwiY3VycmVudE9mZnNldCIsInN0YXJ0VG91Y2hYIiwibGFzdE1vdmVUaW1lIiwidXBkYXRlRGF0YSIsImV2ZW50IiwidHJpZ2dlciIsIl9kcmF3TGluZURhdGFQb2ludHMiLCJlbmFibGVNYXJrTGluZSIsIl9kcmF3TWl4RGF0YVBvaW50cyIsIl9kcmF3Q29sdW1uRGF0YVBvaW50cyIsIl9kcmF3QXJlYURhdGFQb2ludHMiLCJhcmNiYXJEYXRhIiwiZ2F1Z2VEYXRhIiwiX2RyYXdDYW5kbGVEYXRhUG9pbnRzIiwiRXZlbnQiLCJldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJwYXJhbXMiLCJjb25zb2xlIiwiZXJyb3IiLCJDaGFydHMiLCJjb25maWckJDEiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0ZW1wV2lkdGgiLCJ0ZW1wSGVpZ2h0IiwiJHRoaXMiLCJ1bmkiLCJjcmVhdGVDYW52YXNDb250ZXh0IiwiY2FudmFzSWQiLCJzY3JvbGxQb3NpdGlvbiIsIl9nZXRYQXhpc1BvaW50czAiLCJ6b29tIiwidmFsIiwibG9nIiwiY2VudGVyTGVmdCIsIk1heExlZnQiLCJzdG9wQW5pbWF0aW9uIiwiZ2V0Q3VycmVudERhdGFJbmRleCIsIl90b3VjaGVzJCIsImdldExlZ2VuZERhdGFJbmRleCIsInRvdWNoTGVnZW5kIiwic2hvd1Rvb2xUaXAiLCJfZ2V0VG9vbFRpcERhdGEiLCJfZ2V0TWl4VG9vbFRpcERhdGEiLCJzY3JvbGxTdGFydCIsInNjcm9sbCIsIm5vdyIsIkxpbWl0IiwidG91Y2hNb3ZlTGltaXQiLCJjdXJyTW92ZVRpbWUiLCJfZGlzdGFuY2UiLCJzY3JvbGxFbmQiLCJfc2Nyb2xsT3B0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJhOztBQUViLElBQUlBLE1BQU0sR0FBRztBQUNYQyxZQUFVLEVBQUUsRUFERDtBQUVYQyxZQUFVLEVBQUUsQ0FGRDtBQUdYQyxhQUFXLEVBQUUsRUFIRjtBQUlYQyxpQkFBZSxFQUFFLEVBSk47QUFLWEMsY0FBWSxFQUFFLEVBTEg7QUFNWEMsaUJBQWUsRUFBRSxFQU5OO0FBT1hDLFNBQU8sRUFBRSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsQ0FQRTtBQVFYQyxZQUFVLEVBQUUsQ0FSRDtBQVNYQyxRQUFNLEVBQUUsS0FURztBQVVYQyxlQUFhLEVBQUUsQ0FWSjtBQVdYQyxVQUFR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QUNDLE9BQVAsR0FBaUJwQyxNQUFqQjtBQUNBO0FBQ0QsQyIsImZpbGUiOiIxNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogdUNoYXJ0cyB2MS44LjUuMjAxOTA4MTVcbiAqIHVuaS1hcHDlubPlj7Dpq5jmgKfog73ot6jlhajnq6/lm77ooajvvIzmlK/mjIFINeOAgUFQUOOAgeWwj+eoi+W6j++8iOW+ruS/oS/mlK/ku5jlrp0v55m+5bqmL+WktOadoS9RUS8zNjDvvIlcbiAqIENvcHlyaWdodCAoYykgMjAxOSBRSVVO56eL5LqRIGh0dHBzOi8vd3d3LnVjaGFydHMuY24gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkICggaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wIClcbiAqIFxuICogdUNoYXJ0c+WumOaWuee9keermVxuICogaHR0cHM6Ly93d3cudUNoYXJ0cy5jblxuICogXG4gKiDlvIDmupDlnLDlnYA6XG4gKiBodHRwczovL2dpdGVlLmNvbS91Q2hhcnRzL3VDaGFydHNcbiAqIFxuICogdW5pLWFwcOaPkuS7tuW4guWcuuWcsOWdgO+8mlxuICogaHR0cDovL2V4dC5kY2xvdWQubmV0LmNuL3BsdWdpbj9pZD0yNzFcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNvbmZpZyA9IHtcbiAgeUF4aXNXaWR0aDogMTUsXG4gIHlBeGlzU3BsaXQ6IDUsXG4gIHhBeGlzSGVpZ2h0OiAxNSxcbiAgeEF4aXNMaW5lSGVpZ2h0OiAxNSxcbiAgbGVnZW5kSGVpZ2h0OiAxNSxcbiAgeUF4aXNUaXRsZVdpZHRoOiAxNSxcbiAgcGFkZGluZzogWzEwLCAxMCwgMTAsIDEwXSxcbiAgcGl4ZWxSYXRpbzogMSxcbiAgcm90YXRlOiBmYWxzZSxcbiAgY29sdW1lUGFkZGluZzogMyxcbiAgZm9udFNpemU6IDEzLFxuICAvL2RhdGFQb2ludFNoYXBlOiBbJ2RpYW1vbmQnLCAnY2lyY2xlJywgJ3RyaWFuZ2xlJywgJ3JlY3QnXSxcbiAgZGF0YVBvaW50U2hhcGU6IFsnY2lyY2xlJywgJ2NpcmNsZScsICdjaXJjbGUnLCAnY2lyY2xlJ10sXG4gIGNvbG9yczogWycjMTg5MGZmJywgJyMyZmMyNWInLCAnI2ZhY2MxNCcsICcjZjA0ODY0JywgJyM4NTQzZTAnLCAnIzkwZWQ3ZCddLFxuICBwaWVDaGFydExpbmVQYWRkaW5nOiAxNSxcbiAgcGllQ2hhcnRUZXh0UGFkZGluZzogNSxcbiAgeEF4aXNUZXh0UGFkZGluZzogMyxcbiAgdGl0bGVDb2xvcjogJyMzMzMzMzMnLFxuICB0aXRsZUZvbnRTaXplOiAyMCxcbiAgc3VidGl0bGVDb2xvcjogJyM5OTk5OTknLFxuICBzdWJ0aXRsZUZvbnRTaXplOiAxNSxcbiAgdG9vbFRpcFBhZGRpbmc6IDMsXG4gIHRvb2xUaXBCYWNrZ3JvdW5kOiAnIzAwMDAwMCcsXG4gIHRvb2xUaXBPcGFjaXR5OiAwLjcsXG4gIHRvb2xUaXBMaW5lSGVpZ2h0OiAyMCxcbiAgcmFkYXJHcmlkQ291bnQ6IDMsXG4gIHJhZGFyTGFiZWxUZXh0TWFyZ2luOiAxNSxcbiAgZ2F1Z2VMYWJlbFRleHRNYXJnaW46IDE1XG59O1xuXG5sZXQgYXNzaWduO1xuaWYgKE9iamVjdC5hc3NpZ24pIHtcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbn0gZWxzZSB7XG4gIC8vIOS9v+eUqHBvbHlmaWxsXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFyQXJncykge1xuICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgfVxuICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICBpZiAobmV4dFNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dFNvdXJjZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvO1xuICB9XG59XG5cbnZhciB1dGlsID0ge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKG51bSwgbGltaXQpIHtcbiAgICBsaW1pdCA9IGxpbWl0IHx8IDI7XG4gICAgaWYgKHRoaXMuaXNGbG9hdChudW0pKSB7XG4gICAgICBudW0gPSBudW0udG9GaXhlZChsaW1pdCk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH0sXG4gIGlzRmxvYXQ6IGZ1bmN0aW9uIGlzRmxvYXQobnVtKSB7XG4gICAgcmV0dXJuIG51bSAlIDEgIT09IDA7XG4gIH0sXG4gIGFwcHJveGltYXRlbHlFcXVhbDogZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKG51bTEsIG51bTIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMobnVtMSAtIG51bTIpIDwgMWUtMTA7XG4gIH0sXG4gIGlzU2FtZVNpZ246IGZ1bmN0aW9uIGlzU2FtZVNpZ24obnVtMSwgbnVtMikge1xuICAgIHJldHVybiBNYXRoLmFicyhudW0xKSA9PT0gbnVtMSAmJiBNYXRoLmFicyhudW0yKSA9PT0gbnVtMiB8fCBNYXRoLmFicyhudW0xKSAhPT0gbnVtMSAmJiBNYXRoLmFicyhudW0yKSAhPT0gbnVtMjtcbiAgfSxcbiAgaXNTYW1lWENvb3JkaW5hdGVBcmVhOiBmdW5jdGlvbiBpc1NhbWVYQ29vcmRpbmF0ZUFyZWEocDEsIHAyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lU2lnbihwMS54LCBwMi54KTtcbiAgfSxcbiAgaXNDb2xsaXNpb246IGZ1bmN0aW9uIGlzQ29sbGlzaW9uKG9iajEsIG9iajIpIHtcbiAgICBvYmoxLmVuZCA9IHt9O1xuICAgIG9iajEuZW5kLnggPSBvYmoxLnN0YXJ0LnggKyBvYmoxLndpZHRoO1xuICAgIG9iajEuZW5kLnkgPSBvYmoxLnN0YXJ0LnkgLSBvYmoxLmhlaWdodDtcbiAgICBvYmoyLmVuZCA9IHt9O1xuICAgIG9iajIuZW5kLnggPSBvYmoyLnN0YXJ0LnggKyBvYmoyLndpZHRoO1xuICAgIG9iajIuZW5kLnkgPSBvYmoyLnN0YXJ0LnkgLSBvYmoyLmhlaWdodDtcbiAgICB2YXIgZmxhZyA9IG9iajIuc3RhcnQueCA+IG9iajEuZW5kLnggfHwgb2JqMi5lbmQueCA8IG9iajEuc3RhcnQueCB8fCBvYmoyLmVuZC55ID4gb2JqMS5zdGFydC55IHx8IG9iajIuc3RhcnQueSA8IG9iajEuZW5kLnk7XG4gICAgcmV0dXJuICFmbGFnO1xuICB9XG59O1xuXG4vL+WFvOWuuUg154K55Ye75LqL5Lu2XG5mdW5jdGlvbiBnZXRINU9mZnNldChlKSB7XG4gIGUubXAgPSB7XG4gICAgY2hhbmdlZFRvdWNoZXM6IFtdXG4gIH07XG4gIGUubXAuY2hhbmdlZFRvdWNoZXMucHVzaCh7XG4gICAgeDogZS5vZmZzZXRYLFxuICAgIHk6IGUub2Zmc2V0WVxuICB9KTtcbiAgcmV0dXJuIGU7XG59XG5cbi8vIGhleCDovawgcmdiYVxuZnVuY3Rpb24gaGV4VG9SZ2IoaGV4VmFsdWUsIG9wYykge1xuICB2YXIgcmd4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcbiAgdmFyIGhleCA9IGhleFZhbHVlLnJlcGxhY2Uocmd4LCBmdW5jdGlvbihtLCByLCBnLCBiKSB7XG4gICAgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjtcbiAgfSk7XG4gIHZhciByZ2IgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgdmFyIHIgPSBwYXJzZUludChyZ2JbMV0sIDE2KTtcbiAgdmFyIGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcbiAgdmFyIGIgPSBwYXJzZUludChyZ2JbM10sIDE2KTtcbiAgcmV0dXJuICdyZ2JhKCcgKyByICsgJywnICsgZyArICcsJyArIGIgKyAnLCcgKyBvcGMgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIGZpbmRSYW5nZShudW0sIHR5cGUsIGxpbWl0KSB7XG4gIGlmIChpc05hTihudW0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbdUNoYXJ0c10gdW52YWxpZCBzZXJpZXMgZGF0YSEnKTtcbiAgfVxuICBsaW1pdCA9IGxpbWl0IHx8IDEwO1xuICB0eXBlID0gdHlwZSA/IHR5cGUgOiAndXBwZXInO1xuICB2YXIgbXVsdGlwbGUgPSAxO1xuICB3aGlsZSAobGltaXQgPCAxKSB7XG4gICAgbGltaXQgKj0gMTA7XG4gICAgbXVsdGlwbGUgKj0gMTA7XG4gIH1cbiAgaWYgKHR5cGUgPT09ICd1cHBlcicpIHtcbiAgICBudW0gPSBNYXRoLmNlaWwobnVtICogbXVsdGlwbGUpO1xuICB9IGVsc2Uge1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtICogbXVsdGlwbGUpO1xuICB9XG4gIHdoaWxlIChudW0gJSBsaW1pdCAhPT0gMCkge1xuICAgIGlmICh0eXBlID09PSAndXBwZXInKSB7XG4gICAgICBudW0rKztcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtLS07XG4gICAgfVxuICB9XG4gIHJldHVybiBudW0gLyBtdWx0aXBsZTtcbn1cblxuZnVuY3Rpb24gY2FsQ2FuZGxlTUEoZGF5QXJyLCBuYW1lQXJyLCBjb2xvckFyciwga2RhdGEpIHtcbiAgbGV0IHNlcmllc1RlbXAgPSBbXTtcbiAgZm9yIChsZXQgayA9IDA7IGsgPCBkYXlBcnIubGVuZ3RoOyBrKyspIHtcbiAgICBsZXQgc2VyaWVzSXRlbSA9IHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgbmFtZTogbmFtZUFycltrXSxcbiAgICAgIGNvbG9yOiBjb2xvckFycltrXVxuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaSA8IGRheUFycltrXSkge1xuICAgICAgICBzZXJpZXNJdGVtLmRhdGEucHVzaChudWxsKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgc3VtID0gMDtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF5QXJyW2tdOyBqKyspIHtcbiAgICAgICAgc3VtICs9IGtkYXRhW2kgLSBqXVsxXTtcbiAgICAgIH1cbiAgICAgIHNlcmllc0l0ZW0uZGF0YS5wdXNoKCsoc3VtIC8gZGF5QXJyW2tdKS50b0ZpeGVkKDMpKTtcbiAgICB9XG4gICAgc2VyaWVzVGVtcC5wdXNoKHNlcmllc0l0ZW0pO1xuICB9XG4gIHJldHVybiBzZXJpZXNUZW1wO1xufVxuXG5mdW5jdGlvbiBjYWxWYWxpZERpc3RhbmNlKGRpc3RhbmNlLCBjaGFydERhdGEsIGNvbmZpZywgb3B0cykge1xuICB2YXIgZGF0YUNoYXJ0QXJlYVdpZHRoID0gb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXTtcbiAgdmFyIGRhdGFDaGFydFdpZHRoID0gY2hhcnREYXRhLmVhY2hTcGFjaW5nICogKG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YS54QXhpc1BvaW50cy5sZW5ndGgtMSk7XG4gIHZhciB2YWxpZERpc3RhbmNlID0gZGlzdGFuY2U7XG4gIGlmIChkaXN0YW5jZSA+PSAwKSB7XG4gICAgdmFsaWREaXN0YW5jZSA9IDA7XG4gIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID49IGRhdGFDaGFydFdpZHRoIC0gZGF0YUNoYXJ0QXJlYVdpZHRoKSB7XG4gICAgdmFsaWREaXN0YW5jZSA9IGRhdGFDaGFydEFyZWFXaWR0aCAtIGRhdGFDaGFydFdpZHRoO1xuICB9XG4gIHJldHVybiB2YWxpZERpc3RhbmNlO1xufVxuXG5mdW5jdGlvbiBpc0luQW5nbGVSYW5nZShhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcbiAgZnVuY3Rpb24gYWRqdXN0KGFuZ2xlKSB7XG4gICAgd2hpbGUgKGFuZ2xlIDwgMCkge1xuICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XG4gICAgfVxuICAgIHdoaWxlIChhbmdsZSA+IDIgKiBNYXRoLlBJKSB7XG4gICAgICBhbmdsZSAtPSAyICogTWF0aC5QSTtcbiAgICB9XG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9XG4gIGFuZ2xlID0gYWRqdXN0KGFuZ2xlKTtcbiAgc3RhcnRBbmdsZSA9IGFkanVzdChzdGFydEFuZ2xlKTtcbiAgZW5kQW5nbGUgPSBhZGp1c3QoZW5kQW5nbGUpO1xuICBpZiAoc3RhcnRBbmdsZSA+IGVuZEFuZ2xlKSB7XG4gICAgZW5kQW5nbGUgKz0gMiAqIE1hdGguUEk7XG4gICAgaWYgKGFuZ2xlIDwgc3RhcnRBbmdsZSkge1xuICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhbmdsZSA+PSBzdGFydEFuZ2xlICYmIGFuZ2xlIDw9IGVuZEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBjYWxSb3RhdGVUcmFuc2xhdGUoeCwgeSwgaCkge1xuICB2YXIgeHYgPSB4O1xuICB2YXIgeXYgPSBoIC0geTtcbiAgdmFyIHRyYW5zWCA9IHh2ICsgKGggLSB5diAtIHh2KSAvIE1hdGguc3FydCgyKTtcbiAgdHJhbnNYICo9IC0xO1xuICB2YXIgdHJhbnNZID0gKGggLSB5dikgKiAoTWF0aC5zcXJ0KDIpIC0gMSkgLSAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xuICByZXR1cm4ge1xuICAgIHRyYW5zWDogdHJhbnNYLFxuICAgIHRyYW5zWTogdHJhbnNZXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGkpIHtcblxuICBmdW5jdGlvbiBpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSkge1xuICAgIGlmIChwb2ludHNbaSAtIDFdICYmIHBvaW50c1tpICsgMV0pIHtcbiAgICAgIHJldHVybiBwb2ludHNbaV0ueSA+PSBNYXRoLm1heChwb2ludHNbaSAtIDFdLnksIHBvaW50c1tpICsgMV0ueSkgfHwgcG9pbnRzW2ldLnkgPD0gTWF0aC5taW4ocG9pbnRzW2kgLSAxXS55LFxuICAgICAgICBwb2ludHNbXG4gICAgICAgICAgaSArIDFdLnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHZhciBhID0gMC4yO1xuICB2YXIgYiA9IDAuMjtcbiAgdmFyIHBBeCA9IG51bGw7XG4gIHZhciBwQXkgPSBudWxsO1xuICB2YXIgcEJ4ID0gbnVsbDtcbiAgdmFyIHBCeSA9IG51bGw7XG4gIGlmIChpIDwgMSkge1xuICAgIHBBeCA9IHBvaW50c1swXS54ICsgKHBvaW50c1sxXS54IC0gcG9pbnRzWzBdLngpICogYTtcbiAgICBwQXkgPSBwb2ludHNbMF0ueSArIChwb2ludHNbMV0ueSAtIHBvaW50c1swXS55KSAqIGE7XG4gIH0gZWxzZSB7XG4gICAgcEF4ID0gcG9pbnRzW2ldLnggKyAocG9pbnRzW2kgKyAxXS54IC0gcG9pbnRzW2kgLSAxXS54KSAqIGE7XG4gICAgcEF5ID0gcG9pbnRzW2ldLnkgKyAocG9pbnRzW2kgKyAxXS55IC0gcG9pbnRzW2kgLSAxXS55KSAqIGE7XG4gIH1cblxuICBpZiAoaSA+IHBvaW50cy5sZW5ndGggLSAzKSB7XG4gICAgdmFyIGxhc3QgPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICBwQnggPSBwb2ludHNbbGFzdF0ueCAtIChwb2ludHNbbGFzdF0ueCAtIHBvaW50c1tsYXN0IC0gMV0ueCkgKiBiO1xuICAgIHBCeSA9IHBvaW50c1tsYXN0XS55IC0gKHBvaW50c1tsYXN0XS55IC0gcG9pbnRzW2xhc3QgLSAxXS55KSAqIGI7XG4gIH0gZWxzZSB7XG4gICAgcEJ4ID0gcG9pbnRzW2kgKyAxXS54IC0gKHBvaW50c1tpICsgMl0ueCAtIHBvaW50c1tpXS54KSAqIGI7XG4gICAgcEJ5ID0gcG9pbnRzW2kgKyAxXS55IC0gKHBvaW50c1tpICsgMl0ueSAtIHBvaW50c1tpXS55KSAqIGI7XG4gIH1cbiAgaWYgKGlzTm90TWlkZGxlUG9pbnQocG9pbnRzLCBpICsgMSkpIHtcbiAgICBwQnkgPSBwb2ludHNbaSArIDFdLnk7XG4gIH1cbiAgaWYgKGlzTm90TWlkZGxlUG9pbnQocG9pbnRzLCBpKSkge1xuICAgIHBBeSA9IHBvaW50c1tpXS55O1xuICB9XG4gIHJldHVybiB7XG4gICAgY3RyQToge1xuICAgICAgeDogcEF4LFxuICAgICAgeTogcEF5XG4gICAgfSxcbiAgICBjdHJCOiB7XG4gICAgICB4OiBwQngsXG4gICAgICB5OiBwQnlcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHgsIHksIGNlbnRlcikge1xuICByZXR1cm4ge1xuICAgIHg6IGNlbnRlci54ICsgeCxcbiAgICB5OiBjZW50ZXIueSAtIHlcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXZvaWRDb2xsaXNpb24ob2JqLCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCkge1xuICAgIC8vIGlzIGNvbGxpc2lvbiB0ZXN0XG4gICAgd2hpbGUgKHV0aWwuaXNDb2xsaXNpb24ob2JqLCB0YXJnZXQpKSB7XG4gICAgICBpZiAob2JqLnN0YXJ0LnggPiAwKSB7XG4gICAgICAgIG9iai5zdGFydC55LS07XG4gICAgICB9IGVsc2UgaWYgKG9iai5zdGFydC54IDwgMCkge1xuICAgICAgICBvYmouc3RhcnQueSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9iai5zdGFydC55ID4gMCkge1xuICAgICAgICAgIG9iai5zdGFydC55Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqLnN0YXJ0LnktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBmaWxsU2VyaWVzKHNlcmllcywgb3B0cywgY29uZmlnKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHJldHVybiBzZXJpZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0uY29sb3IpIHtcbiAgICAgIGl0ZW0uY29sb3IgPSBjb25maWcuY29sb3JzW2luZGV4XTtcbiAgICAgIGluZGV4ID0gKGluZGV4ICsgMSkgJSBjb25maWcuY29sb3JzLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKCFpdGVtLnR5cGUpIHtcbiAgICAgIGl0ZW0udHlwZSA9IG9wdHMudHlwZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpdGVtLnNob3cgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaXRlbS5zaG93ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFpdGVtLnR5cGUpIHtcbiAgICAgIGl0ZW0udHlwZSA9IG9wdHMudHlwZTtcbiAgICB9XG4gICAgaWYgKCFpdGVtLnBvaW50U2hhcGUpIHtcbiAgICAgIGl0ZW0ucG9pbnRTaGFwZSA9IFwiY2lyY2xlXCI7XG4gICAgfVxuICAgIGlmICghaXRlbS5sZWdlbmRTaGFwZSkge1xuICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgaXRlbS5sZWdlbmRTaGFwZSA9IFwibGluZVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb2x1bW4nOlxuICAgICAgICAgIGl0ZW0ubGVnZW5kU2hhcGUgPSBcInJlY3RcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYXJlYSc6XG4gICAgICAgICAgaXRlbS5sZWdlbmRTaGFwZSA9IFwidHJpYW5nbGVcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpdGVtLmxlZ2VuZFNoYXBlID0gXCJjaXJjbGVcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhUmFuZ2UobWluRGF0YSwgbWF4RGF0YSkge1xuICB2YXIgbGltaXQgPSAwO1xuICB2YXIgcmFuZ2UgPSBtYXhEYXRhIC0gbWluRGF0YTtcbiAgaWYgKHJhbmdlID49IDEwMDAwKSB7XG4gICAgbGltaXQgPSAxMDAwO1xuICB9IGVsc2UgaWYgKHJhbmdlID49IDEwMDApIHtcbiAgICBsaW1pdCA9IDEwMDtcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAxMDApIHtcbiAgICBsaW1pdCA9IDEwO1xuICB9IGVsc2UgaWYgKHJhbmdlID49IDEwKSB7XG4gICAgbGltaXQgPSA1O1xuICB9IGVsc2UgaWYgKHJhbmdlID49IDEpIHtcbiAgICBsaW1pdCA9IDE7XG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4xKSB7XG4gICAgbGltaXQgPSAwLjE7XG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMSkge1xuICAgIGxpbWl0ID0gMC4wMTtcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAwLjAwMSkge1xuICAgIGxpbWl0ID0gMC4wMDE7XG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMDAxKSB7XG4gICAgbGltaXQgPSAwLjAwMDE7XG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMDAwMSkge1xuICAgIGxpbWl0ID0gMC4wMDAwMTtcbiAgfSBlbHNlIHtcbiAgICBsaW1pdCA9IDAuMDAwMDAxO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWluUmFuZ2U6IGZpbmRSYW5nZShtaW5EYXRhLCAnbG93ZXInLCBsaW1pdCksXG4gICAgbWF4UmFuZ2U6IGZpbmRSYW5nZShtYXhEYXRhLCAndXBwZXInLCBsaW1pdClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVhc3VyZVRleHQodGV4dCkge1xuICB2YXIgZm9udFNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNvbmZpZy5mb250U2l6ZTtcbiAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcbiAgdmFyIHRleHQgPSB0ZXh0LnNwbGl0KCcnKTtcbiAgdmFyIHdpZHRoID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSB0ZXh0W2ldO1xuICAgIGlmICgvW2EtekEtWl0vLnRlc3QoaXRlbSkpIHtcbiAgICAgIHdpZHRoICs9IDc7XG4gICAgfSBlbHNlIGlmICgvWzAtOV0vLnRlc3QoaXRlbSkpIHtcbiAgICAgIHdpZHRoICs9IDUuNTtcbiAgICB9IGVsc2UgaWYgKC9cXC4vLnRlc3QoaXRlbSkpIHtcbiAgICAgIHdpZHRoICs9IDIuNztcbiAgICB9IGVsc2UgaWYgKC8tLy50ZXN0KGl0ZW0pKSB7XG4gICAgICB3aWR0aCArPSAzLjI1O1xuICAgIH0gZWxzZSBpZiAoL1tcXHU0ZTAwLVxcdTlmYTVdLy50ZXN0KGl0ZW0pKSB7XG4gICAgICB3aWR0aCArPSAxMDtcbiAgICB9IGVsc2UgaWYgKC9cXCh8XFwpLy50ZXN0KGl0ZW0pKSB7XG4gICAgICB3aWR0aCArPSAzLjczO1xuICAgIH0gZWxzZSBpZiAoL1xccy8udGVzdChpdGVtKSkge1xuICAgICAgd2lkdGggKz0gMi41O1xuICAgIH0gZWxzZSBpZiAoLyUvLnRlc3QoaXRlbSkpIHtcbiAgICAgIHdpZHRoICs9IDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoICs9IDEwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gd2lkdGggKiBmb250U2l6ZSAvIDEwO1xufVxuXG5mdW5jdGlvbiBkYXRhQ29tYmluZShzZXJpZXMpIHtcbiAgcmV0dXJuIHNlcmllcy5yZWR1Y2UoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiAoYS5kYXRhID8gYS5kYXRhIDogYSkuY29uY2F0KGIuZGF0YSk7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gZGF0YUNvbWJpbmVTdGFjayhzZXJpZXMsIGxlbikge1xuICB2YXIgc3VtID0gbmV3IEFycmF5KGxlbik7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgc3VtLmxlbmd0aDsgaisrKSB7XG4gICAgc3VtW2pdID0gMDtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3VtLmxlbmd0aDsgaisrKSB7XG4gICAgICBzdW1bal0gKz0gc2VyaWVzW2ldLmRhdGFbal07XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpZXMucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gKGEuZGF0YSA/IGEuZGF0YSA6IGEpLmNvbmNhdChiLmRhdGEpLmNvbmNhdChzdW0pO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoZXModG91Y2hlcywgb3B0cywgZSkge1xuICBsZXQgeCwgeTtcbiAgaWYgKHRvdWNoZXMuY2xpZW50WCkge1xuICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgeSA9IG9wdHMuaGVpZ2h0IC0gdG91Y2hlcy5jbGllbnRYICogb3B0cy5waXhlbFJhdGlvO1xuICAgICAgeCA9ICh0b3VjaGVzLnBhZ2VZIC0gZS5jdXJyZW50VGFyZ2V0Lm9mZnNldFRvcCAtIChvcHRzLmhlaWdodCAvIG9wdHMucGl4ZWxSYXRpbyAvIDIpICogKG9wdHMucGl4ZWxSYXRpbyAtIDEpKSAqXG4gICAgICAgIG9wdHMucGl4ZWxSYXRpbztcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHRvdWNoZXMuY2xpZW50WCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgICAgIHkgPSAodG91Y2hlcy5wYWdlWSAtIGUuY3VycmVudFRhcmdldC5vZmZzZXRUb3AgLSAob3B0cy5oZWlnaHQgLyBvcHRzLnBpeGVsUmF0aW8gLyAyKSAqIChvcHRzLnBpeGVsUmF0aW8gLSAxKSkgKlxuICAgICAgICBvcHRzLnBpeGVsUmF0aW87XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgeSA9IG9wdHMuaGVpZ2h0IC0gdG91Y2hlcy54ICogb3B0cy5waXhlbFJhdGlvO1xuICAgICAgeCA9IHRvdWNoZXMueSAqIG9wdHMucGl4ZWxSYXRpbztcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHRvdWNoZXMueCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgICAgIHkgPSB0b3VjaGVzLnkgKiBvcHRzLnBpeGVsUmF0aW87XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVzRGF0YUl0ZW0oc2VyaWVzLCBpbmRleCkge1xuICB2YXIgZGF0YSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGlmIChpdGVtLmRhdGFbaW5kZXhdICE9PSBudWxsICYmIHR5cGVvZiBpdGVtLmRhdGFbaW5kZXhdICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtLnNob3cpIHtcbiAgICAgIGxldCBzZXJpZXNJdGVtID0ge307XG4gICAgICBzZXJpZXNJdGVtLmNvbG9yID0gaXRlbS5jb2xvcjtcbiAgICAgIHNlcmllc0l0ZW0udHlwZSA9IGl0ZW0udHlwZTtcbiAgICAgIHNlcmllc0l0ZW0uc3R5bGUgPSBpdGVtLnN0eWxlO1xuICAgICAgc2VyaWVzSXRlbS5wb2ludFNoYXBlID0gaXRlbS5wb2ludFNoYXBlO1xuICAgICAgc2VyaWVzSXRlbS5kaXNhYmxlTGVnZW5kID0gaXRlbS5kaXNhYmxlTGVnZW5kO1xuICAgICAgc2VyaWVzSXRlbS5uYW1lID0gaXRlbS5uYW1lO1xuICAgICAgc2VyaWVzSXRlbS5zaG93ID0gaXRlbS5zaG93O1xuICAgICAgc2VyaWVzSXRlbS5kYXRhID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdChpdGVtLmRhdGFbaW5kZXhdKSA6IGl0ZW0uZGF0YVtpbmRleF07XG4gICAgICBkYXRhLnB1c2goc2VyaWVzSXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRNYXhUZXh0TGlzdExlbmd0aChsaXN0KSB7XG4gIHZhciBsZW5ndGhMaXN0ID0gbGlzdC5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtKTtcbiAgfSk7XG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBsZW5ndGhMaXN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzKGxlbmd0aCkge1xuICB2YXIgZWFjaEFuZ2xlID0gMiAqIE1hdGguUEkgLyBsZW5ndGg7XG4gIHZhciBDb29yZGluYXRlU2VyaWVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBDb29yZGluYXRlU2VyaWVzLnB1c2goZWFjaEFuZ2xlICogaSk7XG4gIH1cblxuICByZXR1cm4gQ29vcmRpbmF0ZVNlcmllcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAtMSAqIGl0ZW0gKyBNYXRoLlBJIC8gMjtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRvb2xUaXBEYXRhKHNlcmllc0RhdGEsIGNhbFBvaW50cywgaW5kZXgsIGNhdGVnb3JpZXMpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgdmFyIHRleHRMaXN0ID0gc2VyaWVzRGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChpdGVtLCBjYXRlZ29yaWVzW2luZGV4XSkgOiBpdGVtLm5hbWUgKyAnOiAnICsgaXRlbS5kYXRhLFxuICAgICAgY29sb3I6IGl0ZW0uY29sb3JcbiAgICB9O1xuICB9KTtcbiAgdmFyIHZhbGlkQ2FsUG9pbnRzID0gW107XG4gIHZhciBvZmZzZXQgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBvaW50cyA9IGNhbFBvaW50c1tpXTtcbiAgICBpZiAodHlwZW9mIHBvaW50c1tpbmRleF0gIT09ICd1bmRlZmluZWQnICYmIHBvaW50c1tpbmRleF0gIT09IG51bGwpIHtcbiAgICAgIHZhbGlkQ2FsUG9pbnRzLnB1c2gocG9pbnRzW2luZGV4XSk7XG4gICAgfVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRDYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXRlbSA9IHZhbGlkQ2FsUG9pbnRzW2ldO1xuICAgIG9mZnNldC54ID0gTWF0aC5yb3VuZChpdGVtLngpO1xuICAgIG9mZnNldC55ICs9IGl0ZW0ueTtcbiAgfVxuICBvZmZzZXQueSAvPSB2YWxpZENhbFBvaW50cy5sZW5ndGg7XG4gIHJldHVybiB7XG4gICAgdGV4dExpc3Q6IHRleHRMaXN0LFxuICAgIG9mZnNldDogb2Zmc2V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldE1peFRvb2xUaXBEYXRhKHNlcmllc0RhdGEsIGNhbFBvaW50cywgaW5kZXgsIGNhdGVnb3JpZXMpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG4gIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoaXRlbSwgY2F0ZWdvcmllc1tpbmRleF0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcbiAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxuICAgICAgZGlzYWJsZUxlZ2VuZDogaXRlbS5kaXNhYmxlTGVnZW5kID8gdHJ1ZSA6IGZhbHNlXG4gICAgfTtcbiAgfSk7XG4gIHRleHRMaXN0ID0gdGV4dExpc3QuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5kaXNhYmxlTGVnZW5kICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdmFsaWRDYWxQb2ludHMgPSBbXTtcbiAgdmFyIG9mZnNldCA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcG9pbnRzID0gY2FsUG9pbnRzW2ldO1xuICAgIGlmICh0eXBlb2YgcG9pbnRzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgcG9pbnRzW2luZGV4XSAhPT0gbnVsbCkge1xuICAgICAgdmFsaWRDYWxQb2ludHMucHVzaChwb2ludHNbaW5kZXhdKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZENhbFBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gdmFsaWRDYWxQb2ludHNbaV07XG4gICAgb2Zmc2V0LnggPSBNYXRoLnJvdW5kKGl0ZW0ueCk7XG4gICAgb2Zmc2V0LnkgKz0gaXRlbS55O1xuICB9XG4gIG9mZnNldC55IC89IHZhbGlkQ2FsUG9pbnRzLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0TGlzdDogdGV4dExpc3QsXG4gICAgb2Zmc2V0OiBvZmZzZXRcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FuZGxlVG9vbFRpcERhdGEoc2VyaWVzLCBzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzLCBleHRyYSkge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB7fTtcbiAgbGV0IHVwQ29sb3IgPSBleHRyYS5jb2xvci51cEZpbGw7XG4gIGxldCBkb3duQ29sb3IgPSBleHRyYS5jb2xvci5kb3duRmlsbDtcbiAgLy/popzoibLpobrluo/kuLrlvIDnm5jvvIzmlLbnm5jvvIzmnIDkvY7vvIzmnIDpq5hcbiAgbGV0IGNvbG9yID0gW3VwQ29sb3IsIHVwQ29sb3IsIGRvd25Db2xvciwgdXBDb2xvcl07XG4gIHZhciB0ZXh0TGlzdCA9IFtdO1xuICBsZXQgdGV4dDAgPSB7XG4gICAgdGV4dDogY2F0ZWdvcmllc1tpbmRleF0sXG4gICAgY29sb3I6IG51bGxcbiAgfTtcbiAgdGV4dExpc3QucHVzaCh0ZXh0MCk7XG4gIHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaW5kZXggPT0gMCAmJiBpdGVtLmRhdGFbMV0gLSBpdGVtLmRhdGFbMF0gPCAwKSB7XG4gICAgICBjb2xvclsxXSA9IGRvd25Db2xvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGl0ZW0uZGF0YVswXSA8IHNlcmllc1tpbmRleCAtIDFdWzFdKSB7XG4gICAgICAgIGNvbG9yWzBdID0gZG93bkNvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uZGF0YVsxXSA8IGl0ZW0uZGF0YVswXSkge1xuICAgICAgICBjb2xvclsxXSA9IGRvd25Db2xvcjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmRhdGFbMl0gPiBzZXJpZXNbaW5kZXggLSAxXVsxXSkge1xuICAgICAgICBjb2xvclsyXSA9IHVwQ29sb3I7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbS5kYXRhWzNdIDwgc2VyaWVzW2luZGV4IC0gMV1bMV0pIHtcbiAgICAgICAgY29sb3JbM10gPSBkb3duQ29sb3I7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCB0ZXh0MSA9IHtcbiAgICAgIHRleHQ6ICflvIDnm5jvvJonICsgaXRlbS5kYXRhWzBdLFxuICAgICAgY29sb3I6IGNvbG9yWzBdXG4gICAgfTtcbiAgICBsZXQgdGV4dDIgPSB7XG4gICAgICB0ZXh0OiAn5pS255uY77yaJyArIGl0ZW0uZGF0YVsxXSxcbiAgICAgIGNvbG9yOiBjb2xvclsxXVxuICAgIH07XG4gICAgbGV0IHRleHQzID0ge1xuICAgICAgdGV4dDogJ+acgOS9ju+8micgKyBpdGVtLmRhdGFbMl0sXG4gICAgICBjb2xvcjogY29sb3JbMl1cbiAgICB9O1xuICAgIGxldCB0ZXh0NCA9IHtcbiAgICAgIHRleHQ6ICfmnIDpq5jvvJonICsgaXRlbS5kYXRhWzNdLFxuICAgICAgY29sb3I6IGNvbG9yWzNdXG4gICAgfTtcbiAgICB0ZXh0TGlzdC5wdXNoKHRleHQxLCB0ZXh0MiwgdGV4dDMsIHRleHQ0KTtcbiAgfSk7XG4gIHZhciB2YWxpZENhbFBvaW50cyA9IFtdO1xuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbFBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwb2ludHMgPSBjYWxQb2ludHNbaV07XG4gICAgaWYgKHR5cGVvZiBwb2ludHNbaW5kZXhdICE9PSAndW5kZWZpbmVkJyAmJiBwb2ludHNbaW5kZXhdICE9PSBudWxsKSB7XG4gICAgICB2YWxpZENhbFBvaW50cy5wdXNoKHBvaW50c1tpbmRleF0pO1xuICAgIH1cbiAgfVxuICBvZmZzZXQueCA9IE1hdGgucm91bmQodmFsaWRDYWxQb2ludHNbMF1bMF0ueCk7XG4gIHJldHVybiB7XG4gICAgdGV4dExpc3Q6IHRleHRMaXN0LFxuICAgIG9mZnNldDogb2Zmc2V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlclNlcmllcyhzZXJpZXMpIHtcbiAgbGV0IHRlbXBTZXJpZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc2VyaWVzW2ldLnNob3cgPT0gdHJ1ZSkge1xuICAgICAgdGVtcFNlcmllcy5wdXNoKHNlcmllc1tpXSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRlbXBTZXJpZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgeEF4aXNQb2ludHMsIG9wdHMsIGNvbmZpZykge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XG4gIHZhciBzcGFjaW5nID0gMDtcbiAgaWYoKG9wdHMudHlwZT09J2xpbmUnIHx8IG9wdHMudHlwZT09J2FyZWEnKSAmJiBvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwPT0nanVzdGlmeScpe1xuICAgIHNwYWNpbmcgPSBvcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZy8yO1xuICB9XG4gIGlmIChpc0luRXhhY3RDaGFydEFyZWEoY3VycmVudFBvaW50cywgb3B0cywgY29uZmlnKSkge1xuICAgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgIGlmIChjdXJyZW50UG9pbnRzLnggKyBvZmZzZXQgKyBzcGFjaW5nID4gaXRlbSkge1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY3VycmVudEluZGV4O1xufVxuXG5mdW5jdGlvbiBmaW5kTGVnZW5kSW5kZXgoY3VycmVudFBvaW50cywgbGVnZW5kRGF0YSwgb3B0cykge1xuICBsZXQgY3VycmVudEluZGV4ID0gLTE7XG4gIGlmIChpc0luRXhhY3RMZWdlbmRBcmVhKGN1cnJlbnRQb2ludHMsIGxlZ2VuZERhdGEuYXJlYSkpIHtcbiAgICBsZXQgcG9pbnRzID0gbGVnZW5kRGF0YS5wb2ludHM7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGV0IGl0ZW0gPSBwb2ludHNbaV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGl0ZW0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgbGV0IGFyZWEgPSBpdGVtW2pdWydhcmVhJ107XG4gICAgICAgIGlmIChjdXJyZW50UG9pbnRzLnggPiBhcmVhWzBdICYmIGN1cnJlbnRQb2ludHMueCA8IGFyZWFbMl0gJiYgY3VycmVudFBvaW50cy55ID4gYXJlYVsxXSAmJiBjdXJyZW50UG9pbnRzLnkgPCBhcmVhWzNdKSB7XG4gICAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRJbmRleDtcbiAgfVxuICByZXR1cm4gY3VycmVudEluZGV4O1xufVxuXG5mdW5jdGlvbiBpc0luRXhhY3RMZWdlbmRBcmVhKGN1cnJlbnRQb2ludHMsIGFyZWEpIHtcbiAgcmV0dXJuIGN1cnJlbnRQb2ludHMueCA+IGFyZWEuc3RhcnQueCAmJiBjdXJyZW50UG9pbnRzLnggPCBhcmVhLmVuZC54ICYmIGN1cnJlbnRQb2ludHMueSA+IGFyZWEuc3RhcnQueSAmJlxuICAgIGN1cnJlbnRQb2ludHMueSA8IGFyZWEuZW5kLnk7XG59XG5cbmZ1bmN0aW9uIGlzSW5FeGFjdENoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCBvcHRzLCBjb25maWcpIHtcbiAgcmV0dXJuIGN1cnJlbnRQb2ludHMueCA8IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gKyAxMCAmJiBjdXJyZW50UG9pbnRzLnggPiBvcHRzLmFyZWFbM10gLTEwICYmIGN1cnJlbnRQb2ludHMueSA+IG9wdHMuYXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnkgPCBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcbn1cblxuZnVuY3Rpb24gZmluZFJhZGFyQ2hhcnRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgcmFkYXJEYXRhLCBjb3VudCkge1xuICB2YXIgZWFjaEFuZ2xlQXJlYSA9IDIgKiBNYXRoLlBJIC8gY291bnQ7XG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcbiAgaWYgKGlzSW5FeGFjdFBpZUNoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCByYWRhckRhdGEuY2VudGVyLCByYWRhckRhdGEucmFkaXVzKSkge1xuICAgIHZhciBmaXhBbmdsZSA9IGZ1bmN0aW9uIGZpeEFuZ2xlKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIGFuZ2xlICs9IDIgKiBNYXRoLlBJO1xuICAgICAgfVxuICAgICAgaWYgKGFuZ2xlID4gMiAqIE1hdGguUEkpIHtcbiAgICAgICAgYW5nbGUgLT0gMiAqIE1hdGguUEk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5nbGU7XG4gICAgfTtcblxuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocmFkYXJEYXRhLmNlbnRlci55IC0gY3VycmVudFBvaW50cy55LCBjdXJyZW50UG9pbnRzLnggLSByYWRhckRhdGEuY2VudGVyLngpO1xuICAgIGFuZ2xlID0gLTEgKiBhbmdsZTtcbiAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcbiAgICB9XG5cbiAgICB2YXIgYW5nbGVMaXN0ID0gcmFkYXJEYXRhLmFuZ2xlTGlzdC5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbSA9IGZpeEFuZ2xlKC0xICogaXRlbSk7XG5cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuXG4gICAgYW5nbGVMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgIHZhciByYW5nZVN0YXJ0ID0gZml4QW5nbGUoaXRlbSAtIGVhY2hBbmdsZUFyZWEgLyAyKTtcbiAgICAgIHZhciByYW5nZUVuZCA9IGZpeEFuZ2xlKGl0ZW0gKyBlYWNoQW5nbGVBcmVhIC8gMik7XG4gICAgICBpZiAocmFuZ2VFbmQgPCByYW5nZVN0YXJ0KSB7XG4gICAgICAgIHJhbmdlRW5kICs9IDIgKiBNYXRoLlBJO1xuICAgICAgfVxuICAgICAgaWYgKGFuZ2xlID49IHJhbmdlU3RhcnQgJiYgYW5nbGUgPD0gcmFuZ2VFbmQgfHwgYW5nbGUgKyAyICogTWF0aC5QSSA+PSByYW5nZVN0YXJ0ICYmIGFuZ2xlICsgMiAqIE1hdGguUEkgPD1cbiAgICAgICAgcmFuZ2VFbmQpIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY3VycmVudEluZGV4O1xufVxuXG5mdW5jdGlvbiBmaW5kRnVubmVsQ2hhcnRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgZnVubmVsRGF0YSkge1xuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmdW5uZWxEYXRhLnNlcmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBpdGVtID0gZnVubmVsRGF0YS5zZXJpZXNbaV07XG4gICAgaWYgKGN1cnJlbnRQb2ludHMueCA+IGl0ZW0uZnVubmVsQXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnggPCBpdGVtLmZ1bm5lbEFyZWFbMl0gJiYgY3VycmVudFBvaW50cy55ID4gaXRlbS5mdW5uZWxBcmVhWzFdICYmIGN1cnJlbnRQb2ludHMueSA8IGl0ZW0uZnVubmVsQXJlYVszXSkge1xuICAgICAgY3VycmVudEluZGV4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3VycmVudEluZGV4O1xufVxuXG5mdW5jdGlvbiBmaW5kV29yZENoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHdvcmREYXRhKSB7XG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHdvcmREYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSB3b3JkRGF0YVtpXTtcbiAgICBpZiAoY3VycmVudFBvaW50cy54ID4gaXRlbS5hcmVhWzBdICYmIGN1cnJlbnRQb2ludHMueCA8IGl0ZW0uYXJlYVsyXSAmJiBjdXJyZW50UG9pbnRzLnkgPiBpdGVtLmFyZWFbMV0gJiYgY3VycmVudFBvaW50cy55IDwgaXRlbS5hcmVhWzNdKSB7XG4gICAgICBjdXJyZW50SW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBjdXJyZW50SW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbmRNYXBDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCBvcHRzKSB7XG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcbiAgdmFyIGNEYXRhPW9wdHMuY2hhcnREYXRhLm1hcERhdGE7XG4gIHZhciBkYXRhPW9wdHMuc2VyaWVzO1xuICB2YXIgdG1wPXBvaW50VG9Db29yZGluYXRlKGN1cnJlbnRQb2ludHMueSwgY3VycmVudFBvaW50cy54LGNEYXRhLmJvdW5kcyxjRGF0YS5zY2FsZSxjRGF0YS54b2Zmc2V0LGNEYXRhLnlvZmZzZXQpO1xuICB2YXIgcG9pPVt0bXAueCwgdG1wLnldO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBpdGVtID0gZGF0YVtpXS5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICBpZihpc1BvaVdpdGhpblBvbHkocG9pLGl0ZW0pKXtcbiAgICAgIGN1cnJlbnRJbmRleCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZFBpZUNoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHBpZURhdGEpIHtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IC0xO1xuICBpZiAoaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGN1cnJlbnRQb2ludHMsIHBpZURhdGEuY2VudGVyLCBwaWVEYXRhLnJhZGl1cykpIHtcbiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHBpZURhdGEuY2VudGVyLnkgLSBjdXJyZW50UG9pbnRzLnksIGN1cnJlbnRQb2ludHMueCAtIHBpZURhdGEuY2VudGVyLngpO1xuICAgIGFuZ2xlID0gLWFuZ2xlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwaWVEYXRhLnNlcmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBwaWVEYXRhLnNlcmllc1tpXTtcbiAgICAgIGlmIChpc0luQW5nbGVSYW5nZShhbmdsZSwgaXRlbS5fc3RhcnRfLCBpdGVtLl9zdGFydF8gKyBpdGVtLl9wcm9wb3J0aW9uXyAqIDIgKiBNYXRoLlBJKSkge1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3VycmVudEluZGV4O1xufVxuXG5mdW5jdGlvbiBpc0luRXhhY3RQaWVDaGFydEFyZWEoY3VycmVudFBvaW50cywgY2VudGVyLCByYWRpdXMpIHtcbiAgcmV0dXJuIE1hdGgucG93KGN1cnJlbnRQb2ludHMueCAtIGNlbnRlci54LCAyKSArIE1hdGgucG93KGN1cnJlbnRQb2ludHMueSAtIGNlbnRlci55LCAyKSA8PSBNYXRoLnBvdyhyYWRpdXMsIDIpO1xufVxuXG5mdW5jdGlvbiBzcGxpdFBvaW50cyhwb2ludHMpIHtcbiAgdmFyIG5ld1BvaW50cyA9IFtdO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBuZXdQb2ludHMucHVzaChpdGVtcyk7XG4gICAgICB9XG4gICAgICBpdGVtcyA9IFtdO1xuICAgIH1cbiAgfSk7XG4gIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICBuZXdQb2ludHMucHVzaChpdGVtcyk7XG4gIH1cblxuICByZXR1cm4gbmV3UG9pbnRzO1xufVxuXG5mdW5jdGlvbiBjYWxMZWdlbmREYXRhKHNlcmllcywgb3B0cywgY29uZmlnLCBjaGFydERhdGEpIHtcbiAgbGV0IGxlZ2VuZERhdGEgPSB7XG4gICAgYXJlYToge1xuICAgICAgc3RhcnQ6IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfSxcbiAgICAgIGVuZDoge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9LFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICB3aG9sZVdpZHRoOiAwLFxuICAgICAgd2hvbGVIZWlnaHQ6IDBcbiAgICB9LFxuICAgIHBvaW50czogW10sXG4gICAgd2lkdGhBcnI6IFtdLFxuICAgIGhlaWdodEFycjogW11cbiAgfTtcbiAgaWYgKG9wdHMubGVnZW5kLnNob3cgPT09IGZhbHNlKSB7XG4gICAgY2hhcnREYXRhLmxlZ2VuZERhdGEgPSBsZWdlbmREYXRhO1xuICAgIHJldHVybiBsZWdlbmREYXRhO1xuICB9XG5cbiAgbGV0IHBhZGRpbmcgPSBvcHRzLmxlZ2VuZC5wYWRkaW5nO1xuICBsZXQgbWFyZ2luID0gb3B0cy5sZWdlbmQubWFyZ2luO1xuICBsZXQgZm9udFNpemUgPSBvcHRzLmxlZ2VuZC5mb250U2l6ZTtcbiAgbGV0IHNoYXBlV2lkdGggPSAxNSAqIG9wdHMucGl4ZWxSYXRpbztcbiAgbGV0IHNoYXBlUmlnaHQgPSA1ICogb3B0cy5waXhlbFJhdGlvO1xuICBsZXQgbGluZUhlaWdodCA9IE1hdGgubWF4KG9wdHMubGVnZW5kLmxpbmVIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW8sIGZvbnRTaXplKTtcbiAgaWYgKG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICd0b3AnIHx8IG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICdib3R0b20nKSB7XG4gICAgbGV0IGxlZ2VuZExpc3QgPSBbXTtcbiAgICBsZXQgd2lkdGhDb3VudCA9IDA7XG4gICAgbGV0IHdpZHRoQ291bnRBcnIgPSBbXTtcbiAgICBsZXQgY3VycmVudFJvdyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcbiAgICAgIGxldCBpdGVtV2lkdGggPSBzaGFwZVdpZHRoICsgc2hhcGVSaWdodCArIG1lYXN1cmVUZXh0KGl0ZW0ubmFtZSB8fCAndW5kZWZpbmVkJywgZm9udFNpemUpICsgb3B0cy5sZWdlbmQuaXRlbUdhcDtcbiAgICAgIGlmICh3aWR0aENvdW50ICsgaXRlbVdpZHRoID4gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXSAtIG9wdHMucGFkZGluZ1szXSkge1xuICAgICAgICBsZWdlbmRMaXN0LnB1c2goY3VycmVudFJvdyk7XG4gICAgICAgIHdpZHRoQ291bnRBcnIucHVzaCh3aWR0aENvdW50IC0gb3B0cy5sZWdlbmQuaXRlbUdhcCk7XG4gICAgICAgIHdpZHRoQ291bnQgPSBpdGVtV2lkdGg7XG4gICAgICAgIGN1cnJlbnRSb3cgPSBbaXRlbV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aENvdW50ICs9IGl0ZW1XaWR0aDtcbiAgICAgICAgY3VycmVudFJvdy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFJvdy5sZW5ndGgpIHtcbiAgICAgIGxlZ2VuZExpc3QucHVzaChjdXJyZW50Um93KTtcbiAgICAgIHdpZHRoQ291bnRBcnIucHVzaCh3aWR0aENvdW50IC0gb3B0cy5sZWdlbmQuaXRlbUdhcCk7XG4gICAgICBsZWdlbmREYXRhLndpZHRoQXJyID0gd2lkdGhDb3VudEFycjtcbiAgICAgIGxldCBsZWdlbmRXaWR0aCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHdpZHRoQ291bnRBcnIpO1xuICAgICAgc3dpdGNoIChvcHRzLmxlZ2VuZC5mbG9hdCkge1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IG9wdHMucGFkZGluZ1szXTtcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnggPSBvcHRzLnBhZGRpbmdbM10gKyAyICogcGFkZGluZztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC54ID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXSAtIGxlZ2VuZFdpZHRoIC0gMiAqIHBhZGRpbmc7XG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IChvcHRzLndpZHRoIC0gbGVnZW5kV2lkdGgpIC8gMiAtIHBhZGRpbmc7XG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gKG9wdHMud2lkdGggKyBsZWdlbmRXaWR0aCkgLyAyICsgcGFkZGluZztcbiAgICAgIH1cbiAgICAgIGxlZ2VuZERhdGEuYXJlYS53aWR0aCA9IGxlZ2VuZFdpZHRoICsgMiAqIHBhZGRpbmc7XG4gICAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVXaWR0aCA9IGxlZ2VuZFdpZHRoICsgMiAqIHBhZGRpbmc7XG4gICAgICBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0ID0gbGVnZW5kTGlzdC5sZW5ndGggKiBsaW5lSGVpZ2h0ICsgMiAqIHBhZGRpbmc7XG4gICAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVIZWlnaHQgPSBsZWdlbmRMaXN0Lmxlbmd0aCAqIGxpbmVIZWlnaHQgKyAyICogcGFkZGluZyArIDIgKiBtYXJnaW47XG4gICAgICBsZWdlbmREYXRhLnBvaW50cyA9IGxlZ2VuZExpc3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBsZW4gPSBzZXJpZXMubGVuZ3RoO1xuICAgIGxldCBtYXhIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMucGFkZGluZ1swXSAtIG9wdHMucGFkZGluZ1syXSAtIDIgKiBtYXJnaW4gLSAyICogcGFkZGluZztcbiAgICBsZXQgbWF4TGVuZ3RoID0gTWF0aC5taW4oTWF0aC5mbG9vcihtYXhIZWlnaHQgLyBsaW5lSGVpZ2h0KSwgbGVuKTtcbiAgICBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0ID0gbWF4TGVuZ3RoICogbGluZUhlaWdodCArIHBhZGRpbmcgKiAyO1xuICAgIGxlZ2VuZERhdGEuYXJlYS53aG9sZUhlaWdodCA9IG1heExlbmd0aCAqIGxpbmVIZWlnaHQgKyBwYWRkaW5nICogMjtcbiAgICBzd2l0Y2ggKG9wdHMubGVnZW5kLmZsb2F0KSB7XG4gICAgICBjYXNlICd0b3AnOlxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IG9wdHMucGFkZGluZ1swXSArIG1hcmdpbjtcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5wYWRkaW5nWzBdICsgbWFyZ2luICsgbGVnZW5kRGF0YS5hcmVhLmhlaWdodDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5wYWRkaW5nWzJdIC0gbWFyZ2luIC0gbGVnZW5kRGF0YS5hcmVhLmhlaWdodDtcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMl0gLSBtYXJnaW47XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSAob3B0cy5oZWlnaHQgLSBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0KSAvIDI7XG4gICAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueSA9IChvcHRzLmhlaWdodCArIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQpIC8gMjtcbiAgICB9XG4gICAgbGV0IGxpbmVOdW0gPSBsZW4gJSBtYXhMZW5ndGggPT09IDAgPyBsZW4gLyBtYXhMZW5ndGggOiBNYXRoLmZsb29yKChsZW4gLyBtYXhMZW5ndGgpICsgMSk7XG4gICAgbGV0IGN1cnJlbnRSb3cgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVOdW07IGkrKykge1xuICAgICAgbGV0IHRlbXAgPSBzZXJpZXMuc2xpY2UoaSAqIG1heExlbmd0aCwgaSAqIG1heExlbmd0aCArIG1heExlbmd0aCk7XG4gICAgICBjdXJyZW50Um93LnB1c2godGVtcCk7XG4gICAgfVxuXG4gICAgbGVnZW5kRGF0YS5wb2ludHMgPSBjdXJyZW50Um93O1xuXG4gICAgaWYgKGN1cnJlbnRSb3cubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRSb3cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGl0ZW0gPSBjdXJyZW50Um93W2ldO1xuICAgICAgICBsZXQgbWF4V2lkdGggPSAwO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGl0ZW0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBsZXQgaXRlbVdpZHRoID0gc2hhcGVXaWR0aCArIHNoYXBlUmlnaHQgKyBtZWFzdXJlVGV4dChpdGVtW2pdLm5hbWUgfHwgJ3VuZGVmaW5lZCcsIGZvbnRTaXplKSArIG9wdHMubGVnZW5kLml0ZW1HYXA7XG4gICAgICAgICAgaWYgKGl0ZW1XaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IGl0ZW1XaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGVnZW5kRGF0YS53aWR0aEFyci5wdXNoKG1heFdpZHRoKTtcbiAgICAgICAgbGVnZW5kRGF0YS5oZWlnaHRBcnIucHVzaChpdGVtLmxlbmd0aCAqIGxpbmVIZWlnaHQgKyBwYWRkaW5nICogMik7XG4gICAgICB9XG4gICAgICBsZXQgbGVnZW5kV2lkdGggPSAwXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZ2VuZERhdGEud2lkdGhBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVnZW5kV2lkdGggKz0gbGVnZW5kRGF0YS53aWR0aEFycltpXTtcbiAgICAgIH1cbiAgICAgIGxlZ2VuZERhdGEuYXJlYS53aWR0aCA9IGxlZ2VuZFdpZHRoIC0gb3B0cy5sZWdlbmQuaXRlbUdhcCArIDIgKiBwYWRkaW5nO1xuICAgICAgbGVnZW5kRGF0YS5hcmVhLndob2xlV2lkdGggPSBsZWdlbmREYXRhLmFyZWEud2lkdGggKyBwYWRkaW5nO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAob3B0cy5sZWdlbmQucG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSBvcHRzLnBhZGRpbmdbMF0gKyBtYXJnaW47XG4gICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnkgPSBvcHRzLnBhZGRpbmdbMF0gKyBtYXJnaW4gKyBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC55ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMl0gLSBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0IC0gbWFyZ2luO1xuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMl0gLSBtYXJnaW47XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC54ID0gb3B0cy5wYWRkaW5nWzNdO1xuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy5wYWRkaW5nWzNdICsgbGVnZW5kRGF0YS5hcmVhLndpZHRoO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnggPSBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdIC0gbGVnZW5kRGF0YS5hcmVhLndpZHRoO1xuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIGNoYXJ0RGF0YS5sZWdlbmREYXRhID0gbGVnZW5kRGF0YTtcbiAgcmV0dXJuIGxlZ2VuZERhdGE7XG59XG5cbmZ1bmN0aW9uIGNhbENhdGVnb3JpZXNEYXRhKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgZWFjaFNwYWNpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBhbmdsZTogMCxcbiAgICB4QXhpc0hlaWdodDogY29uZmlnLnhBeGlzSGVpZ2h0XG4gIH07XG4gIHZhciBjYXRlZ29yaWVzVGV4dExlbnRoID0gY2F0ZWdvcmllcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtKTtcbiAgfSk7XG4gIHZhciBtYXhUZXh0TGVuZ3RoID0gTWF0aC5tYXguYXBwbHkodGhpcywgY2F0ZWdvcmllc1RleHRMZW50aCk7XG5cbiAgaWYgKG9wdHMueEF4aXMucm90YXRlTGFiZWwgPT0gdHJ1ZSAmJiBtYXhUZXh0TGVuZ3RoICsgMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nID4gZWFjaFNwYWNpbmcpIHtcbiAgICByZXN1bHQuYW5nbGUgPSA0NSAqIE1hdGguUEkgLyAxODA7XG4gICAgcmVzdWx0LnhBeGlzSGVpZ2h0ID0gMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nICsgbWF4VGV4dExlbmd0aCAqIE1hdGguc2luKHJlc3VsdC5hbmdsZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0UmFkYXJEYXRhUG9pbnRzKGFuZ2xlTGlzdCwgY2VudGVyLCByYWRpdXMsIHNlcmllcywgb3B0cykge1xuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMTtcblxuICB2YXIgcmFkYXJPcHRpb24gPSBvcHRzLmV4dHJhLnJhZGFyIHx8IHt9O1xuICByYWRhck9wdGlvbi5tYXggPSByYWRhck9wdGlvbi5tYXggfHwgMDtcbiAgdmFyIG1heERhdGEgPSBNYXRoLm1heChyYWRhck9wdGlvbi5tYXgsIE1hdGgubWF4LmFwcGx5KG51bGwsIGRhdGFDb21iaW5lKHNlcmllcykpKTtcblxuICB2YXIgZGF0YSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlYWNoID0gc2VyaWVzW2ldO1xuICAgIGxldCBsaXN0SXRlbSA9IHt9O1xuICAgIGxpc3RJdGVtLmNvbG9yID0gZWFjaC5jb2xvcjtcbiAgICBsaXN0SXRlbS5kYXRhID0gW107XG4gICAgZWFjaC5kYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgIGxldCB0bXAgPSB7fTtcbiAgICAgIHRtcC5hbmdsZSA9IGFuZ2xlTGlzdFtpbmRleF07XG5cbiAgICAgIHRtcC5wcm9wb3J0aW9uID0gaXRlbSAvIG1heERhdGE7XG4gICAgICB0bXAucG9zaXRpb24gPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihyYWRpdXMgKiB0bXAucHJvcG9ydGlvbiAqIHByb2Nlc3MgKiBNYXRoLmNvcyh0bXAuYW5nbGUpLCByYWRpdXMgKiB0bXAucHJvcG9ydGlvbiAqXG4gICAgICAgIHByb2Nlc3MgKiBNYXRoLnNpbih0bXAuYW5nbGUpLCBjZW50ZXIpO1xuICAgICAgbGlzdEl0ZW0uZGF0YS5wdXNoKHRtcCk7XG4gICAgfSk7XG5cbiAgICBkYXRhLnB1c2gobGlzdEl0ZW0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGdldFBpZURhdGFQb2ludHMoc2VyaWVzLCByYWRpdXMpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIF9zdGFydF8gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XG4gICAgY291bnQgKz0gaXRlbS5kYXRhO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcbiAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gMSAvIHNlcmllcy5sZW5ndGggKiBwcm9jZXNzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uZGF0YSAvIGNvdW50ICogcHJvY2VzcztcbiAgICB9XG4gICAgaXRlbS5fcmFkaXVzXyA9IHJhZGl1cztcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGl0ZW0uX3N0YXJ0XyA9IF9zdGFydF87XG4gICAgX3N0YXJ0XyArPSAyICogaXRlbS5fcHJvcG9ydGlvbl8gKiBNYXRoLlBJO1xuICB9XG5cbiAgcmV0dXJuIHNlcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0RnVubmVsRGF0YVBvaW50cyhzZXJpZXMsIHJhZGl1cykge1xuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgc2VyaWVzID0gc2VyaWVzLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGFyc2VJbnQoYi5kYXRhKS1wYXJzZUludChhLmRhdGEpO30pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIHNlcmllc1tpXS5yYWRpdXMgPSBzZXJpZXNbaV0uZGF0YS9zZXJpZXNbMF0uZGF0YSpyYWRpdXMqcHJvY2VzcztcbiAgICBzZXJpZXNbaV0uX3Byb3BvcnRpb25fID0gc2VyaWVzW2ldLmRhdGEvc2VyaWVzWzBdLmRhdGE7XG4gIH1cbiAgcmV0dXJuIHNlcmllcy5yZXZlcnNlKCk7XG59XG5cbmZ1bmN0aW9uIGdldFJvc2VEYXRhUG9pbnRzKHNlcmllcywgdHlwZSwgbWluUmFkaXVzLCByYWRpdXMpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBfc3RhcnRfID0gMDtcblxuICB2YXIgZGF0YUFyciA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XG4gICAgY291bnQgKz0gaXRlbS5kYXRhO1xuICAgIGRhdGFBcnIucHVzaChpdGVtLmRhdGEpO1xuICB9XG4gIFxuICB2YXIgbWluRGF0YSA9IE1hdGgubWluLmFwcGx5KG51bGwsIGRhdGFBcnIpO1xuICB2YXIgbWF4RGF0YSA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGRhdGFBcnIpO1xuICB2YXIgcmFkaXVzTGVuZ3RoID0gcmFkaXVzIC0gbWluUmFkaXVzO1xuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcbiAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xuICAgIGlmIChjb3VudCA9PT0gMCB8fCB0eXBlID09ICdhcmVhJykge1xuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLmRhdGEgLyBjb3VudCAqIHByb2Nlc3M7XG4gICAgICBpdGVtLl9yb3NlX3Byb3BvcnRpb25fID0gMSAvIHNlcmllcy5sZW5ndGggKiBwcm9jZXNzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uZGF0YSAvIGNvdW50ICogcHJvY2VzcztcbiAgICAgIGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8gPSBpdGVtLmRhdGEgLyBjb3VudCAqIHByb2Nlc3M7XG4gICAgfVxuICAgIGl0ZW0uX3JhZGl1c18gPSBtaW5SYWRpdXMgKyByYWRpdXNMZW5ndGggKiAoKGl0ZW0uZGF0YSAtIG1pbkRhdGEpIC8gKG1heERhdGEgLSBtaW5EYXRhKSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcbiAgICBpdGVtLl9zdGFydF8gPSBfc3RhcnRfO1xuICAgIF9zdGFydF8gKz0gMiAqIGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8gKiBNYXRoLlBJO1xuICB9XG5cbiAgcmV0dXJuIHNlcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJjYmFyRGF0YVBvaW50cyhzZXJpZXMsIGFyY2Jhck9wdGlvbikge1xuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgaWYgKHByb2Nlc3MgPT0gMSkge1xuICAgIHByb2Nlc3MgPSAwLjk5OTk5OTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGl0ZW0uZGF0YSA9IGl0ZW0uZGF0YSA9PT0gbnVsbCA/IDAgOiBpdGVtLmRhdGE7XG4gICAgbGV0IHRvdGFsQW5nbGU7XG4gICAgaWYgKGFyY2Jhck9wdGlvbi50eXBlID09ICdkZWZhdWx0Jykge1xuICAgICAgaWYgKGFyY2Jhck9wdGlvbi5lbmRBbmdsZSA8IGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlKSB7XG4gICAgICAgIHRvdGFsQW5nbGUgPSAyICsgYXJjYmFyT3B0aW9uLmVuZEFuZ2xlIC0gYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGU7XG4gICAgICB9IGVsc2V7XG4gICAgICAgIHRvdGFsQW5nbGUgPSBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZSAtIGFyY2Jhck9wdGlvbi5lbmRBbmdsZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdG90YWxBbmdsZSA9IDI7XG4gICAgfVxuICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gdG90YWxBbmdsZSAqIGl0ZW0uZGF0YSAqIHByb2Nlc3MgKyBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZTtcbiAgICBpZiAoaXRlbS5fcHJvcG9ydGlvbl8gPj0gMikge1xuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLl9wcm9wb3J0aW9uXyAlIDI7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEdhdWdlQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkge1xuICBsZXQgdG90YWxBbmdsZSA9IHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSArIDE7XG4gIGxldCB0ZW1wU3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2F0ZWdvcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGNhdGVnb3JpZXNbaV0udmFsdWUgPSBjYXRlZ29yaWVzW2ldLnZhbHVlID09PSBudWxsID8gMCA6IGNhdGVnb3JpZXNbaV0udmFsdWU7XG4gICAgY2F0ZWdvcmllc1tpXS5fc3RhcnRBbmdsZV8gPSB0ZW1wU3RhcnRBbmdsZTtcbiAgICBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPSB0b3RhbEFuZ2xlICogY2F0ZWdvcmllc1tpXS52YWx1ZSArIHN0YXJ0QW5nbGU7XG4gICAgaWYgKGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXyA+PSAyKSB7XG4gICAgICBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPSBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gJSAyO1xuICAgIH1cbiAgICB0ZW1wU3RhcnRBbmdsZSA9IGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXztcbiAgfVxuICByZXR1cm4gY2F0ZWdvcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0R2F1Z2VEYXRhUG9pbnRzKHNlcmllcywgY2F0ZWdvcmllcywgZ2F1Z2VPcHRpb24pIHtcbiAgbGV0IHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcbiAgICBpZiAoZ2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvciA9PSAnYXV0bycpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2F0ZWdvcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXRlbS5kYXRhIDw9IGNhdGVnb3JpZXNbaV0udmFsdWUpIHtcbiAgICAgICAgICBpdGVtLmNvbG9yID0gY2F0ZWdvcmllc1tpXS5jb2xvcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtLmNvbG9yID0gZ2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvcjtcbiAgICB9XG4gICAgbGV0IHRvdGFsQW5nbGUgPSBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlIC0gZ2F1Z2VPcHRpb24uZW5kQW5nbGUgKyAxO1xuICAgIGl0ZW0uX2VuZEFuZ2xlXyA9IHRvdGFsQW5nbGUgKiBpdGVtLmRhdGEgKyBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xuICAgIGl0ZW0uX29sZEFuZ2xlXyA9IGdhdWdlT3B0aW9uLm9sZEFuZ2xlO1xuICAgIGlmIChnYXVnZU9wdGlvbi5vbGRBbmdsZSA8IGdhdWdlT3B0aW9uLmVuZEFuZ2xlKSB7XG4gICAgICBpdGVtLl9vbGRBbmdsZV8gKz0gMjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGF0YSA+PSBnYXVnZU9wdGlvbi5vbGREYXRhKSB7XG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IChpdGVtLl9lbmRBbmdsZV8gLSBpdGVtLl9vbGRBbmdsZV8pICogcHJvY2VzcyArIGdhdWdlT3B0aW9uLm9sZEFuZ2xlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uX29sZEFuZ2xlXyAtIChpdGVtLl9vbGRBbmdsZV8gLSBpdGVtLl9lbmRBbmdsZV8pICogcHJvY2VzcztcbiAgICB9XG4gICAgaWYgKGl0ZW0uX3Byb3BvcnRpb25fID49IDIpIHtcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5fcHJvcG9ydGlvbl8gJSAyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRQaWVUZXh0TWF4TGVuZ3RoKHNlcmllcykge1xuICBzZXJpZXMgPSBnZXRQaWVEYXRhUG9pbnRzKHNlcmllcyk7XG4gIGxldCBtYXhMZW5ndGggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGxldCB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8gKiAxMDApICsgJyUnO1xuICAgIG1heExlbmd0aCA9IE1hdGgubWF4KG1heExlbmd0aCwgbWVhc3VyZVRleHQodGV4dCkpO1xuICB9XG5cbiAgcmV0dXJuIG1heExlbmd0aDtcbn1cblxuZnVuY3Rpb24gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMpIHtcbiAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaXRlbS53aWR0aCA9IE1hdGguY2VpbCgoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gY29sdW1uTGVuKTtcblxuICAgIGlmIChvcHRzLmV4dHJhLmNvbHVtbiAmJiBvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCAmJiArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggPiAwKSB7XG4gICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0ud2lkdGggPD0gMCkge1xuICAgICAgaXRlbS53aWR0aCA9IDE7XG4gICAgfVxuICAgIGl0ZW0ueCArPSAoaW5kZXggKyAwLjUgLSBjb2x1bW5MZW4gLyAyKSAqIGl0ZW0ud2lkdGg7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaXhDb2x1bWVNZXRlckRhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgY29sdW1uTGVuLCBpbmRleCwgY29uZmlnLCBvcHRzLCBib3JkZXIpIHtcbiAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaXRlbS53aWR0aCA9IE1hdGguY2VpbCgoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gMik7XG5cbiAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xuICAgICAgaXRlbS53aWR0aCA9IE1hdGgubWluKGl0ZW0ud2lkdGgsICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgaXRlbS53aWR0aCAtPSAyICogYm9yZGVyO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpeENvbHVtZVN0YWNrRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMsIHNlcmllcykge1xuXG4gIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uKGl0ZW0sIGluZGV4bikge1xuXG4gICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpdGVtLndpZHRoID0gTWF0aC5jZWlsKChlYWNoU3BhY2luZyAtIDIgKiBjb25maWcuY29sdW1lUGFkZGluZykgLyAyKTtcblxuICAgIGlmIChvcHRzLmV4dHJhLmNvbHVtbiAmJiBvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCAmJiArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggPiAwKSB7XG4gICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRYQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpIHtcbiAgdmFyIHlBeGlzVG90YWxXaWR0aCA9IGNvbmZpZy55QXhpc1dpZHRoICsgY29uZmlnLnlBeGlzVGl0bGVXaWR0aDtcbiAgdmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM107XG4gIHZhciBkYXRhQ291bnQgPSBvcHRzLmVuYWJsZVNjcm9sbCA/IE1hdGgubWluKG9wdHMueEF4aXMuaXRlbUNvdW50LCBjYXRlZ29yaWVzLmxlbmd0aCkgOiBjYXRlZ29yaWVzLmxlbmd0aDtcbiAgaWYoKG9wdHMudHlwZT09J2xpbmUnIHx8IG9wdHMudHlwZT09J2FyZWEnKSAmJiBkYXRhQ291bnQ+MSAmJiBvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwPT0nanVzdGlmeScpe1xuICAgIGRhdGFDb3VudCAtPTE7XG4gIH1cbiAgdmFyIGVhY2hTcGFjaW5nID0gc3BhY2luZ1ZhbGlkIC8gZGF0YUNvdW50O1xuXG4gIHZhciB4QXhpc1BvaW50cyA9IFtdO1xuICB2YXIgc3RhcnRYID0gb3B0cy5hcmVhWzNdO1xuICB2YXIgZW5kWCA9IG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV07XG4gIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgIHhBeGlzUG9pbnRzLnB1c2goc3RhcnRYICsgaW5kZXggKiBlYWNoU3BhY2luZyk7XG4gIH0pO1xuICBpZihvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwICE9PSdqdXN0aWZ5Jyl7XG4gICAgaWYgKG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XG4gICAgICB4QXhpc1BvaW50cy5wdXNoKHN0YXJ0WCArIGNhdGVnb3JpZXMubGVuZ3RoICogZWFjaFNwYWNpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4QXhpc1BvaW50cy5wdXNoKGVuZFgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcbiAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICBlbmRYOiBlbmRYLFxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDYW5kbGVEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IDE7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHZhbGlkSGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl07XG4gIGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICBwb2ludHMucHVzaChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNQb2ludHMgPSBbXTtcbiAgICAgIGl0ZW0uZm9yRWFjaChmdW5jdGlvbihpdGVtcywgaW5kZXhzKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHt9O1xuICAgICAgICBwb2ludC54ID0geEF4aXNQb2ludHNbaW5kZXhdICsgTWF0aC5yb3VuZChlYWNoU3BhY2luZyAvIDIpO1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy52YWx1ZSB8fCBpdGVtcztcbiAgICAgICAgdmFyIGhlaWdodCA9IHZhbGlkSGVpZ2h0ICogKHZhbHVlIC0gbWluUmFuZ2UpIC8gKG1heFJhbmdlIC0gbWluUmFuZ2UpO1xuICAgICAgICBoZWlnaHQgKj0gcHJvY2VzcztcbiAgICAgICAgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xuICAgICAgICBjUG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgfSk7XG4gICAgICBwb2ludHMucHVzaChjUG9pbnRzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZykge1xuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMTtcbiAgdmFyIGJvdW5kYXJ5R2FwPSdjZW50ZXInO1xuICBpZiAob3B0cy50eXBlID09ICdsaW5lJ3x8b3B0cy50eXBlID09ICdhcmVhJyl7XG4gICAgYm91bmRhcnlHYXA9b3B0cy54QXhpcy5ib3VuZGFyeUdhcDtcbiAgfVxuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciB2YWxpZEhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xuICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2gobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwb2ludCA9IHt9O1xuICAgICAgcG9pbnQuY29sb3IgPSBpdGVtLmNvbG9yO1xuICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XTtcbiAgICAgIGlmKGJvdW5kYXJ5R2FwPT0nY2VudGVyJyl7XG4gICAgICAgIHBvaW50LnggKz0gTWF0aC5yb3VuZChlYWNoU3BhY2luZyAvIDIpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gaXRlbTtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IGl0ZW0udmFsdWVcbiAgICAgIH1cbiAgICAgIHZhciBoZWlnaHQgPSB2YWxpZEhlaWdodCAqICh2YWx1ZSAtIG1pblJhbmdlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICAgIGhlaWdodCAqPSBwcm9jZXNzO1xuICAgICAgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBvaW50cztcbn1cblxuZnVuY3Rpb24gZ2V0U3RhY2tEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHNlcmllc0luZGV4LCBzdGFja1Nlcmllcykge1xuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA5ICYmIGFyZ3VtZW50c1s5XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzldIDogMTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcblxuICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2gobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwb2ludCA9IHt9O1xuICAgICAgcG9pbnQuY29sb3IgPSBpdGVtLmNvbG9yO1xuICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XSArIE1hdGgucm91bmQoZWFjaFNwYWNpbmcgLyAyKTtcblxuICAgICAgaWYgKHNlcmllc0luZGV4ID4gMCkge1xuICAgICAgICB2YXIgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzZXJpZXNJbmRleDsgaSsrKSB7XG4gICAgICAgICAgdmFsdWUgKz0gc3RhY2tTZXJpZXNbaV0uZGF0YVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlMCA9IHZhbHVlIC0gaXRlbTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHZhbGlkSGVpZ2h0ICogKHZhbHVlIC0gbWluUmFuZ2UpIC8gKG1heFJhbmdlIC0gbWluUmFuZ2UpO1xuICAgICAgICB2YXIgaGVpZ2h0MCA9IHZhbGlkSGVpZ2h0ICogKHZhbHVlMCAtIG1pblJhbmdlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW07XG4gICAgICAgIHZhciBoZWlnaHQgPSB2YWxpZEhlaWdodCAqICh2YWx1ZSAtIG1pblJhbmdlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICAgICAgdmFyIGhlaWdodDAgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGhlaWdodGMgPSBoZWlnaHQwO1xuICAgICAgaGVpZ2h0ICo9IHByb2Nlc3M7XG4gICAgICBoZWlnaHRjICo9IHByb2Nlc3M7XG4gICAgICBwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBNYXRoLnJvdW5kKGhlaWdodCkgLSBvcHRzLmFyZWFbMl07XG4gICAgICBwb2ludC55MCA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHRjKSAtIG9wdHMuYXJlYVsyXTtcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGdldFlBeGlzVGV4dExpc3Qoc2VyaWVzLCBvcHRzLCBjb25maWcsIHN0YWNrKSB7XG4gIHZhciBkYXRhO1xuICBpZiAoc3RhY2sgPT0gJ3N0YWNrJykge1xuICAgIGRhdGEgPSBkYXRhQ29tYmluZVN0YWNrKHNlcmllcywgb3B0cy5jYXRlZ29yaWVzLmxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YSA9IGRhdGFDb21iaW5lKHNlcmllcyk7XG4gIH1cbiAgdmFyIHNvcnRlZCA9IFtdO1xuICAvLyByZW1vdmUgbnVsbCBmcm9tIGRhdGFcbiAgZGF0YSA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAvL3JldHVybiBpdGVtICE9PSBudWxsO1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGl0ZW0uY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXRlbS52YWx1ZSAhPT0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZW0gIT09IG51bGw7XG4gICAgfVxuICB9KTtcbiAgZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpdGVtLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XG4gICAgICAgIGl0ZW0ubWFwKGZ1bmN0aW9uKHN1Yml0ZW0pIHtcbiAgICAgICAgICBzb3J0ZWQucHVzaChzdWJpdGVtKTtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvcnRlZC5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0ZWQucHVzaChpdGVtKTtcbiAgICB9XG4gIH0pXG4gIHZhciBtaW5EYXRhID0gMDtcbiAgdmFyIG1heERhdGEgPSAwO1xuICBpZiAoc29ydGVkLmxlbmd0aCA+IDApIHtcbiAgICBtaW5EYXRhID0gTWF0aC5taW4uYXBwbHkodGhpcywgc29ydGVkKTtcbiAgICBtYXhEYXRhID0gTWF0aC5tYXguYXBwbHkodGhpcywgc29ydGVkKTtcbiAgfVxuICBpZiAodHlwZW9mIG9wdHMueUF4aXMubWluID09PSAnbnVtYmVyJykge1xuICAgIG1pbkRhdGEgPSBNYXRoLm1pbihvcHRzLnlBeGlzLm1pbiwgbWluRGF0YSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRzLnlBeGlzLm1heCA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhEYXRhID0gTWF0aC5tYXgob3B0cy55QXhpcy5tYXgsIG1heERhdGEpO1xuICB9XG5cbiAgaWYgKG1pbkRhdGEgPT09IG1heERhdGEpIHtcbiAgICB2YXIgcmFuZ2VTcGFuID0gbWF4RGF0YSB8fCAxMDtcbiAgICBtYXhEYXRhICs9IHJhbmdlU3BhbjtcbiAgfVxuXG4gIHZhciBkYXRhUmFuZ2UgPSBnZXREYXRhUmFuZ2UobWluRGF0YSwgbWF4RGF0YSk7XG4gIHZhciBtaW5SYW5nZSA9IGRhdGFSYW5nZS5taW5SYW5nZTtcbiAgdmFyIG1heFJhbmdlID0gZGF0YVJhbmdlLm1heFJhbmdlO1xuXG4gIHZhciByYW5nZSA9IFtdO1xuICB2YXIgZWFjaFJhbmdlID0gKG1heFJhbmdlIC0gbWluUmFuZ2UpIC8gY29uZmlnLnlBeGlzU3BsaXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gY29uZmlnLnlBeGlzU3BsaXQ7IGkrKykge1xuICAgIHJhbmdlLnB1c2gobWluUmFuZ2UgKyBlYWNoUmFuZ2UgKiBpKTtcbiAgfVxuICByZXR1cm4gcmFuZ2UucmV2ZXJzZSgpO1xufVxuXG5mdW5jdGlvbiBjYWxZQXhpc0RhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpIHtcbiAgLy/loIblj6Dlm77ph43nrpdZ6L20XG4gIHZhciBjb2x1bW5zdHlsZSA9IGFzc2lnbih7fSwge1xuICAgIHR5cGU6IFwiXCJcbiAgfSwgb3B0cy5leHRyYS5jb2x1bW4pO1xuICB2YXIgcmFuZ2VzID0gZ2V0WUF4aXNUZXh0TGlzdChzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29sdW1uc3R5bGUudHlwZSk7XG4gIHZhciB5QXhpc1dpZHRoID0gY29uZmlnLnlBeGlzV2lkdGg7XG4gIHZhciB5QXhpc0ZvbnRTaXplID0gb3B0cy55QXhpcy5mb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XG4gIHZhciByYW5nZXNGb3JtYXQgPSByYW5nZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpdGVtID0gdXRpbC50b0ZpeGVkKGl0ZW0sIDYpO1xuICAgIGl0ZW0gPSBvcHRzLnlBeGlzLmZvcm1hdCA/IG9wdHMueUF4aXMuZm9ybWF0KE51bWJlcihpdGVtKSkgOiBpdGVtO1xuICAgIHlBeGlzV2lkdGggPSBNYXRoLm1heCh5QXhpc1dpZHRoLCBtZWFzdXJlVGV4dChpdGVtLCB5QXhpc0ZvbnRTaXplKSArIDUpO1xuICAgIHJldHVybiBpdGVtO1xuICB9KTtcbiAgaWYgKG9wdHMueUF4aXMuZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICB5QXhpc1dpZHRoID0gMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmFuZ2VzRm9ybWF0OiByYW5nZXNGb3JtYXQsXG4gICAgcmFuZ2VzOiByYW5nZXMsXG4gICAgeUF4aXNXaWR0aDogeUF4aXNXaWR0aFxuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxUb29sdGlwWUF4aXNEYXRhKHBvaW50LCBzZXJpZXMsIG9wdHMsIGNvbmZpZywgZWFjaFNwYWNpbmcpIHtcbiAgdmFyIHJhbmdlcyA9IGdldFlBeGlzVGV4dExpc3Qoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xuICB2YXIgc3BhY2luZ1ZhbGlkID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl07XG4gIGxldCBtYXhWYWwgPSByYW5nZXNbMF07XG4gIGxldCBtaW5WYWwgPSByYW5nZXNbcmFuZ2VzLmxlbmd0aCAtIDFdO1xuICBsZXQgbWluQXhpcyA9IG9wdHMucGFkZGluZ1szXTtcbiAgbGV0IG1heEF4aXMgPSBvcHRzLnBhZGRpbmdbMV0gKyBzcGFjaW5nVmFsaWQ7XG4gIGxldCBpdGVtID0gbWF4VmFsIC0gKG1heFZhbCAtIG1pblZhbCkgKiAocG9pbnQgLSBtaW5BeGlzKSAvIChtYXhBeGlzIC0gbWluQXhpcyk7XG4gIGl0ZW0gPSBvcHRzLnlBeGlzLmZvcm1hdCA/IG9wdHMueUF4aXMuZm9ybWF0KE51bWJlcihpdGVtKSkgOiBpdGVtO1xuICByZXR1cm4gaXRlbTtcbn1cblxuZnVuY3Rpb24gY2FsTWFya0xpbmVEYXRhKG1pblJhbmdlLCBtYXhSYW5nZSwgcG9pbnRzLCBvcHRzKSB7XG4gIGxldCBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaGVpZ2h0ID0gc3BhY2luZ1ZhbGlkICogKHBvaW50c1tpXS52YWx1ZSAtIG1pblJhbmdlKSAvIChtYXhSYW5nZSAtIG1pblJhbmdlKTtcbiAgICBwb2ludHNbaV0ueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xuICB9XG4gIHJldHVybiBwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cykge1xuICBpZiAob3B0cy5yb3RhdGVMb2NrICE9PSB0cnVlKSB7XG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5oZWlnaHQsIDApO1xuICAgIGNvbnRleHQucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCk7XG4gIH0gZWxzZSBpZiAob3B0cy5fcm90YXRlXyAhPT0gdHJ1ZSkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuaGVpZ2h0LCAwKTtcbiAgICBjb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xuICAgIG9wdHMuX3JvdGF0ZV8gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdQb2ludFNoYXBlKHBvaW50cywgY29sb3IsIHNoYXBlLCBjb250ZXh0LCBvcHRzKSB7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoXCIjZmZmZmZmXCIpO1xuICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUoY29sb3IpO1xuICBpZiAoc2hhcGUgPT09ICdkaWFtb25kJykge1xuICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCAtIDQuNSwgaXRlbS55KTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkgKyA0LjUpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyA0LjUsIGl0ZW0ueSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55IC0gNC41KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ2NpcmNsZScpIHtcbiAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54ICsgMy41ICogb3B0cy5waXhlbFJhdGlvLCBpdGVtLnkpO1xuICAgICAgICBjb250ZXh0LmFyYyhpdGVtLngsIGl0ZW0ueSwgNCAqIG9wdHMucGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ3JlY3QnKSB7XG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIDMuNSwgaXRlbS55IC0gMy41KTtcbiAgICAgICAgY29udGV4dC5yZWN0KGl0ZW0ueCAtIDMuNSwgaXRlbS55IC0gMy41LCA3LCA3KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ3RyaWFuZ2xlJykge1xuICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCAtIDQuNSwgaXRlbS55ICsgNC41KTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54ICsgNC41LCBpdGVtLnkgKyA0LjUpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgY29udGV4dC5maWxsKCk7XG4gIGNvbnRleHQuc3Ryb2tlKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0LCBjZW50ZXIpIHtcbiAgdmFyIHRpdGxlZm9udFNpemUgPSBvcHRzLnRpdGxlLmZvbnRTaXplIHx8IGNvbmZpZy50aXRsZUZvbnRTaXplO1xuICB2YXIgc3VidGl0bGVmb250U2l6ZSA9IG9wdHMuc3VidGl0bGUuZm9udFNpemUgfHwgY29uZmlnLnN1YnRpdGxlRm9udFNpemU7XG4gIHZhciB0aXRsZSA9IG9wdHMudGl0bGUubmFtZSB8fCAnJztcbiAgdmFyIHN1YnRpdGxlID0gb3B0cy5zdWJ0aXRsZS5uYW1lIHx8ICcnO1xuICB2YXIgdGl0bGVGb250Q29sb3IgPSBvcHRzLnRpdGxlLmNvbG9yIHx8IGNvbmZpZy50aXRsZUNvbG9yO1xuICB2YXIgc3VidGl0bGVGb250Q29sb3IgPSBvcHRzLnN1YnRpdGxlLmNvbG9yIHx8IGNvbmZpZy5zdWJ0aXRsZUNvbG9yO1xuICB2YXIgdGl0bGVIZWlnaHQgPSB0aXRsZSA/IHRpdGxlZm9udFNpemUgOiAwO1xuICB2YXIgc3VidGl0bGVIZWlnaHQgPSBzdWJ0aXRsZSA/IHN1YnRpdGxlZm9udFNpemUgOiAwO1xuICB2YXIgbWFyZ2luID0gNTtcblxuICBpZiAoc3VidGl0bGUpIHtcbiAgICB2YXIgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQoc3VidGl0bGUsIHN1YnRpdGxlZm9udFNpemUpO1xuICAgIHZhciBzdGFydFggPSBjZW50ZXIueCAtIHRleHRXaWR0aCAvIDIgKyAob3B0cy5zdWJ0aXRsZS5vZmZzZXRYIHx8IDApO1xuICAgIHZhciBzdGFydFkgPSBjZW50ZXIueSArIHN1YnRpdGxlZm9udFNpemUgLyAyICsgKG9wdHMuc3VidGl0bGUub2Zmc2V0WSB8fCAwKTtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHN0YXJ0WSArPSAodGl0bGVIZWlnaHQgKyBtYXJnaW4pIC8gMjtcbiAgICB9XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKHN1YnRpdGxlZm9udFNpemUpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHN1YnRpdGxlRm9udENvbG9yKTtcbiAgICBjb250ZXh0LmZpbGxUZXh0KHN1YnRpdGxlLCBzdGFydFgsIHN0YXJ0WSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG4gIGlmICh0aXRsZSkge1xuICAgIHZhciBfdGV4dFdpZHRoID0gbWVhc3VyZVRleHQodGl0bGUsIHRpdGxlZm9udFNpemUpO1xuICAgIHZhciBfc3RhcnRYID0gY2VudGVyLnggLSBfdGV4dFdpZHRoIC8gMiArIChvcHRzLnRpdGxlLm9mZnNldFggfHwgMCk7XG4gICAgdmFyIF9zdGFydFkgPSBjZW50ZXIueSArIHRpdGxlZm9udFNpemUgLyAyICsgKG9wdHMudGl0bGUub2Zmc2V0WSB8fCAwKTtcbiAgICBpZiAoc3VidGl0bGUpIHtcbiAgICAgIF9zdGFydFkgLT0gKHN1YnRpdGxlSGVpZ2h0ICsgbWFyZ2luKSAvIDI7XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRGb250U2l6ZSh0aXRsZWZvbnRTaXplKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0aXRsZUZvbnRDb2xvcik7XG4gICAgY29udGV4dC5maWxsVGV4dCh0aXRsZSwgX3N0YXJ0WCwgX3N0YXJ0WSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdQb2ludFRleHQocG9pbnRzLCBzZXJpZXMsIGNvbmZpZywgY29udGV4dCkge1xuICAvLyDnu5jliLbmlbDmja7mlofmoYhcbiAgdmFyIGRhdGEgPSBzZXJpZXMuZGF0YTtcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgLy92YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQoZGF0YVtpbmRleF0pIDogZGF0YVtpbmRleF07XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5zZXRGb250U2l6ZShzZXJpZXMudGV4dFNpemUgfHwgY29uZmlnLmZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHNlcmllcy50ZXh0Q29sb3IgfHwgJyM2NjY2NjYnKTtcbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbaW5kZXhdXG4gICAgICBpZiAodHlwZW9mIGRhdGFbaW5kZXhdID09PSAnb2JqZWN0JyAmJiBkYXRhW2luZGV4XSAhPT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IGRhdGFbaW5kZXhdLnZhbHVlXG4gICAgICB9XG4gICAgICB2YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQodmFsdWUpIDogdmFsdWU7XG4gICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhmb3JtYXRWYWwpLCBpdGVtLnggLSBtZWFzdXJlVGV4dChmb3JtYXRWYWwsIHNlcmllcy50ZXh0U2l6ZSB8fCBjb25maWcuZm9udFNpemUpIC8gMiwgaXRlbS55IC1cbiAgICAgICAgMik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGRyYXdHYXVnZUxhYmVsKGdhdWdlT3B0aW9uLCByYWRpdXMsIGNlbnRlclBvc2l0aW9uLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgcmFkaXVzIC09IGdhdWdlT3B0aW9uLndpZHRoIC8gMiArIGNvbmZpZy5nYXVnZUxhYmVsVGV4dE1hcmdpbjtcblxuICBsZXQgdG90YWxBbmdsZSA9IGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgLSBnYXVnZU9wdGlvbi5lbmRBbmdsZSArIDE7XG4gIGxldCBzcGxpdEFuZ2xlID0gdG90YWxBbmdsZSAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlcjtcbiAgbGV0IHRvdGFsTnVtYmVyID0gZ2F1Z2VPcHRpb24uZW5kTnVtYmVyIC0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XG4gIGxldCBzcGxpdE51bWJlciA9IHRvdGFsTnVtYmVyIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyO1xuICBsZXQgbm93QW5nbGUgPSBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xuICBsZXQgbm93TnVtYmVyID0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyICsgMTsgaSsrKSB7XG4gICAgdmFyIHBvcyA9IHtcbiAgICAgIHg6IHJhZGl1cyAqIE1hdGguY29zKG5vd0FuZ2xlICogTWF0aC5QSSksXG4gICAgICB5OiByYWRpdXMgKiBNYXRoLnNpbihub3dBbmdsZSAqIE1hdGguUEkpXG4gICAgfTtcbiAgICB2YXIgbGFiZWxUZXh0ID0gZ2F1Z2VPcHRpb24ubGFiZWxGb3JtYXQgPyBnYXVnZU9wdGlvbi5sYWJlbEZvcm1hdChub3dOdW1iZXIpIDogbm93TnVtYmVyO1xuICAgIHBvcy54ICs9IGNlbnRlclBvc2l0aW9uLnggLSBtZWFzdXJlVGV4dChsYWJlbFRleHQpIC8gMjtcbiAgICBwb3MueSArPSBjZW50ZXJQb3NpdGlvbi55O1xuICAgIHZhciBzdGFydFggPSBwb3MueDtcbiAgICB2YXIgc3RhcnRZID0gcG9zLnk7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoZ2F1Z2VPcHRpb24ubGFiZWxDb2xvciB8fCAnIzY2NjY2NicpO1xuICAgIGNvbnRleHQuZmlsbFRleHQobGFiZWxUZXh0LCBzdGFydFgsIHN0YXJ0WSArIGNvbmZpZy5mb250U2l6ZSAvIDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgIG5vd0FuZ2xlICs9IHNwbGl0QW5nbGU7XG4gICAgaWYgKG5vd0FuZ2xlID49IDIpIHtcbiAgICAgIG5vd0FuZ2xlID0gbm93QW5nbGUgJSAyO1xuICAgIH1cbiAgICBub3dOdW1iZXIgKz0gc3BsaXROdW1iZXI7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBkcmF3UmFkYXJMYWJlbChhbmdsZUxpc3QsIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuICB2YXIgcmFkYXJPcHRpb24gPSBvcHRzLmV4dHJhLnJhZGFyIHx8IHt9O1xuICByYWRpdXMgKz0gY29uZmlnLnJhZGFyTGFiZWxUZXh0TWFyZ2luO1xuXG4gIGFuZ2xlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGFuZ2xlLCBpbmRleCkge1xuICAgIHZhciBwb3MgPSB7XG4gICAgICB4OiByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXG4gICAgICB5OiByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSlcbiAgICB9O1xuICAgIHZhciBwb3NSZWxhdGl2ZUNhbnZhcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHBvcy54LCBwb3MueSwgY2VudGVyUG9zaXRpb24pO1xuICAgIHZhciBzdGFydFggPSBwb3NSZWxhdGl2ZUNhbnZhcy54O1xuICAgIHZhciBzdGFydFkgPSBwb3NSZWxhdGl2ZUNhbnZhcy55O1xuICAgIGlmICh1dGlsLmFwcHJveGltYXRlbHlFcXVhbChwb3MueCwgMCkpIHtcbiAgICAgIHN0YXJ0WCAtPSBtZWFzdXJlVGV4dChvcHRzLmNhdGVnb3JpZXNbaW5kZXhdIHx8ICcnKSAvIDI7XG4gICAgfSBlbHNlIGlmIChwb3MueCA8IDApIHtcbiAgICAgIHN0YXJ0WCAtPSBtZWFzdXJlVGV4dChvcHRzLmNhdGVnb3JpZXNbaW5kZXhdIHx8ICcnKTtcbiAgICB9XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUocmFkYXJPcHRpb24ubGFiZWxDb2xvciB8fCAnIzY2NjY2NicpO1xuICAgIGNvbnRleHQuZmlsbFRleHQob3B0cy5jYXRlZ29yaWVzW2luZGV4XSB8fCAnJywgc3RhcnRYLCBzdGFydFkgKyBjb25maWcuZm9udFNpemUgLyAyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlcikge1xuICB2YXIgbGluZVJhZGl1cyA9IGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nO1xuICB2YXIgdGV4dE9iamVjdENvbGxlY3Rpb24gPSBbXTtcbiAgdmFyIGxhc3RUZXh0T2JqZWN0ID0gbnVsbDtcblxuICB2YXIgc2VyaWVzQ29udmVydCA9IHNlcmllcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHZhciB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCg0KSAqIDEwMCkgKyclJztcbiAgICBpZihpdGVtLl9yb3NlX3Byb3BvcnRpb25fKSBpdGVtLl9wcm9wb3J0aW9uXz1pdGVtLl9yb3NlX3Byb3BvcnRpb25fO1xuICAgIHZhciBhcmMgPSAyICogTWF0aC5QSSAtIChpdGVtLl9zdGFydF8gKyAyICogTWF0aC5QSSAqIGl0ZW0uX3Byb3BvcnRpb25fIC8gMik7XG4gICAgdmFyIGNvbG9yID0gaXRlbS5jb2xvcjtcbiAgICB2YXIgcmFkaXVzID0gaXRlbS5fcmFkaXVzXztcbiAgICByZXR1cm4ge1xuICAgICAgYXJjOiBhcmMsXG4gICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICB0ZXh0Q29sb3I6IGl0ZW0udGV4dENvbG9yLFxuICAgICAgdGV4dFNpemU6IGl0ZW0udGV4dFNpemUsXG4gICAgfTtcbiAgfSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzQ29udmVydC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gc2VyaWVzQ29udmVydFtpXTtcbiAgICAvLyBsaW5lIGVuZFxuICAgIGxldCBvcmdpblgxID0gTWF0aC5jb3MoaXRlbS5hcmMpICogKGl0ZW0ucmFkaXVzICsgbGluZVJhZGl1cyk7XG4gICAgbGV0IG9yZ2luWTEgPSBNYXRoLnNpbihpdGVtLmFyYykgKiAoaXRlbS5yYWRpdXMgKyBsaW5lUmFkaXVzKTtcblxuICAgIC8vIGxpbmUgc3RhcnRcbiAgICBsZXQgb3JnaW5YMiA9IE1hdGguY29zKGl0ZW0uYXJjKSAqIGl0ZW0ucmFkaXVzO1xuICAgIGxldCBvcmdpblkyID0gTWF0aC5zaW4oaXRlbS5hcmMpICogaXRlbS5yYWRpdXM7XG5cbiAgICAvLyB0ZXh0IHN0YXJ0XG4gICAgbGV0IG9yZ2luWDMgPSBvcmdpblgxID49IDAgPyBvcmdpblgxICsgY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgOiBvcmdpblgxIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmc7XG4gICAgbGV0IG9yZ2luWTMgPSBvcmdpblkxO1xuICAgIGxldCB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChpdGVtLnRleHQpO1xuICAgIGxldCBzdGFydFkgPSBvcmdpblkzO1xuXG4gICAgaWYgKGxhc3RUZXh0T2JqZWN0ICYmIHV0aWwuaXNTYW1lWENvb3JkaW5hdGVBcmVhKGxhc3RUZXh0T2JqZWN0LnN0YXJ0LCB7XG4gICAgICAgIHg6IG9yZ2luWDNcbiAgICAgIH0pKSB7XG4gICAgICBpZiAob3JnaW5YMyA+IDApIHtcbiAgICAgICAgc3RhcnRZID0gTWF0aC5taW4ob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XG4gICAgICB9IGVsc2UgaWYgKG9yZ2luWDEgPCAwKSB7XG4gICAgICAgIHN0YXJ0WSA9IE1hdGgubWF4KG9yZ2luWTMsIGxhc3RUZXh0T2JqZWN0LnN0YXJ0LnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9yZ2luWTMgPiAwKSB7XG4gICAgICAgICAgc3RhcnRZID0gTWF0aC5tYXgob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRZID0gTWF0aC5taW4ob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9yZ2luWDMgPCAwKSB7XG4gICAgICBvcmdpblgzIC09IHRleHRXaWR0aDtcbiAgICB9XG5cbiAgICBsZXQgdGV4dE9iamVjdCA9IHtcbiAgICAgIGxpbmVTdGFydDoge1xuICAgICAgICB4OiBvcmdpblgyLFxuICAgICAgICB5OiBvcmdpblkyXG4gICAgICB9LFxuICAgICAgbGluZUVuZDoge1xuICAgICAgICB4OiBvcmdpblgxLFxuICAgICAgICB5OiBvcmdpblkxXG4gICAgICB9LFxuICAgICAgc3RhcnQ6IHtcbiAgICAgICAgeDogb3JnaW5YMyxcbiAgICAgICAgeTogc3RhcnRZXG4gICAgICB9LFxuICAgICAgd2lkdGg6IHRleHRXaWR0aCxcbiAgICAgIGhlaWdodDogY29uZmlnLmZvbnRTaXplLFxuICAgICAgdGV4dDogaXRlbS50ZXh0LFxuICAgICAgY29sb3I6IGl0ZW0uY29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IGl0ZW0udGV4dENvbG9yLFxuICAgICAgdGV4dFNpemU6IGl0ZW0udGV4dFNpemVcbiAgICB9O1xuICAgIGxhc3RUZXh0T2JqZWN0ID0gYXZvaWRDb2xsaXNpb24odGV4dE9iamVjdCwgbGFzdFRleHRPYmplY3QpO1xuICAgIHRleHRPYmplY3RDb2xsZWN0aW9uLnB1c2gobGFzdFRleHRPYmplY3QpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0T2JqZWN0Q29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gdGV4dE9iamVjdENvbGxlY3Rpb25baV07XG4gICAgbGV0IGxpbmVTdGFydFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lU3RhcnQueCwgaXRlbS5saW5lU3RhcnQueSwgY2VudGVyKTtcbiAgICBsZXQgbGluZUVuZFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lRW5kLngsIGl0ZW0ubGluZUVuZC55LCBjZW50ZXIpO1xuICAgIGxldCB0ZXh0UG9zaXRpb24gPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihpdGVtLnN0YXJ0LngsIGl0ZW0uc3RhcnQueSwgY2VudGVyKTtcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xuICAgIGNvbnRleHQubW92ZVRvKGxpbmVTdGFydFBvaXN0aW9uLngsIGxpbmVTdGFydFBvaXN0aW9uLnkpO1xuICAgIGxldCBjdXJ2ZVN0YXJ0WCA9IGl0ZW0uc3RhcnQueCA8IDAgPyB0ZXh0UG9zaXRpb24ueCArIGl0ZW0ud2lkdGggOiB0ZXh0UG9zaXRpb24ueDtcbiAgICBsZXQgdGV4dFN0YXJ0WCA9IGl0ZW0uc3RhcnQueCA8IDAgPyB0ZXh0UG9zaXRpb24ueCAtIDUgOiB0ZXh0UG9zaXRpb24ueCArIDU7XG4gICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKGxpbmVFbmRQb2lzdGlvbi54LCBsaW5lRW5kUG9pc3Rpb24ueSwgY3VydmVTdGFydFgsIHRleHRQb3NpdGlvbi55KTtcbiAgICBjb250ZXh0Lm1vdmVUbyhsaW5lU3RhcnRQb2lzdGlvbi54LCBsaW5lU3RhcnRQb2lzdGlvbi55KTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0Lm1vdmVUbyh0ZXh0UG9zaXRpb24ueCArIGl0ZW0ud2lkdGgsIHRleHRQb3NpdGlvbi55KTtcbiAgICBjb250ZXh0LmFyYyhjdXJ2ZVN0YXJ0WCwgdGV4dFBvc2l0aW9uLnksIDIsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRGb250U2l6ZShpdGVtLnRleHRTaXplIHx8IGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS50ZXh0Q29sb3IgfHwgJyM2NjY2NjYnKTtcbiAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0udGV4dCwgdGV4dFN0YXJ0WCwgdGV4dFBvc2l0aW9uLnkgKyAzKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3VG9vbFRpcFNwbGl0TGluZShvZmZzZXRYLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBvcHRzLmV4dHJhLnRvb2x0aXAgfHwge307XG4gIHRvb2xUaXBPcHRpb24uZ3JpZFR5cGUgPSB0b29sVGlwT3B0aW9uLmdyaWRUeXBlID09IHVuZGVmaW5lZCA/ICdzb2xpZCcgOiB0b29sVGlwT3B0aW9uLmdyaWRUeXBlO1xuICB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGggPSB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGggPT0gdW5kZWZpbmVkID8gNCA6IHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aDtcbiAgdmFyIHN0YXJ0WSA9IG9wdHMuYXJlYVswXTtcbiAgdmFyIGVuZFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcblxuICBpZiAodG9vbFRpcE9wdGlvbi5ncmlkVHlwZSA9PSAnZGFzaCcpIHtcbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFt0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGgsIHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aF0pO1xuICB9XG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5ncmlkQ29sb3IgfHwgJyNjY2NjY2MnKTtcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQubW92ZVRvKG9mZnNldFgsIHN0YXJ0WSk7XG4gIGNvbnRleHQubGluZVRvKG9mZnNldFgsIGVuZFkpO1xuICBjb250ZXh0LnN0cm9rZSgpO1xuICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcblxuICBpZiAodG9vbFRpcE9wdGlvbi54QXhpc0xhYmVsKSB7XG4gICAgbGV0IGxhYmVsVGV4dCA9IG9wdHMuY2F0ZWdvcmllc1tvcHRzLnRvb2x0aXAuaW5kZXhdO1xuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgICBsZXQgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQobGFiZWxUZXh0LCBjb25maWcuZm9udFNpemUpO1xuXG4gICAgbGV0IHRleHRYID0gb2Zmc2V0WCAtIDAuNSAqIHRleHRXaWR0aDtcbiAgICBsZXQgdGV4dFkgPSBlbmRZO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5sYWJlbEJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kLCB0b29sVGlwT3B0aW9uLmxhYmVsQmdPcGFjaXR5IHx8IGNvbmZpZy50b29sVGlwT3BhY2l0eSkpO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kKTtcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LnJlY3QodGV4dFggLSBjb25maWcudG9vbFRpcFBhZGRpbmcsIHRleHRZLCB0ZXh0V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgY29udGV4dC5maWxsKCk7XG5cbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsRm9udENvbG9yIHx8IGNvbmZpZy5mb250Q29sb3IpO1xuICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGxhYmVsVGV4dCksIHRleHRYLCB0ZXh0WSArIGNvbmZpZy50b29sVGlwUGFkZGluZyArIGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdNYXJrTGluZShtaW5SYW5nZSwgbWF4UmFuZ2UsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuICBsZXQgbWFya0xpbmVPcHRpb24gPSBhc3NpZ24oe30sIHtcbiAgICB0eXBlOiAnc29saWQnLFxuICAgIGRhc2hMZW5ndGg6IDQsXG4gICAgZGF0YTogW11cbiAgfSwgb3B0cy5leHRyYS5tYXJrTGluZSk7XG4gIGxldCBzdGFydFggPSBvcHRzLmFyZWFbM107XG4gIGxldCBlbmRYID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcbiAgbGV0IHBvaW50cyA9IGNhbE1hcmtMaW5lRGF0YShtaW5SYW5nZSwgbWF4UmFuZ2UsIG1hcmtMaW5lT3B0aW9uLmRhdGEsIG9wdHMpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSBhc3NpZ24oe30sIHtcbiAgICAgIGxpbmVDb2xvcjogJyNERTRBNDInLFxuICAgICAgc2hvd0xhYmVsOiBmYWxzZSxcbiAgICAgIGxhYmVsRm9udENvbG9yOiAnIzY2NjY2NicsXG4gICAgICBsYWJlbEJnQ29sb3I6ICcjREZFOEZGJyxcbiAgICAgIGxhYmVsQmdPcGFjaXR5OiAwLjgsXG4gICAgICB5QXhpc0luZGV4OiAwXG4gICAgfSwgcG9pbnRzW2ldKTtcblxuICAgIGlmIChtYXJrTGluZU9wdGlvbi50eXBlID09ICdkYXNoJykge1xuICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChbbWFya0xpbmVPcHRpb24uZGFzaExlbmd0aCwgbWFya0xpbmVPcHRpb24uZGFzaExlbmd0aF0pO1xuICAgIH1cbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0ubGluZUNvbG9yKTtcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcbiAgICBjb250ZXh0LmxpbmVUbyhlbmRYLCBpdGVtLnkpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XG4gICAgaWYgKGl0ZW0uc2hvd0xhYmVsKSB7XG4gICAgICBsZXQgbGFiZWxUZXh0ID0gb3B0cy55QXhpcy5mb3JtYXQgPyBvcHRzLnlBeGlzLmZvcm1hdChOdW1iZXIoaXRlbS52YWx1ZSkpIDogaXRlbS52YWx1ZTtcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgICAgIGxldCB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChsYWJlbFRleHQsIGNvbmZpZy5mb250U2l6ZSk7XG4gICAgICBsZXQgYmdTdGFydFggPSBvcHRzLnBhZGRpbmdbM10gKyBjb25maWcueUF4aXNUaXRsZVdpZHRoIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nO1xuICAgICAgbGV0IGJnRW5kWCA9IE1hdGgubWF4KG9wdHMuYXJlYVszXSwgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XG4gICAgICBsZXQgYmdXaWR0aCA9IGJnRW5kWCAtIGJnU3RhcnRYO1xuXG4gICAgICBsZXQgdGV4dFggPSBiZ1N0YXJ0WCArIChiZ1dpZHRoIC0gdGV4dFdpZHRoKSAvIDI7XG4gICAgICBsZXQgdGV4dFkgPSBpdGVtLnk7XG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihpdGVtLmxhYmVsQmdDb2xvciwgaXRlbS5sYWJlbEJnT3BhY2l0eSkpO1xuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmxhYmVsQmdDb2xvcik7XG4gICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LnJlY3QoYmdTdGFydFgsIHRleHRZIC0gMC41ICogY29uZmlnLmZvbnRTaXplIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nLCBiZ1dpZHRoLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgY29udGV4dC5maWxsKCk7XG5cbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmxhYmVsRm9udENvbG9yKTtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGxhYmVsVGV4dCksIHRleHRYLCB0ZXh0WSArIDAuNSAqIGNvbmZpZy5mb250U2l6ZSk7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3VG9vbFRpcEhvcml6ZW50YWxMaW5lKG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKSB7XG4gIHZhciB0b29sVGlwT3B0aW9uID0gYXNzaWduKHt9LCB7XG4gICAgZ3JpZFR5cGU6ICdzb2xpZCcsXG4gICAgZGFzaExlbmd0aDogNFxuICB9LCBvcHRzLmV4dHJhLnRvb2x0aXApO1xuXG4gIHZhciBzdGFydFggPSBvcHRzLmFyZWFbM107XG4gIHZhciBlbmRYID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcblxuICBpZiAodG9vbFRpcE9wdGlvbi5ncmlkVHlwZSA9PSAnZGFzaCcpIHtcbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFt0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGgsIHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aF0pO1xuICB9XG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5ncmlkQ29sb3IgfHwgJyNjY2NjY2MnKTtcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgb3B0cy50b29sdGlwLm9mZnNldC55KTtcbiAgY29udGV4dC5saW5lVG8oZW5kWCwgb3B0cy50b29sdGlwLm9mZnNldC55KTtcbiAgY29udGV4dC5zdHJva2UoKTtcbiAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XG5cbiAgaWYgKHRvb2xUaXBPcHRpb24ueUF4aXNMYWJlbCkge1xuICAgIGxldCBsYWJlbFRleHQgPSBjYWxUb29sdGlwWUF4aXNEYXRhKG9wdHMudG9vbHRpcC5vZmZzZXQueSwgb3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgZWFjaFNwYWNpbmcpO1xuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgICBsZXQgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQobGFiZWxUZXh0LCBjb25maWcuZm9udFNpemUpO1xuICAgIGxldCBiZ1N0YXJ0WCA9IG9wdHMucGFkZGluZ1szXSArIGNvbmZpZy55QXhpc1RpdGxlV2lkdGggLSBjb25maWcudG9vbFRpcFBhZGRpbmc7XG4gICAgbGV0IGJnRW5kWCA9IE1hdGgubWF4KG9wdHMuYXJlYVszXSwgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XG4gICAgbGV0IGJnV2lkdGggPSBiZ0VuZFggLSBiZ1N0YXJ0WDtcblxuICAgIGxldCB0ZXh0WCA9IGJnU3RhcnRYICsgKGJnV2lkdGggLSB0ZXh0V2lkdGgpIC8gMjtcbiAgICBsZXQgdGV4dFkgPSBvcHRzLnRvb2x0aXAub2Zmc2V0Lnk7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYih0b29sVGlwT3B0aW9uLmxhYmVsQmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQsIHRvb2xUaXBPcHRpb24ubGFiZWxCZ09wYWNpdHkgfHwgY29uZmlnLnRvb2xUaXBPcGFjaXR5KSk7XG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsQmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQpO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQucmVjdChiZ1N0YXJ0WCwgdGV4dFkgLSAwLjUgKiBjb25maWcuZm9udFNpemUgLSBjb25maWcudG9vbFRpcFBhZGRpbmcsIGJnV2lkdGgsIGNvbmZpZy5mb250U2l6ZSArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHRvb2xUaXBPcHRpb24ubGFiZWxGb250Q29sb3IgfHwgY29uZmlnLmZvbnRDb2xvcik7XG4gICAgY29udGV4dC5maWxsVGV4dChsYWJlbFRleHQsIHRleHRYLCB0ZXh0WSArIDAuNSAqIGNvbmZpZy5mb250U2l6ZSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdUb29sVGlwU3BsaXRBcmVhKG9mZnNldFgsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcpIHtcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBhc3NpZ24oe30sIHtcbiAgICBhY3RpdmVCZ0NvbG9yOiAnIzAwMDAwMCcsXG4gICAgYWN0aXZlQmdPcGFjaXR5OiAwLjA4XG4gIH0sIG9wdHMuZXh0cmEudG9vbHRpcCk7XG4gIHZhciBzdGFydFkgPSBvcHRzLmFyZWFbMF07XG4gIHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24uYWN0aXZlQmdDb2xvciwgdG9vbFRpcE9wdGlvbi5hY3RpdmVCZ09wYWNpdHkpKTtcbiAgY29udGV4dC5yZWN0KG9mZnNldFggLSBlYWNoU3BhY2luZyAvIDIsIHN0YXJ0WSwgZWFjaFNwYWNpbmcsIGVuZFkgLSBzdGFydFkpO1xuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICBjb250ZXh0LmZpbGwoKTtcbn1cblxuZnVuY3Rpb24gZHJhd1Rvb2xUaXAodGV4dExpc3QsIG9mZnNldCwgb3B0cywgY29uZmlnLCBjb250ZXh0LCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpIHtcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBhc3NpZ24oe30sIHtcbiAgICBiZ0NvbG9yOiAnIzAwMDAwMCcsXG4gICAgYmdPcGFjaXR5OiAwLjcsXG4gICAgZm9udENvbG9yOiAnI0ZGRkZGRidcbiAgfSwgb3B0cy5leHRyYS50b29sdGlwKTtcbiAgdmFyIGxlZ2VuZFdpZHRoID0gNCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgdmFyIGxlZ2VuZE1hcmdpblJpZ2h0ID0gNSAqIG9wdHMucGl4ZWxSYXRpbztcbiAgdmFyIGFycm93V2lkdGggPSA4ICogb3B0cy5waXhlbFJhdGlvO1xuICB2YXIgaXNPdmVyUmlnaHRCb3JkZXIgPSBmYWxzZTtcbiAgaWYgKG9wdHMudHlwZSA9PSAnbGluZScgfHwgb3B0cy50eXBlID09ICdhcmVhJyB8fCBvcHRzLnR5cGUgPT0gJ2NhbmRsZScgfHwgb3B0cy50eXBlID09ICdtaXgnKSB7XG4gICAgZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xuICB9XG5cbiAgb2Zmc2V0ID0gYXNzaWduKHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfSwgb2Zmc2V0KTtcbiAgb2Zmc2V0LnkgLT0gOCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgdmFyIHRleHRXaWR0aCA9IHRleHRMaXN0Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIG1lYXN1cmVUZXh0KGl0ZW0udGV4dCwgY29uZmlnLmZvbnRTaXplKTtcbiAgfSk7XG4gIHZhciB0b29sVGlwV2lkdGggPSBsZWdlbmRXaWR0aCArIGxlZ2VuZE1hcmdpblJpZ2h0ICsgNCAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIE1hdGgubWF4LmFwcGx5KG51bGwsIHRleHRXaWR0aCk7XG4gIHZhciB0b29sVGlwSGVpZ2h0ID0gMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIHRleHRMaXN0Lmxlbmd0aCAqIGNvbmZpZy50b29sVGlwTGluZUhlaWdodDtcblxuICAvLyBpZiBiZXlvbmQgdGhlIHJpZ2h0IGJvcmRlclxuICBpZiAob2Zmc2V0LnggLSBNYXRoLmFicyhvcHRzLl9zY3JvbGxEaXN0YW5jZV8pICsgYXJyb3dXaWR0aCArIHRvb2xUaXBXaWR0aCA+IG9wdHMud2lkdGgpIHtcbiAgICBpc092ZXJSaWdodEJvcmRlciA9IHRydWU7XG4gIH1cbiAgaWYgKHRvb2xUaXBIZWlnaHQgKyBvZmZzZXQueSA+IG9wdHMuaGVpZ2h0KSB7XG4gICAgb2Zmc2V0LnkgPSBvcHRzLmhlaWdodCAtIHRvb2xUaXBIZWlnaHQ7XG4gIH1cbiAgLy8gZHJhdyBiYWNrZ3JvdW5kIHJlY3RcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5iZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5iZ09wYWNpdHkgfHwgY29uZmlnLnRvb2xUaXBPcGFjaXR5KSk7XG4gIGlmIChpc092ZXJSaWdodEJvcmRlcikge1xuICAgIGNvbnRleHQubW92ZVRvKG9mZnNldC54LCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8gLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55KTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGggLSBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55KTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGggLSBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55ICsgdG9vbFRpcEhlaWdodCk7XG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54IC0gYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyArIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54LCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0Lm1vdmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvIC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSk7XG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSk7XG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyB0b29sVGlwSGVpZ2h0KTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCArIGFycm93V2lkdGgsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8gKyA1ICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gIH1cblxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICBjb250ZXh0LmZpbGwoKTtcblxuICAvLyBkcmF3IGxlZ2VuZFxuICB0ZXh0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgaWYgKGl0ZW0uY29sb3IgIT09IG51bGwpIHtcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcbiAgICAgIHZhciBzdGFydFggPSBvZmZzZXQueCArIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nO1xuICAgICAgdmFyIHN0YXJ0WSA9IG9mZnNldC55ICsgKGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAtIGNvbmZpZy5mb250U2l6ZSkgLyAyICsgY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0ICogaW5kZXggK1xuICAgICAgICBjb25maWcudG9vbFRpcFBhZGRpbmcgKyAxO1xuICAgICAgaWYgKGlzT3ZlclJpZ2h0Qm9yZGVyKSB7XG4gICAgICAgIHN0YXJ0WCA9IG9mZnNldC54IC0gdG9vbFRpcFdpZHRoIC0gYXJyb3dXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmc7XG4gICAgICB9XG4gICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZLCBsZWdlbmRXaWR0aCwgY29uZmlnLmZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBkcmF3IHRleHQgbGlzdFxuXG4gIHRleHRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICB2YXIgc3RhcnRYID0gb2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIGxlZ2VuZFdpZHRoICsgbGVnZW5kTWFyZ2luUmlnaHQ7XG4gICAgaWYgKGlzT3ZlclJpZ2h0Qm9yZGVyKSB7XG4gICAgICBzdGFydFggPSBvZmZzZXQueCAtIHRvb2xUaXBXaWR0aCAtIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgK2xlZ2VuZFdpZHRoICsgbGVnZW5kTWFyZ2luUmlnaHQ7XG4gICAgfVxuICAgIHZhciBzdGFydFkgPSBvZmZzZXQueSArIChjb25maWcudG9vbFRpcExpbmVIZWlnaHQgLSBjb25maWcuZm9udFNpemUpIC8gMiArIGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAqIGluZGV4ICtcbiAgICAgIGNvbmZpZy50b29sVGlwUGFkZGluZztcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmZvbnRDb2xvcik7XG4gICAgY29udGV4dC5maWxsVGV4dChpdGVtLnRleHQsIHN0YXJ0WCwgc3RhcnRZICsgY29uZmlnLmZvbnRTaXplKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkcmF3WUF4aXNUaXRsZSh0aXRsZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBzdGFydFggPSBjb25maWcueEF4aXNIZWlnaHQgKyAob3B0cy5oZWlnaHQgLSBjb25maWcueEF4aXNIZWlnaHQgLSBtZWFzdXJlVGV4dCh0aXRsZSkpIC8gMjtcbiAgY29udGV4dC5zYXZlKCk7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy55QXhpcy50aXRsZUZvbnRDb2xvciB8fCAnIzMzMzMzMycpO1xuICBjb250ZXh0LnRyYW5zbGF0ZSgwLCBvcHRzLmhlaWdodCk7XG4gIGNvbnRleHQucm90YXRlKC05MCAqIE1hdGguUEkgLyAxODApO1xuICBjb250ZXh0LmZpbGxUZXh0KHRpdGxlLCBzdGFydFgsIG9wdHMucGFkZGluZ1szXSArIDAuNSAqIGNvbmZpZy5mb250U2l6ZSk7XG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIGNvbnRleHQuc3Ryb2tlKCk7XG4gIGNvbnRleHQucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiBkcmF3Q29sdW1uRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcbiAgbGV0IHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzKTtcbiAgbGV0IHhBeGlzRGF0YSA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSxcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcbiAgbGV0IGNvbHVtbk9wdGlvbiA9IGFzc2lnbih7fSwge1xuICAgIHR5cGU6ICdncm91cCcsXG4gICAgd2lkdGg6IGVhY2hTcGFjaW5nIC8gMixcbiAgICBtZXRlcjoge1xuICAgICAgYm9yZGVyOiA0LFxuICAgICAgZmlsbENvbG9yOiAnI0ZGRkZGRidcbiAgICB9XG4gIH0sIG9wdHMuZXh0cmEuY29sdW1uKTtcbiAgbGV0IG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xuICBsZXQgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xuXG4gIGNvbnRleHQuc2F2ZSgpO1xuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XG4gIH1cbiAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XG4gICAgZHJhd1Rvb2xUaXBTcGxpdEFyZWEob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nKTtcbiAgfVxuXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XG4gICAgc3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSkge1xuICAgICAgY2FzZSAnZ3JvdXAnOlxuICAgICAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcbiAgICAgICAgdmFyIHRvb2x0aXBQb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgc2VyaWVzSW5kZXgsIHNlcmllcywgcHJvY2Vzcyk7XG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHRvb2x0aXBQb2ludHMpO1xuICAgICAgICBwb2ludHMgPSBmaXhDb2x1bWVEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIHNlcmllcy5sZW5ndGgsIHNlcmllc0luZGV4LCBjb25maWcsIG9wdHMpO1xuICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSlcbiAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgICAgICB2YXIgc3RhcnRYID0gaXRlbS54IC0gaXRlbS53aWR0aCAvIDI7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkgLSBvcHRzLmFyZWFbMl07XG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgtMSwgaXRlbS55KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCtpdGVtLndpZHRoLTIsaXRlbS55KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCtpdGVtLndpZHRoLTIsb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0pO1xuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCxpdGVtLnkpO1xuICAgICAgICAgICAgLy9jb250ZXh0LnJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RhY2snOlxuICAgICAgICAvLyDnu5jliLbloIblj6DmlbDmja7lm75cbiAgICAgICAgdmFyIHBvaW50cyA9IGdldFN0YWNrRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLFxuICAgICAgICAgIHNlcmllc0luZGV4LFxuICAgICAgICAgIHNlcmllcywgcHJvY2Vzcyk7XG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XG4gICAgICAgIHBvaW50cyA9IGZpeENvbHVtZVN0YWNrRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzLCBzZXJpZXMpO1xuXG4gICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyICsgMTtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcbiAgICAgICAgICAgIHZhciBoZWlnaHQwID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkwIC0gb3B0cy5hcmVhWzJdO1xuICAgICAgICAgICAgaWYgKHNlcmllc0luZGV4ID4gMCkge1xuICAgICAgICAgICAgICBoZWlnaHQgLT0gaGVpZ2h0MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGggLSAyLCBoZWlnaHQpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWV0ZXInOlxuICAgICAgICAvLyDnu5jliLbmuKnluqborqHmlbDmja7lm75cbiAgICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XG4gICAgICAgIHBvaW50cyA9IGZpeENvbHVtZU1ldGVyRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzLCBjb2x1bW5PcHRpb24ubWV0ZXJcbiAgICAgICAgICAuYm9yZGVyKTtcbiAgICAgICAgaWYgKHNlcmllc0luZGV4ID09IDApIHtcbiAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy/nlLvog4zmma/popzoibJcbiAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoY29sdW1uT3B0aW9uLm1ldGVyLmZpbGxDb2xvcik7XG4gICAgICAgICAgICAgIHZhciBzdGFydFggPSBpdGVtLnggLSBpdGVtLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gaXRlbS55IC0gb3B0cy5hcmVhWzJdO1xuICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0ueSk7XG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgICAgICAvL+eUu+i+ueahhue6v1xuICAgICAgICAgICAgICBpZiAoY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciAqIDAuNSwgaXRlbS55ICsgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41LCBpdGVtLnkgKyBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyBpdGVtLndpZHRoIC0gY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciAqIDAuNSwgaXRlbS55ICsgY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciAqIDAuNSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgaXRlbS53aWR0aCAtIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUsIGl0ZW0ueSArIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xuICAgICAgICAgICAgICB2YXIgc3RhcnRYID0gaXRlbS54IC0gaXRlbS53aWR0aCAvIDI7XG4gICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcbiAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xuICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgaXRlbS55LCBpdGVtLndpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcbiAgICAgIHN3aXRjaCAoY29sdW1uT3B0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZ3JvdXAnOlxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgICAgICAgIHBvaW50cyA9IGZpeENvbHVtZURhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgc2VyaWVzLmxlbmd0aCwgc2VyaWVzSW5kZXgsIGNvbmZpZywgb3B0cyk7XG5cbiAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3RhY2snOlxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4LFxuICAgICAgICAgICAgc2VyaWVzLCBwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWV0ZXInOlxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgcmV0dXJuIHtcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXG4gICAgY2FsUG9pbnRzOiBjYWxQb2ludHMsXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nLFxuICAgIG1pblJhbmdlOiBtaW5SYW5nZSxcbiAgICBtYXhSYW5nZTogbWF4UmFuZ2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHJhd0NhbmRsZURhdGFQb2ludHMoc2VyaWVzLCBzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAxO1xuICB2YXIgY2FuZGxlT3B0aW9uID0gYXNzaWduKHt9LCB7XG4gICAgY29sb3I6IHt9LFxuICAgIGF2ZXJhZ2U6IHt9XG4gIH0sIG9wdHMuZXh0cmEuY2FuZGxlKTtcbiAgY2FuZGxlT3B0aW9uLmNvbG9yID0gYXNzaWduKHt9LCB7XG4gICAgdXBMaW5lOiAnI2YwNDg2NCcsXG4gICAgdXBGaWxsOiAnI2YwNDg2NCcsXG4gICAgZG93bkxpbmU6ICcjMmZjMjViJyxcbiAgICBkb3duRmlsbDogJyMyZmMyNWInXG4gIH0sIGNhbmRsZU9wdGlvbi5jb2xvcik7XG4gIGNhbmRsZU9wdGlvbi5hdmVyYWdlID0gYXNzaWduKHt9LCB7XG4gICAgc2hvdzogZmFsc2UsXG4gICAgbmFtZTogW10sXG4gICAgZGF5OiBbXSxcbiAgICBjb2xvcjogY29uZmlnLmNvbG9yc1xuICB9LCBjYW5kbGVPcHRpb24uYXZlcmFnZSk7XG4gIG9wdHMuZXh0cmEuY2FuZGxlID0gY2FuZGxlT3B0aW9uO1xuXG4gIGxldCByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlcyk7XG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXG4gICAgZWFjaFNwYWNpbmcgPSB4QXhpc0RhdGEuZWFjaFNwYWNpbmc7XG5cbiAgbGV0IG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xuICBsZXQgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xuXG4gIGNvbnRleHQuc2F2ZSgpO1xuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XG4gIH1cbiAgLy/nlLvlnYfnur9cbiAgaWYgKGNhbmRsZU9wdGlvbi5hdmVyYWdlLnNob3cpIHtcbiAgICBzZXJpZXNNQS5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgICAgLy9jYWxQb2ludHMucHVzaChwb2ludHMpO1xuICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcblxuICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEpO1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcbiAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICB2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcbiAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKGN0cmxQb2ludC5jdHJBLngsIGN0cmxQb2ludC5jdHJBLnksIGN0cmxQb2ludC5jdHJCLngsIGN0cmxQb2ludC5jdHJCLnksXG4gICAgICAgICAgICAgICAgaXRlbS54LCBpdGVtXG4gICAgICAgICAgICAgICAgLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8v55S7S+e6v1xuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xuICAgIHZhciBwb2ludHMgPSBnZXRDYW5kbGVEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XG4gICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcbiAgICBzcGxpdFBvaW50TGlzdCA9IHNwbGl0UG9pbnRMaXN0WzBdO1xuXG4gICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgLy/lpoLmnpzkuIrmtqhcbiAgICAgIGlmIChkYXRhW2luZGV4XVsxXSAtIGRhdGFbaW5kZXhdWzBdID4gMCkge1xuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci51cExpbmUpO1xuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShjYW5kbGVPcHRpb24uY29sb3IudXBGaWxsKTtcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1szXS54LCBwb2ludHNbM10ueSk7IC8v6aG254K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSk7IC8v5pS255uY5Lit6Ze054K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54IC0gZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMV0ueSk7IC8v5pS255uY5bem5L6n54K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54IC0gZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5bem5L6n54K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Lit6Ze054K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1syXS54LCBwb2ludHNbMl0ueSk7IC8v5bqV54K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Lit6Ze054K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Y+z5L6n54K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMV0ueSk7IC8v5pS255uY5Y+z5L6n54K5XG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSk7IC8v5pS255uY5Lit6Ze054K5XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1szXS54LCBwb2ludHNbM10ueSk7IC8v6aG254K5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci5kb3duTGluZSk7XG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci5kb3duRmlsbCk7XG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOyAvL+mhtueCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCAtIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOW3puS+p+eCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCAtIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOW3puS+p+eCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMl0ueCwgcG9pbnRzWzJdLnkpOyAvL+W6leeCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCArIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOWPs+S+p+eCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCArIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOWPs+S+p+eCuVxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOyAvL+mhtueCuVxuICAgICAgfVxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgcmV0dXJuIHtcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXG4gICAgY2FsUG9pbnRzOiBjYWxQb2ludHMsXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nLFxuICAgIG1pblJhbmdlOiBtaW5SYW5nZSxcbiAgICBtYXhSYW5nZTogbWF4UmFuZ2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHJhd0FyZWFEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xuICB2YXIgYXJlYU9wdGlvbiA9IGFzc2lnbih7fSx7XG4gICAgdHlwZTogJ3N0cmFpZ2h0JyxcbiAgICBvcGFjaXR5OiAwLjIsXG4gICAgYWRkTGluZTogZmFsc2UsXG4gICAgd2lkdGg6IDJcbiAgfSxvcHRzLmV4dHJhLmFyZWEpO1xuXG4gIGxldCByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlcyk7XG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXG4gICAgZWFjaFNwYWNpbmcgPSB4QXhpc0RhdGEuZWFjaFNwYWNpbmc7XG5cbiAgbGV0IG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xuICBsZXQgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcbiAgbGV0IGVuZFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXTtcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xuXG4gIGNvbnRleHQuc2F2ZSgpO1xuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XG4gIH1cblxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xuICAgIGxldCBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xuICAgIGxldCBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XG5cbiAgICBsZXQgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGxpdFBvaW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHBvaW50cyA9IHNwbGl0UG9pbnRMaXN0W2ldO1xuICAgICAgLy8g57uY5Yi25Yy65Z+f5pWwXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCBhcmVhT3B0aW9uLm9wYWNpdHkpKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIGFyZWFPcHRpb24ub3BhY2l0eSkpO1xuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoYXJlYU9wdGlvbi53aWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IGZpcnN0UG9pbnQgPSBwb2ludHNbMF07XG4gICAgICAgIGxldCBsYXN0UG9pbnQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgICAgaWYgKGFyZWFPcHRpb24udHlwZSA9PT0gJ2N1cnZlJykge1xuICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgIGxldCBjdHJsUG9pbnQgPSBjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzLCBpbmRleCAtIDEpO1xuICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxpdGVtLngsIGl0ZW0ueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8obGFzdFBvaW50LngsIGVuZFkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGVuZFkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaXRlbSA9IHBvaW50c1swXTtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcblxuICAgICAgLy/nlLvov57nur9cbiAgICAgIGlmIChhcmVhT3B0aW9uLmFkZExpbmUpIHtcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoYXJlYU9wdGlvbi53aWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xuICAgICAgICAgIGlmIChhcmVhT3B0aW9uLnR5cGUgPT09ICdjdXJ2ZScpIHtcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxpdGVtLngsaXRlbS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy/nlLvngrlcbiAgICBpZiAob3B0cy5kYXRhUG9pbnRTaGFwZSAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBzaGFwZSA9IGNvbmZpZy5kYXRhUG9pbnRTaGFwZVtzZXJpZXNJbmRleCAlIGNvbmZpZy5kYXRhUG9pbnRTaGFwZS5sZW5ndGhdO1xuICAgICAgZHJhd1BvaW50U2hhcGUocG9pbnRzLCBlYWNoU2VyaWVzLmNvbG9yLCBzaGFwZSwgY29udGV4dCwgb3B0cyk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgICAgZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgfSk7XG4gIH1cblxuICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICByZXR1cm4ge1xuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcbiAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmcsXG4gICAgbWluUmFuZ2U6IG1pblJhbmdlLFxuICAgIG1heFJhbmdlOiBtYXhSYW5nZVxuICB9O1xufVxuXG5mdW5jdGlvbiBkcmF3TGluZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XG4gIHZhciBsaW5lT3B0aW9uID0gb3B0cy5leHRyYS5saW5lIHx8IHtcbiAgICB0eXBlOiAnc3RyYWlnaHQnLFxuICAgIHdpZHRoOiAyXG4gIH07XG4gIGxpbmVPcHRpb24udHlwZSA9IGxpbmVPcHRpb24udHlwZSA/IGxpbmVPcHRpb24udHlwZSA6ICdzdHJhaWdodCc7XG4gIGxpbmVPcHRpb24ud2lkdGggPSBsaW5lT3B0aW9uLndpZHRoID8gbGluZU9wdGlvbi53aWR0aCA6IDI7XG5cbiAgbGV0IHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzKTtcbiAgbGV0IHhBeGlzRGF0YSA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSxcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcblxuICB2YXIgbWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XG4gIHZhciBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xuICB2YXIgY2FsUG9pbnRzID0gW107XG5cbiAgY29udGV4dC5zYXZlKCk7XG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcbiAgfVxuXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XG4gICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XG4gICAgY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcbiAgICB2YXIgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xuXG4gICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGxpbmVPcHRpb24ud2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcbiAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xuICAgICAgICBpZiAobGluZU9wdGlvbi50eXBlID09PSAnY3VydmUnKSB7XG4gICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XG4gICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LFxuICAgICAgICAgICAgICAgIGl0ZW0ueCwgaXRlbVxuICAgICAgICAgICAgICAgIC55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgc2hhcGUgPSBjb25maWcuZGF0YVBvaW50U2hhcGVbc2VyaWVzSW5kZXggJSBjb25maWcuZGF0YVBvaW50U2hhcGUubGVuZ3RoXTtcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgc2hhcGUsIGNvbnRleHQsIG9wdHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xuICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XG4gICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnRleHQucmVzdG9yZSgpO1xuXG4gIHJldHVybiB7XG4gICAgeEF4aXNQb2ludHM6IHhBeGlzUG9pbnRzLFxuICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZyxcbiAgICBtaW5SYW5nZTogbWluUmFuZ2UsXG4gICAgbWF4UmFuZ2U6IG1heFJhbmdlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGRyYXdNaXhEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIGxldCBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xuICBsZXQgcmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXMpO1xuICBsZXQgeEF4aXNEYXRhID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLFxuICAgIHhBeGlzUG9pbnRzID0geEF4aXNEYXRhLnhBeGlzUG9pbnRzLFxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xuXG4gIGxldCBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcbiAgbGV0IG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XG4gIGxldCBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XG4gIGxldCBjYWxQb2ludHMgPSBbXTtcblxuICB2YXIgY29sdW1uSW5kZXggPSAwO1xuICB2YXIgY29sdW1uTGVuZ3RoID0gMDtcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICBpZiAoZWFjaFNlcmllcy50eXBlID09ICdjb2x1bW4nKSB7XG4gICAgICBjb2x1bW5MZW5ndGggKz0gMTtcbiAgICB9XG4gIH0pO1xuICBjb250ZXh0LnNhdmUoKTtcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xuICB9XG5cbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcbiAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xuXG4gICAgLy8g57uY5Yi25p+x54q25pWw5o2u5Zu+XG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnY29sdW1uJykge1xuICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW5ndGgsIGNvbHVtbkluZGV4LCBjb25maWcsIG9wdHMpO1xuICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcbiAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKVxuICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyO1xuICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0ueSk7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLTEsIGl0ZW0ueSk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixpdGVtLnkpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCtpdGVtLndpZHRoLTIsb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0pO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCxvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLGl0ZW0ueSk7XG4gICAgICAgICAgLy9jb250ZXh0LnJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29sdW1uSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICAvL+e7mOWItuWMuuWfn+WbvuaVsOaNrlxuXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnYXJlYScpIHtcbiAgICAgIGxldCBzcGxpdFBvaW50TGlzdCA9IHNwbGl0UG9pbnRzKHBvaW50cyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwbGl0UG9pbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwb2ludHMgPSBzcGxpdFBvaW50TGlzdFtpXTtcbiAgICAgICAgLy8g57uY5Yi25Yy65Z+f5pWw5o2uXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIDAuMikpO1xuICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgyICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGZpcnN0UG9pbnQgPSBwb2ludHNbMF07XG4gICAgICAgICAgbGV0IGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgICAgIGlmIChlYWNoU2VyaWVzLnN0eWxlID09PSAnY3VydmUnKSB7XG4gICAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKGN0cmxQb2ludC5jdHJBLngsIGN0cmxQb2ludC5jdHJBLnksIGN0cmxQb2ludC5jdHJCLngsIGN0cmxQb2ludC5jdHJCLnksIGl0ZW0ueCwgaXRlbS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhsYXN0UG9pbnQueCwgZW5kWSk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oZmlyc3RQb2ludC54LCBlbmRZKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGl0ZW0gPSBwb2ludHNbMF07XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGVuZFkpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOe7mOWItuaKmOe6v+aVsOaNruWbvlxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ2xpbmUnKSB7XG4gICAgICB2YXIgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xuICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcbiAgICAgICAgICBpZiAoZWFjaFNlcmllcy5zdHlsZSA9PSAnY3VydmUnKSB7XG4gICAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKGN0cmxQb2ludC5jdHJBLngsIGN0cmxQb2ludC5jdHJBLnksIGN0cmxQb2ludC5jdHJCLngsIGN0cmxQb2ludC5jdHJCLnksXG4gICAgICAgICAgICAgICAgICBpdGVtLngsXG4gICAgICAgICAgICAgICAgICBpdGVtLnkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIOe7mOWItueCueaVsOaNruWbvlxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ3BvaW50Jykge1xuICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24ocG9pbnRzYSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHBvaW50c2EpIHtcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xuICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoJyNGRkZGRkYnKTtcbiAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNhLnggKyAzLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHBvaW50c2EueSk7XG4gICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzYS54LCBwb2ludHNhLnksIDQgKiBvcHRzLnBpeGVsUmF0aW8sIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChlYWNoU2VyaWVzLmFkZFBvaW50ID09IHRydWUgJiYgZWFjaFNlcmllcy50eXBlICE9PSAnY29sdW1uJykge1xuICAgICAgdmFyIHNoYXBlID0gY29uZmlnLmRhdGFQb2ludFNoYXBlW3Nlcmllc0luZGV4ICUgY29uZmlnLmRhdGFQb2ludFNoYXBlLmxlbmd0aF07XG4gICAgICBkcmF3UG9pbnRTaGFwZShwb2ludHMsIGVhY2hTZXJpZXMuY29sb3IsIHNoYXBlLCBjb250ZXh0LCBvcHRzKTtcbiAgICB9XG4gIH0pO1xuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcbiAgICB2YXIgY29sdW1uSW5kZXggPSAwO1xuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xuICAgICAgaWYgKGVhY2hTZXJpZXMudHlwZSAhPT0gJ2NvbHVtbicpIHtcbiAgICAgICAgZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludHMgPSBmaXhDb2x1bWVEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbmd0aCwgY29sdW1uSW5kZXgsIGNvbmZpZywgb3B0cyk7XG4gICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICBjb2x1bW5JbmRleCArPSAxO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICByZXR1cm4ge1xuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcbiAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmcsXG4gICAgbWluUmFuZ2U6IG1pblJhbmdlLFxuICAgIG1heFJhbmdlOiBtYXhSYW5nZVxuICB9O1xufVxuXG5mdW5jdGlvbiBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xuICB2YXIgdG9vbFRpcE9wdGlvbiA9IG9wdHMuZXh0cmEudG9vbHRpcCB8fCB7fTtcbiAgaWYgKHRvb2xUaXBPcHRpb24uaG9yaXplbnRhbExpbmUgJiYgb3B0cy50b29sdGlwICYmIHByb2Nlc3MgPT09IDEgJiYgKG9wdHMudHlwZSA9PSAnbGluZScgfHwgb3B0cy50eXBlID09ICdhcmVhJyB8fCBvcHRzLnR5cGUgPT0gJ2NvbHVtbicgfHwgb3B0cy50eXBlID09ICdjYW5kbGUnIHx8IG9wdHMudHlwZSA9PSAnbWl4JykpIHtcbiAgICBkcmF3VG9vbFRpcEhvcml6ZW50YWxMaW5lKG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKVxuICB9XG4gIGNvbnRleHQuc2F2ZSgpO1xuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XG4gIH1cbiAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XG4gICAgZHJhd1Rvb2xUaXAob3B0cy50b29sdGlwLnRleHRMaXN0LCBvcHRzLnRvb2x0aXAub2Zmc2V0LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cyk7XG4gIH1cbiAgY29udGV4dC5yZXN0b3JlKCk7XG5cbn1cblxuZnVuY3Rpb24gZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXG4gICAgc3RhcnRYID0geEF4aXNEYXRhLnN0YXJ0WCxcbiAgICBlbmRYID0geEF4aXNEYXRhLmVuZFgsXG4gICAgZWFjaFNwYWNpbmcgPSB4QXhpc0RhdGEuZWFjaFNwYWNpbmc7XG4gIHZhciBib3VuZGFyeUdhcD0nY2VudGVyJztcbiAgaWYgKG9wdHMudHlwZSA9PSAnbGluZSd8fG9wdHMudHlwZSA9PSAnYXJlYScpe1xuICAgIGJvdW5kYXJ5R2FwPW9wdHMueEF4aXMuYm91bmRhcnlHYXA7XG4gIH1cbiAgdmFyIHN0YXJ0WSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xuICB2YXIgZW5kWSA9IG9wdHMuYXJlYVswXTtcblxuICAvL+e7mOWItua7muWKqOadoVxuICBpZiAob3B0cy5lbmFibGVTY3JvbGwgJiYgb3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XG4gICAgdmFyIHNjcm9sbFkgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSArIGNvbmZpZy54QXhpc0hlaWdodDtcbiAgICB2YXIgc2Nyb2xsU2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xuICAgIHZhciBzY3JvbGxUb3RhbFdpZHRoID0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIHNjcm9sbFdpZHRoID0gc2Nyb2xsU2NyZWVuV2lkdGggKiBzY3JvbGxTY3JlZW5XaWR0aCAvIHNjcm9sbFRvdGFsV2lkdGg7XG4gICAgdmFyIHNjcm9sbExlZnQgPSAwO1xuICAgIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8pIHtcbiAgICAgIHNjcm9sbExlZnQgPSAtb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICogKHNjcm9sbFNjcmVlbldpZHRoKSAvIHNjcm9sbFRvdGFsV2lkdGg7XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDYgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5zY3JvbGxCYWNrZ3JvdW5kQ29sb3IgfHwgXCIjRUZFQkVGXCIpO1xuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgc2Nyb2xsWSk7XG4gICAgY29udGV4dC5saW5lVG8oZW5kWCwgc2Nyb2xsWSk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDYgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5zY3JvbGxDb2xvciB8fCBcIiNBNkE2QTZcIik7XG4gICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgc2Nyb2xsTGVmdCwgc2Nyb2xsWSk7XG4gICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgc2Nyb2xsTGVmdCArIHNjcm9sbFdpZHRoLCBzY3JvbGxZKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lQ2FwKCdidXR0Jyk7XG4gIH1cblxuICBjb250ZXh0LnNhdmUoKTtcblxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCkge1xuICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XG4gIH1cblxuXG4gIGlmIChvcHRzLnhBeGlzLmRpc2FibGVHcmlkICE9PSB0cnVlKSB7XG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLmdyaWRDb2xvciB8fCBcIiNjY2NjY2NcIik7XG4gICAgY29udGV4dC5zZXRMaW5lQ2FwKCdidXR0Jyk7XG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgaWYgKG9wdHMueEF4aXMuZ3JpZFR5cGUgPT0gJ2Rhc2gnKSB7XG4gICAgICBjb250ZXh0LnNldExpbmVEYXNoKFtvcHRzLnhBeGlzLmRhc2hMZW5ndGgsIG9wdHMueEF4aXMuZGFzaExlbmd0aF0pO1xuICAgIH1cbiAgICBpZiAob3B0cy54QXhpcy50eXBlID09PSAnY2FsaWJyYXRpb24nKSB7XG4gICAgICB4QXhpc1BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0gLSBlYWNoU3BhY2luZyAvIDIsIHN0YXJ0WSk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbSAtIGVhY2hTcGFjaW5nIC8gMiwgc3RhcnRZICsgNCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cy54QXhpcy5ncmlkRXZhbCA9IG9wdHMueEF4aXMuZ3JpZEV2YWwgfHwgMTtcbiAgICAgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ICUgb3B0cy54QXhpcy5ncmlkRXZhbCA9PSAwKSB7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLCBzdGFydFkpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0sIGVuZFkpO1xuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcbiAgfVxuICBcblxuICAvL+S4jee7mOWItljovbRcbiAgaWYgKG9wdHMueEF4aXMuZGlzYWJsZWQgIT09IHRydWUpIHtcbiAgICAvLyDlr7lY6L205YiX6KGo5YGa5oq956iA5aSE55CGXG4gICAgbGV0IHZhbGlkV2lkdGggPSBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdIC0gb3B0cy5wYWRkaW5nWzNdIC0gY29uZmlnLnlBeGlzV2lkdGggLSBjb25maWcueUF4aXNUaXRsZVdpZHRoO1xuICAgIC8v6buY6K6k5YWo6YOo5pi+56S6WOi9tOagh+etvlxuICAgIGxldCBtYXhYQXhpc0xpc3RMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcbiAgICAvL+WmguaenOiuvue9ruS6hljovbTljZXlsY/mlbDph49cbiAgICBpZiAob3B0cy54QXhpcy5sYWJlbENvdW50KSB7XG4gICAgICAvL+WmguaenOiuvue9rljovbTlr4bluqZcbiAgICAgIGlmIChvcHRzLnhBeGlzLml0ZW1Db3VudCkge1xuICAgICAgICBtYXhYQXhpc0xpc3RMZW5ndGggPSBNYXRoLmNlaWwoY2F0ZWdvcmllcy5sZW5ndGggLyBvcHRzLnhBeGlzLml0ZW1Db3VudCAqIG9wdHMueEF4aXMubGFiZWxDb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXhYQXhpc0xpc3RMZW5ndGggPSBvcHRzLnhBeGlzLmxhYmVsQ291bnQ7XG4gICAgICB9XG4gICAgICBtYXhYQXhpc0xpc3RMZW5ndGggLT0gMTtcbiAgICB9XG5cbiAgICBsZXQgcmF0aW8gPSBNYXRoLmNlaWwoY2F0ZWdvcmllcy5sZW5ndGggLyBtYXhYQXhpc0xpc3RMZW5ndGgpO1xuXG4gICAgbGV0IG5ld0NhdGVnb3JpZXMgPSBbXTtcbiAgICBsZXQgY2dMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNnTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpICUgcmF0aW8gIT09IDApIHtcbiAgICAgICAgbmV3Q2F0ZWdvcmllcy5wdXNoKFwiXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3Q2F0ZWdvcmllcy5wdXNoKGNhdGVnb3JpZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBuZXdDYXRlZ29yaWVzW2NnTGVuZ3RoIC0gMV0gPSBjYXRlZ29yaWVzW2NnTGVuZ3RoIC0gMV07XG5cbiAgICB2YXIgeEF4aXNGb250U2l6ZSA9IG9wdHMueEF4aXMuZm9udFNpemUgfHwgY29uZmlnLmZvbnRTaXplO1xuICAgIGlmIChjb25maWcuX3hBeGlzVGV4dEFuZ2xlXyA9PT0gMCkge1xuICAgICAgbmV3Q2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSAtIG1lYXN1cmVUZXh0KGl0ZW0sIHhBeGlzRm9udFNpemUpIC8gMjtcbiAgICAgICAgaWYoYm91bmRhcnlHYXAgPT0gJ2NlbnRlcicpe1xuICAgICAgICAgIG9mZnNldCs9ZWFjaFNwYWNpbmcgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeEF4aXNGb250U2l6ZSk7XG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMueEF4aXMuZm9udENvbG9yIHx8ICcjNjY2NjY2Jyk7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoaXRlbSwgeEF4aXNQb2ludHNbaW5kZXhdICsgb2Zmc2V0LCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplICsgKGNvbmZpZy54QXhpc0hlaWdodCAtIHhBeGlzRm9udFNpemUpIC8gMik7XG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeEF4aXNGb250U2l6ZSk7XG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMueEF4aXMuZm9udENvbG9yIHx8ICcjNjY2NjY2Jyk7XG4gICAgICAgIHZhciB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChpdGVtKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IC0gdGV4dFdpZHRoO1xuICAgICAgICBpZihib3VuZGFyeUdhcCA9PSAnY2VudGVyJyl7XG4gICAgICAgICAgb2Zmc2V0Kz1lYWNoU3BhY2luZyAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jYWxSb3RhdGVUcmFuc2xhdGUgPSBjYWxSb3RhdGVUcmFuc2xhdGUoeEF4aXNQb2ludHNbaW5kZXhdICsgZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplIC8gMiArIDUsIG9wdHMuaGVpZ2h0KSxcbiAgICAgICAgICB0cmFuc1ggPSBfY2FsUm90YXRlVHJhbnNsYXRlLnRyYW5zWCxcbiAgICAgICAgICB0cmFuc1kgPSBfY2FsUm90YXRlVHJhbnNsYXRlLnRyYW5zWTtcblxuICAgICAgICBjb250ZXh0LnJvdGF0ZSgtMSAqIGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfKTtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUodHJhbnNYLCB0cmFuc1kpO1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0sIHhBeGlzUG9pbnRzW2luZGV4XSArIG9mZnNldCwgc3RhcnRZICsgeEF4aXNGb250U2l6ZSArIDUpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjb250ZXh0LnJlc3RvcmUoKTtcblxufVxuXG5mdW5jdGlvbiBkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuICBpZiAob3B0cy55QXhpcy5kaXNhYmxlR3JpZCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc3BhY2luZ1ZhbGlkID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl07XG4gIGxldCBlYWNoU3BhY2luZyA9IHNwYWNpbmdWYWxpZCAvIGNvbmZpZy55QXhpc1NwbGl0O1xuICBsZXQgc3RhcnRYID0gb3B0cy5hcmVhWzNdO1xuICBsZXQgeEF4aXNQb2ludHMgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEueEF4aXNQb2ludHMsXG4gICAgeEF4aXNlYWNoU3BhY2luZyA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YS5lYWNoU3BhY2luZztcbiAgbGV0IFRvdGFsV2lkdGggPSB4QXhpc2VhY2hTcGFjaW5nICogKHhBeGlzUG9pbnRzLmxlbmd0aCAtIDEpO1xuICBsZXQgZW5kWCA9IHN0YXJ0WCArIFRvdGFsV2lkdGg7XG5cbiAgbGV0IHBvaW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZy55QXhpc1NwbGl0ICsgMTsgaSsrKSB7XG4gICAgcG9pbnRzLnB1c2gob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0gLSBlYWNoU3BhY2luZyAqIGkpO1xuICB9XG5cbiAgY29udGV4dC5zYXZlKCk7XG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwKSB7XG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcbiAgfVxuXG4gIGlmIChvcHRzLnlBeGlzLmdyaWRUeXBlID09ICdkYXNoJykge1xuICAgIGNvbnRleHQuc2V0TGluZURhc2goW29wdHMueUF4aXMuZGFzaExlbmd0aCwgb3B0cy55QXhpcy5kYXNoTGVuZ3RoXSk7XG4gIH1cbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnlBeGlzLmdyaWRDb2xvciB8fCBcIiNjY2NjY2NcIik7XG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtKTtcbiAgICBjb250ZXh0LmxpbmVUbyhlbmRYLCBpdGVtKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9KTtcbiAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XG5cbiAgY29udGV4dC5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xuICBpZiAob3B0cy55QXhpcy5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcmFuZ2VzRm9ybWF0ID0gb3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc0Zvcm1hdDtcbiAgdmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xuICB2YXIgZWFjaFNwYWNpbmcgPSBNYXRoLmZsb29yKHNwYWNpbmdWYWxpZCAvIGNvbmZpZy55QXhpc1NwbGl0KTtcbiAgdmFyIHN0YXJ0WCA9IG9wdHMuYXJlYVszXTtcbiAgdmFyIGVuZFggPSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdO1xuICB2YXIgZW5kWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xuICB2YXIgZmlsbEVuZFkgPSBlbmRZICsgY29uZmlnLnhBeGlzSGVpZ2h0O1xuICBpZiAob3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XG4gICAgZmlsbEVuZFkgLT0gMyAqIG9wdHMucGl4ZWxSYXRpbztcbiAgfVxuICAvLyBzZXQgWUF4aXMgYmFja2dyb3VuZFxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmJhY2tncm91bmQgfHwgJyNmZmZmZmYnKTtcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyA8IDApIHtcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHN0YXJ0WCwgZmlsbEVuZFkpO1xuICB9XG4gIGlmKG9wdHMuZW5hYmxlU2Nyb2xsID09IHRydWUpe1xuICAgIGNvbnRleHQuZmlsbFJlY3QoZW5kWCwgMCwgb3B0cy53aWR0aCwgZmlsbEVuZFkpO1xuICB9XG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgdmFyIHBvaW50cyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSBjb25maWcueUF4aXNTcGxpdDsgaSsrKSB7XG4gICAgcG9pbnRzLnB1c2gob3B0cy5hcmVhWzBdICsgZWFjaFNwYWNpbmcgKiBpKTtcbiAgfVxuXG4gIHZhciB5QXhpc0ZvbnRTaXplID0gb3B0cy55QXhpcy5mb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XG4gIHJhbmdlc0Zvcm1hdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIHBvcyA9IHBvaW50c1tpbmRleF0gPyBwb2ludHNbaW5kZXhdIDogZW5kWTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeUF4aXNGb250U2l6ZSk7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy55QXhpcy5mb250Q29sb3IgfHwgJyM2NjY2NjYnKTtcbiAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhpdGVtKSwgb3B0cy5hcmVhWzNdIC0gY29uZmlnLnlBeGlzV2lkdGgsIHBvcyArIHlBeGlzRm9udFNpemUgLyAyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gIH0pO1xuXG4gIGlmIChvcHRzLnlBeGlzLnRpdGxlKSB7XG4gICAgZHJhd1lBeGlzVGl0bGUob3B0cy55QXhpcy50aXRsZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3TGVnZW5kKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBjaGFydERhdGEpIHtcbiAgaWYgKG9wdHMubGVnZW5kLnNob3cgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBsZWdlbmREYXRhID0gY2hhcnREYXRhLmxlZ2VuZERhdGE7XG4gIGxldCBsZWdlbmRMaXN0ID0gbGVnZW5kRGF0YS5wb2ludHM7XG4gIGxldCBsZWdlbmRBcmVhID0gbGVnZW5kRGF0YS5hcmVhO1xuICBsZXQgcGFkZGluZyA9IG9wdHMubGVnZW5kLnBhZGRpbmc7XG4gIGxldCBmb250U2l6ZSA9IG9wdHMubGVnZW5kLmZvbnRTaXplO1xuICBsZXQgc2hhcGVXaWR0aCA9IDE1ICogb3B0cy5waXhlbFJhdGlvO1xuICBsZXQgc2hhcGVSaWdodCA9IDUgKiBvcHRzLnBpeGVsUmF0aW87XG4gIGxldCBpdGVtR2FwID0gb3B0cy5sZWdlbmQuaXRlbUdhcDtcbiAgbGV0IGxpbmVIZWlnaHQgPSBNYXRoLm1heChvcHRzLmxlZ2VuZC5saW5lSGVpZ2h0ICogb3B0cy5waXhlbFJhdGlvLCBmb250U2l6ZSk7XG5cbiAgLy/nlLvog4zmma/lj4rovrnmoYZcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgob3B0cy5sZWdlbmQuYm9yZGVyV2lkdGgpO1xuICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG9wdHMubGVnZW5kLmJvcmRlckNvbG9yKTtcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5sZWdlbmQuYmFja2dyb3VuZENvbG9yKTtcbiAgY29udGV4dC5tb3ZlVG8obGVnZW5kQXJlYS5zdGFydC54LCBsZWdlbmRBcmVhLnN0YXJ0LnkpO1xuICBjb250ZXh0LnJlY3QobGVnZW5kQXJlYS5zdGFydC54LCBsZWdlbmRBcmVhLnN0YXJ0LnksIGxlZ2VuZEFyZWEud2lkdGgsIGxlZ2VuZEFyZWEuaGVpZ2h0KTtcbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgY29udGV4dC5maWxsKCk7XG4gIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgbGVnZW5kTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW1MaXN0LCBsaXN0SW5kZXgpIHtcbiAgICBsZXQgd2lkdGggPSAwO1xuICAgIGxldCBoZWlnaHQgPSAwO1xuICAgIHdpZHRoID0gbGVnZW5kRGF0YS53aWR0aEFycltsaXN0SW5kZXhdO1xuICAgIGhlaWdodCA9IGxlZ2VuZERhdGEuaGVpZ2h0QXJyW2xpc3RJbmRleF07XG4gICAgbGV0IHN0YXJ0WCA9IDA7XG4gICAgbGV0IHN0YXJ0WSA9IDA7XG4gICAgaWYgKG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICd0b3AnIHx8IG9wdHMubGVnZW5kLnBvc2l0aW9uID09ICdib3R0b20nKSB7XG4gICAgICBzdGFydFggPSBsZWdlbmRBcmVhLnN0YXJ0LnggKyAobGVnZW5kQXJlYS53aWR0aCAtIHdpZHRoKSAvIDI7XG4gICAgICBzdGFydFkgPSBsZWdlbmRBcmVhLnN0YXJ0LnkgKyBwYWRkaW5nICsgbGlzdEluZGV4ICogbGluZUhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxpc3RJbmRleCA9PSAwKSB7XG4gICAgICAgIHdpZHRoID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gbGVnZW5kRGF0YS53aWR0aEFycltsaXN0SW5kZXggLSAxXTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0WCA9IGxlZ2VuZEFyZWEuc3RhcnQueCArIHBhZGRpbmcgKyB3aWR0aDtcbiAgICAgIHN0YXJ0WSA9IGxlZ2VuZEFyZWEuc3RhcnQueSArIHBhZGRpbmcgKyAobGVnZW5kQXJlYS5oZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICB9XG5cbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGl0ZW0gPSBpdGVtTGlzdFtpXTtcbiAgICAgIGl0ZW0uYXJlYSA9IFswLCAwLCAwLCAwXTtcbiAgICAgIGl0ZW0uYXJlYVswXSA9IHN0YXJ0WDtcbiAgICAgIGl0ZW0uYXJlYVsxXSA9IHN0YXJ0WTtcbiAgICAgIGl0ZW0uYXJlYVszXSA9IHN0YXJ0WSArIGxpbmVIZWlnaHQ7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uc2hvdyA/IGl0ZW0uY29sb3IgOiBvcHRzLmxlZ2VuZC5oaWRkZW5Db2xvcik7XG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLnNob3cgPyBpdGVtLmNvbG9yIDogb3B0cy5sZWdlbmQuaGlkZGVuQ29sb3IpO1xuICAgICAgc3dpdGNoIChpdGVtLmxlZ2VuZFNoYXBlKSB7XG4gICAgICAgIGNhc2UgJ2xpbmUnOlxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gMiAqIG9wdHMucGl4ZWxSYXRpbywgMTUgKiBvcHRzLnBpeGVsUmF0aW8sIDQgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgMi41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0ICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgMTIuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCArIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkaWFtb25kJzpcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFggKyA3LjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyAyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCArIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDEyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCk7XG4gICAgICAgICAgY29udGV4dC5hcmMoc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0LCA1ICogb3B0cy5waXhlbFJhdGlvLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbywgMTUgKiBvcHRzLnBpeGVsUmF0aW8sIDEwICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8sIDE1ICogb3B0cy5waXhlbFJhdGlvLCAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICB9XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICBzdGFydFggKz0gc2hhcGVXaWR0aCArIHNoYXBlUmlnaHQ7XG4gICAgICBsZXQgZm9udFRyYW5zID0gMC41ICogbGluZUhlaWdodCArIDAuNSAqIGZvbnRTaXplIC0gMjtcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uc2hvdyA/IG9wdHMubGVnZW5kLmZvbnRDb2xvciA6IG9wdHMubGVnZW5kLmhpZGRlbkNvbG9yKTtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoaXRlbS5uYW1lLCBzdGFydFgsIHN0YXJ0WSArIGZvbnRUcmFucyk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIGlmIChvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAndG9wJyB8fCBvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAnYm90dG9tJykge1xuICAgICAgICBzdGFydFggKz0gbWVhc3VyZVRleHQoaXRlbS5uYW1lLCBmb250U2l6ZSkgKyBpdGVtR2FwO1xuICAgICAgICBpdGVtLmFyZWFbMl0gPSBzdGFydFg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtLmFyZWFbMl0gPSBzdGFydFggKyBtZWFzdXJlVGV4dChpdGVtLm5hbWUsIGZvbnRTaXplKSArIGl0ZW1HYXA7O1xuICAgICAgICBzdGFydFggLT0gc2hhcGVXaWR0aCArIHNoYXBlUmlnaHQ7XG4gICAgICAgIHN0YXJ0WSArPSBsaW5lSGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRyYXdQaWVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xuICB2YXIgcGllT3B0aW9uID0gYXNzaWduKHt9LCB7XG4gICAgYWN0aXZlT3BhY2l0eTogMC41LFxuICAgIGFjdGl2ZVJhZGl1czogMTAgKiBvcHRzLnBpeGVsUmF0aW8sXG4gICAgb2Zmc2V0QW5nbGU6IDAsXG4gICAgbGFiZWxXaWR0aDogMTUgKiBvcHRzLnBpeGVsUmF0aW8sXG4gICAgcmluZ1dpZHRoOiAwLFxuICAgIGJvcmRlcjpmYWxzZSxcbiAgICBib3JkZXJXaWR0aDoyLFxuICAgIGJvcmRlckNvbG9yOicjRkZGRkZGJ1xuICB9LCBvcHRzLmV4dHJhLnBpZSk7XG4gIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxuICAgIHk6IG9wdHMuYXJlYVswXSArIChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkgLyAyXG4gIH07XG4gIGlmIChjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9PSAwKSB7XG4gICAgY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgPSBwaWVPcHRpb24uYWN0aXZlUmFkaXVzO1xuICB9XG5cbiAgdmFyIHJhZGl1cyA9IE1hdGgubWluKChvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdKSAvIDIgLSBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyAtIGNvbmZpZy5waWVDaGFydFRleHRQYWRkaW5nIC0gY29uZmlnLl9waWVUZXh0TWF4TGVuZ3RoXywgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDIgLSBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyAtIGNvbmZpZy5waWVDaGFydFRleHRQYWRkaW5nKTtcblxuICBzZXJpZXMgPSBnZXRQaWVEYXRhUG9pbnRzKHNlcmllcywgcmFkaXVzLCBwcm9jZXNzKTtcblxuICB2YXIgYWN0aXZlUmFkaXVzID0gcGllT3B0aW9uLmFjdGl2ZVJhZGl1cztcblxuICBzZXJpZXMgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGVhY2hTZXJpZXMpIHtcbiAgICBlYWNoU2VyaWVzLl9zdGFydF8gKz0gKHBpZU9wdGlvbi5vZmZzZXRBbmdsZSkgKiBNYXRoLlBJIC8gMTgwO1xuICAgIHJldHVybiBlYWNoU2VyaWVzO1xuICB9KTtcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICBpZiAob3B0cy50b29sdGlwKSB7XG4gICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IHNlcmllc0luZGV4KSB7XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIG9wdHMuZXh0cmEucGllLmFjdGl2ZU9wYWNpdHkgfHwgMC41KSk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xuICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBlYWNoU2VyaWVzLl9yYWRpdXNfICsgYWN0aXZlUmFkaXVzLCBlYWNoU2VyaWVzLl9zdGFydF8sXG4gICAgICAgICAgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqXG4gICAgICAgICAgZWFjaFNlcmllcy5fcHJvcG9ydGlvbl8gKiBNYXRoLlBJKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgocGllT3B0aW9uLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmxpbmVKb2luID0gXCJyb3VuZFwiO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocGllT3B0aW9uLmJvcmRlckNvbG9yKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBlYWNoU2VyaWVzLl9yYWRpdXNfLCBlYWNoU2VyaWVzLl9zdGFydF8sIGVhY2hTZXJpZXMuX3N0YXJ0XyArIDIgKiBlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAqIE1hdGguUEkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgaWYgKHBpZU9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSkge1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChvcHRzLnR5cGUgPT09ICdyaW5nJykge1xuICAgIHZhciBpbm5lclBpZVdpZHRoID0gcmFkaXVzICogMC42O1xuICAgIGlmICh0eXBlb2Ygb3B0cy5leHRyYS5waWUucmluZ1dpZHRoID09PSAnbnVtYmVyJyAmJiBvcHRzLmV4dHJhLnBpZS5yaW5nV2lkdGggPiAwKSB7XG4gICAgICBpbm5lclBpZVdpZHRoID0gTWF0aC5tYXgoMCwgcmFkaXVzIC0gb3B0cy5leHRyYS5waWUucmluZ1dpZHRoKTtcbiAgICB9XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmJhY2tncm91bmQgfHwgJyNmZmZmZmYnKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBpbm5lclBpZVdpZHRoLCAwLCAyICogTWF0aC5QSSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgfVxuXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZXJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzZXJpZXNbaV0uZGF0YSA+IDApIHtcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlclBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2VzcyA9PT0gMSAmJiBvcHRzLnR5cGUgPT09ICdyaW5nJykge1xuICAgIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0LCBjZW50ZXJQb3NpdGlvbik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXG4gICAgcmFkaXVzOiByYWRpdXMsXG4gICAgc2VyaWVzOiBzZXJpZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHJhd1Jvc2VEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xuICB2YXIgcm9zZU9wdGlvbiA9IGFzc2lnbih7fSwge1xuICAgIHR5cGU6ICdhcmVhJyxcbiAgICBhY3RpdmVPcGFjaXR5OiAwLjUsXG4gICAgYWN0aXZlUmFkaXVzOiAxMCAqIG9wdHMucGl4ZWxSYXRpbyxcbiAgICBvZmZzZXRBbmdsZTogMCxcbiAgICBsYWJlbFdpZHRoOiAxNSAqIG9wdHMucGl4ZWxSYXRpbyxcbiAgICBib3JkZXI6ZmFsc2UsXG4gICAgYm9yZGVyV2lkdGg6MixcbiAgICBib3JkZXJDb2xvcjonI0ZGRkZGRidcbiAgfSwgb3B0cy5leHRyYS5yb3NlKTtcbiAgaWYgKGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nID09IDApIHtcbiAgICBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9IHJvc2VPcHRpb24uYWN0aXZlUmFkaXVzO1xuICB9XG4gIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxuICAgIHk6IG9wdHMuYXJlYVswXSArIChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkgLyAyXG4gIH07XG4gICB2YXIgcmFkaXVzID0gTWF0aC5taW4oKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgLSBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfLCAob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl0pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcpO1xuICB2YXIgbWluUmFkaXVzID0gcm9zZU9wdGlvbi5taW5SYWRpdXMgfHwgcmFkaXVzICogMC41O1xuXG4gIHNlcmllcyA9IGdldFJvc2VEYXRhUG9pbnRzKHNlcmllcywgcm9zZU9wdGlvbi50eXBlLCBtaW5SYWRpdXMsIHJhZGl1cywgcHJvY2Vzcyk7XG5cbiAgdmFyIGFjdGl2ZVJhZGl1cyA9IHJvc2VPcHRpb24uYWN0aXZlUmFkaXVzO1xuXG4gIHNlcmllcyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZWFjaFNlcmllcykge1xuICAgIGVhY2hTZXJpZXMuX3N0YXJ0XyArPSAocm9zZU9wdGlvbi5vZmZzZXRBbmdsZSB8fCAwKSAqIE1hdGguUEkgLyAxODA7XG4gICAgcmV0dXJuIGVhY2hTZXJpZXM7XG4gIH0pO1xuXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XG4gICAgaWYgKG9wdHMudG9vbHRpcCkge1xuICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBzZXJpZXNJbmRleCkge1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCByb3NlT3B0aW9uLmFjdGl2ZU9wYWNpdHkgfHwgMC41KSk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xuICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBhY3RpdmVSYWRpdXMgKyBlYWNoU2VyaWVzLl9yYWRpdXNfLCBlYWNoU2VyaWVzLl9zdGFydF8sXG4gICAgICAgICAgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqIGVhY2hTZXJpZXMuX3Jvc2VfcHJvcG9ydGlvbl8gKiBNYXRoLlBJKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgocm9zZU9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgY29udGV4dC5saW5lSm9pbiA9IFwicm91bmRcIjtcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHJvc2VPcHRpb24uYm9yZGVyQ29sb3IpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xuICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xuICAgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIGVhY2hTZXJpZXMuX3JhZGl1c18sIGVhY2hTZXJpZXMuX3N0YXJ0XywgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqXG4gICAgICBlYWNoU2VyaWVzLl9yb3NlX3Byb3BvcnRpb25fICogTWF0aC5QSSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBpZiAocm9zZU9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSkge1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZXJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChzZXJpZXNbaV0uZGF0YSA+IDApIHtcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlclBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXG4gICAgcmFkaXVzOiByYWRpdXMsXG4gICAgc2VyaWVzOiBzZXJpZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHJhd0FyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XG4gIHZhciBhcmNiYXJPcHRpb24gPSBhc3NpZ24oe30sIHtcbiAgICBzdGFydEFuZ2xlOiAwLjc1LFxuICAgIGVuZEFuZ2xlOiAwLjI1LFxuICAgIHR5cGU6ICdkZWZhdWx0JyxcbiAgICB3aWR0aDogMTIgKiBvcHRzLnBpeGVsUmF0aW9cbiAgfSwgb3B0cy5leHRyYS5hcmNiYXIpO1xuXG4gIHNlcmllcyA9IGdldEFyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBhcmNiYXJPcHRpb24sIHByb2Nlc3MpO1xuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XG4gICAgeDogb3B0cy53aWR0aCAvIDIsXG4gICAgeTogb3B0cy5oZWlnaHQgLyAyXG4gIH07XG4gIHZhciByYWRpdXMgPSBNYXRoLm1pbihjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcbiAgcmFkaXVzIC09IDUgKiBvcHRzLnBpeGVsUmF0aW87XG4gIHJhZGl1cyAtPSBhcmNiYXJPcHRpb24ud2lkdGggLyAyO1xuXG4gIC8v6IOM5pmv6aKc6ImyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKGFyY2Jhck9wdGlvbi53aWR0aCk7XG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoYXJjYmFyT3B0aW9uLmJhY2tncm91bmRDb2xvciB8fCAnI0U5RTlFOScpO1xuICBjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGlmIChhcmNiYXJPcHRpb24udHlwZSA9PSAnZGVmYXVsdCcpIHtcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgYXJjYmFyT3B0aW9uLmVuZEFuZ2xlICpcbiAgICAgIE1hdGguUEksIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gIH1cbiAgY29udGV4dC5zdHJva2UoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlYWNoU2VyaWVzID0gc2VyaWVzW2ldO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGFyY2Jhck9wdGlvbi53aWR0aCk7XG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgZWFjaFNlcmllcy5fcHJvcG9ydGlvbl8gKlxuICAgICAgTWF0aC5QSSwgZmFsc2UpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gIH1cblxuICBkcmF3UmluZ1RpdGxlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgY2VudGVyUG9zaXRpb24pO1xuXG4gIHJldHVybiB7XG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcbiAgICByYWRpdXM6IHJhZGl1cyxcbiAgICBzZXJpZXM6IHNlcmllc1xuICB9O1xufVxuXG5mdW5jdGlvbiBkcmF3R2F1Z2VEYXRhUG9pbnRzKGNhdGVnb3JpZXMsIHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAxO1xuICB2YXIgZ2F1Z2VPcHRpb24gPSBhc3NpZ24oe30sIHtcbiAgICBzdGFydEFuZ2xlOiAwLjc1LFxuICAgIGVuZEFuZ2xlOiAwLjI1LFxuICAgIHdpZHRoOiAxNSxcbiAgICBzcGxpdExpbmU6IHtcbiAgICAgIGZpeFJhZGl1czogMCxcbiAgICAgIHNwbGl0TnVtYmVyOiAxMCxcbiAgICAgIHdpZHRoOiAxNSxcbiAgICAgIGNvbG9yOiAnI0ZGRkZGRicsXG4gICAgICBjaGlsZE51bWJlcjogNSxcbiAgICAgIGNoaWxkV2lkdGg6IDVcbiAgICB9LFxuICAgIHBvaW50ZXI6IHtcbiAgICAgIHdpZHRoOiAxNSxcbiAgICAgIGNvbG9yOiAnYXV0bydcbiAgICB9XG4gIH0sIG9wdHMuZXh0cmEuZ2F1Z2UpO1xuXG4gIGlmIChnYXVnZU9wdGlvbi5vbGRBbmdsZSA9PSB1bmRlZmluZWQpIHtcbiAgICBnYXVnZU9wdGlvbi5vbGRBbmdsZSA9IGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGU7XG4gIH1cbiAgaWYgKGdhdWdlT3B0aW9uLm9sZERhdGEgPT0gdW5kZWZpbmVkKSB7XG4gICAgZ2F1Z2VPcHRpb24ub2xkRGF0YSA9IDA7XG4gIH1cbiAgY2F0ZWdvcmllcyA9IGdldEdhdWdlQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlLCBnYXVnZU9wdGlvbi5lbmRBbmdsZSk7XG5cbiAgdmFyIGNlbnRlclBvc2l0aW9uID0ge1xuICAgIHg6IG9wdHMud2lkdGggLyAyLFxuICAgIHk6IG9wdHMuaGVpZ2h0IC8gMlxuICB9O1xuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XG4gIHJhZGl1cyAtPSA1ICogb3B0cy5waXhlbFJhdGlvO1xuICByYWRpdXMgLT0gZ2F1Z2VPcHRpb24ud2lkdGggLyAyO1xuICB2YXIgaW5uZXJSYWRpdXMgPSByYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aDtcblxuICAvL+eUu+iDjOaZr1xuICBjb250ZXh0LnNldExpbmVXaWR0aChnYXVnZU9wdGlvbi53aWR0aCk7XG4gIGNvbnRleHQuc2V0TGluZUNhcCgnYnV0dCcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZWFjaENhdGVnb3JpZXMgPSBjYXRlZ29yaWVzW2ldO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoQ2F0ZWdvcmllcy5jb2xvcik7XG4gICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLCBlYWNoQ2F0ZWdvcmllcy5fc3RhcnRBbmdsZV8gKiBNYXRoLlBJLCBlYWNoQ2F0ZWdvcmllcy5fZW5kQW5nbGVfICpcbiAgICAgIE1hdGguUEksIGZhbHNlKTtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICB9XG4gIGNvbnRleHQuc2F2ZSgpO1xuXG4gIC8v55S75Yi75bqm57q/XG4gIGxldCB0b3RhbEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIGdhdWdlT3B0aW9uLmVuZEFuZ2xlICsgMTtcbiAgbGV0IHNwbGl0QW5nbGUgPSB0b3RhbEFuZ2xlIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyO1xuICBsZXQgY2hpbGRBbmdsZSA9IHRvdGFsQW5nbGUgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGROdW1iZXI7XG4gIGxldCBzdGFydFggPSAtcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGggKiAwLjUgLSBnYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzO1xuICBsZXQgZW5kWCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAqIDAuNSAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgKyBnYXVnZU9wdGlvbi5zcGxpdExpbmUud2lkdGg7XG4gIGxldCBjaGlsZGVuZFggPSAtcmFkaXVzIC0gZ2F1Z2VPcHRpb24ud2lkdGggKiAwLjUgLSBnYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzICsgZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkV2lkdGg7XG5cbiAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XG4gIGNvbnRleHQucm90YXRlKChnYXVnZU9wdGlvbi5zdGFydEFuZ2xlIC0gMSkgKiBNYXRoLlBJKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciArIDE7IGkrKykge1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShnYXVnZU9wdGlvbi5zcGxpdExpbmUuY29sb3IpO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oZW5kWCwgMCk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICBjb250ZXh0LnJvdGF0ZShzcGxpdEFuZ2xlICogTWF0aC5QSSk7XG4gIH1cbiAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgY29udGV4dC5zYXZlKCk7XG4gIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xuICBjb250ZXh0LnJvdGF0ZSgoZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIDEpICogTWF0aC5QSSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgKiBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGROdW1iZXIgKyAxOyBpKyspIHtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNvbG9yKTtcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIDApO1xuICAgIGNvbnRleHQubGluZVRvKGNoaWxkZW5kWCwgMCk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICBjb250ZXh0LnJvdGF0ZShjaGlsZEFuZ2xlICogTWF0aC5QSSk7XG4gIH1cbiAgY29udGV4dC5yZXN0b3JlKCk7XG5cbiAgLy/nlLvmjIfpkohcbiAgc2VyaWVzID0gZ2V0R2F1Z2VEYXRhUG9pbnRzKHNlcmllcywgY2F0ZWdvcmllcywgZ2F1Z2VPcHRpb24sIHByb2Nlc3MpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGVhY2hTZXJpZXMgPSBzZXJpZXNbaV07XG4gICAgY29udGV4dC5zYXZlKCk7XG4gICAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XG4gICAgY29udGV4dC5yb3RhdGUoKGVhY2hTZXJpZXMuX3Byb3BvcnRpb25fIC0gMSkgKiBNYXRoLlBJKTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xuICAgIGNvbnRleHQubW92ZVRvKGdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGgsIDApO1xuICAgIGNvbnRleHQubGluZVRvKDAsIC1nYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoIC8gMik7XG4gICAgY29udGV4dC5saW5lVG8oLWlubmVyUmFkaXVzLCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCBnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoIC8gMik7XG4gICAgY29udGV4dC5saW5lVG8oZ2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKCcjRkZGRkZGJyk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgZ2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aCAvIDYsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgY29udGV4dC5yZXN0b3JlKCk7XG4gIH1cblxuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlKSB7XG4gICAgZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG4gIH1cblxuICBkcmF3UmluZ1RpdGxlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgY2VudGVyUG9zaXRpb24pO1xuXG4gIGlmIChwcm9jZXNzID09PSAxICYmIG9wdHMudHlwZSA9PT0gJ2dhdWdlJykge1xuICAgIG9wdHMuZXh0cmEuZ2F1Z2Uub2xkQW5nbGUgPSBzZXJpZXNbMF0uX3Byb3BvcnRpb25fO1xuICAgIG9wdHMuZXh0cmEuZ2F1Z2Uub2xkRGF0YSA9IHNlcmllc1swXS5kYXRhO1xuICB9XG4gIHJldHVybiB7XG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcbiAgICByYWRpdXM6IHJhZGl1cyxcbiAgICBpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG4gICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcbiAgICB0b3RhbEFuZ2xlOiB0b3RhbEFuZ2xlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGRyYXdSYWRhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XG4gIHZhciByYWRhck9wdGlvbiA9IGFzc2lnbih7fSx7XG4gICAgZ3JpZENvbG9yOiAnI2NjY2NjYycsXG4gICAgbGFiZWxDb2xvcjogJyM2NjY2NjYnLFxuICAgIG9wYWNpdHk6IDAuMlxuICB9LG9wdHMuZXh0cmEucmFkYXIpO1xuICBcbiAgdmFyIGNvb3JkaW5hdGVBbmdsZSA9IGdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyhvcHRzLmNhdGVnb3JpZXMubGVuZ3RoKTtcbiAgXG4gIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxuICAgIHk6IG9wdHMuYXJlYVswXSArIChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkgLyAyXG4gIH07XG5cbiAgdmFyIHJhZGl1cyA9IE1hdGgubWluKGNlbnRlclBvc2l0aW9uLnggLSAoZ2V0TWF4VGV4dExpc3RMZW5ndGgob3B0cy5jYXRlZ29yaWVzKSArIGNvbmZpZy5yYWRhckxhYmVsVGV4dE1hcmdpbiksXG4gICAgY2VudGVyUG9zaXRpb24ueSAtIGNvbmZpZy5yYWRhckxhYmVsVGV4dE1hcmdpbik7XG4gIC8vVE9ET+mAu+i+keS4jeWvuVxuICByYWRpdXMgLT0gb3B0cy5wYWRkaW5nWzFdO1xuXG4gIC8vIGRyYXcgZ3JpZFxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyYWRhck9wdGlvbi5ncmlkQ29sb3IpO1xuICBjb29yZGluYXRlQW5nbGUuZm9yRWFjaChmdW5jdGlvbihhbmdsZSkge1xuICAgIHZhciBwb3MgPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihyYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKSwgY2VudGVyUG9zaXRpb24pO1xuICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xuICAgIGNvbnRleHQubGluZVRvKHBvcy54LCBwb3MueSk7XG4gIH0pO1xuICBjb250ZXh0LnN0cm9rZSgpO1xuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAvLyBkcmF3IHNwbGl0IGxpbmUgZ3JpZFxuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB7fTtcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocmFkYXJPcHRpb24uZ3JpZENvbG9yKTtcbiAgICBjb29yZGluYXRlQW5nbGUuZm9yRWFjaChmdW5jdGlvbihhbmdsZSwgaW5kZXgpIHtcbiAgICAgIHZhciBwb3MgPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihyYWRpdXMgLyBjb25maWcucmFkYXJHcmlkQ291bnQgKiBpICogTWF0aC5jb3MoYW5nbGUpLCByYWRpdXMgLyBjb25maWcucmFkYXJHcmlkQ291bnQgKlxuICAgICAgICBpICogTWF0aC5zaW4oYW5nbGUpLCBjZW50ZXJQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgc3RhcnRQb3MgPSBwb3M7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvcy54LCBwb3MueSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb3MueCwgcG9zLnkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnRleHQubGluZVRvKHN0YXJ0UG9zLngsIHN0YXJ0UG9zLnkpO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBjb25maWcucmFkYXJHcmlkQ291bnQ7IGkrKykge1xuICAgIF9sb29wKGkpO1xuICB9XG5cbiAgdmFyIHJhZGFyRGF0YVBvaW50cyA9IGdldFJhZGFyRGF0YVBvaW50cyhjb29yZGluYXRlQW5nbGUsIGNlbnRlclBvc2l0aW9uLCByYWRpdXMsIHNlcmllcywgb3B0cywgcHJvY2Vzcyk7XG5cbiAgcmFkYXJEYXRhUG9pbnRzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcbiAgICAvLyDnu5jliLbljLrln5/mlbDmja5cbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIHJhZGFyT3B0aW9uLm9wYWNpdHkpKTtcbiAgICBlYWNoU2VyaWVzLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ucG9zaXRpb24ueCwgaXRlbS5wb3NpdGlvbi55KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ucG9zaXRpb24ueCwgaXRlbS5wb3NpdGlvbi55KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuZmlsbCgpO1xuXG4gICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgc2hhcGUgPSBjb25maWcuZGF0YVBvaW50U2hhcGVbc2VyaWVzSW5kZXggJSBjb25maWcuZGF0YVBvaW50U2hhcGUubGVuZ3RoXTtcbiAgICAgIHZhciBwb2ludHMgPSBlYWNoU2VyaWVzLmRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ucG9zaXRpb247XG4gICAgICB9KTtcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgc2hhcGUsIGNvbnRleHQsIG9wdHMpO1xuICAgIH1cbiAgfSk7XG4gIC8vIGRyYXcgbGFiZWwgdGV4dFxuICBkcmF3UmFkYXJMYWJlbChjb29yZGluYXRlQW5nbGUsIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG5cbiAgcmV0dXJuIHtcbiAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxuICAgIHJhZGl1czogcmFkaXVzLFxuICAgIGFuZ2xlTGlzdDogY29vcmRpbmF0ZUFuZ2xlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbEludChtaW4sIG1heCwgaXRlcikge1xuICAgIGl0ZXIgPSBpdGVyPT0wPzE6aXRlcjtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVyOyBpKyspIHtcbiAgICAgICAgYXJyW2ldID0gTWF0aC5yYW5kb20oKTtcbiAgICB9O1xuICAgIHJldHVybiAgTWF0aC5mbG9vcihhcnIucmVkdWNlKGZ1bmN0aW9uKGksail7cmV0dXJuIGkran0pL2l0ZXIqKG1heC1taW4pKSttaW47ICBcbn07XG5cbmZ1bmN0aW9uIGNvbGxpc2lvbk5ldyhhcmVhLHBvaW50cyx3aWR0aCxoZWlnaHQpe1xuICAgIHZhciBpc0luPWZhbHNlO1xuICAgIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xuICAgICAgaWYocG9pbnRzW2ldLmFyZWEpe1xuICAgICAgICBpZihhcmVhWzNdPHBvaW50c1tpXS5hcmVhWzFdfHxhcmVhWzBdPnBvaW50c1tpXS5hcmVhWzJdfHxhcmVhWzFdPnBvaW50c1tpXS5hcmVhWzNdfHxhcmVhWzJdPHBvaW50c1tpXS5hcmVhWzBdKXtcbiAgICAgICAgICBpZihhcmVhWzBdPDAgfHwgYXJlYVsxXTwwIHx8IGFyZWFbMl0+d2lkdGggfHwgYXJlYVszXT5oZWlnaHQpe1xuICAgICAgICAgICAgaXNJbj10cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpc0luPWZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgaXNJbj10cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0luO1xufTtcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZGF0YSkge1xuICB2YXIgYm91bmRzID0ge30sIGNvb3JkcztcbiAgYm91bmRzLnhNaW4gPSAxODA7XG4gIGJvdW5kcy54TWF4ID0gMDtcbiAgYm91bmRzLnlNaW4gPSA5MDtcbiAgYm91bmRzLnlNYXggPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNvb3JkYSA9IGRhdGFbaV0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY29vcmRhLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgY29vcmRzID0gY29vcmRhW2tdO1xuICAgICAgICAgIGlmIChjb29yZHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgY29vcmRzID0gY29vcmRzWzBdXG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIHZhciBsb25naXR1ZGUgPSBjb29yZHNbal1bMF07XG4gICAgICAgICAgICAgIHZhciBsYXRpdHVkZSA9IGNvb3Jkc1tqXVsxXTtcbiAgICAgICAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgICAgICAgICAgeDogbG9uZ2l0dWRlLCBcbiAgICAgICAgICAgICAgICAgIHk6IGxhdGl0dWRlIFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJvdW5kcy54TWluID0gYm91bmRzLnhNaW4gPCBwb2ludC54ID8gYm91bmRzLnhNaW4gOiBwb2ludC54O1xuICAgICAgICAgICAgICBib3VuZHMueE1heCA9IGJvdW5kcy54TWF4ID4gcG9pbnQueCA/IGJvdW5kcy54TWF4IDogcG9pbnQueDtcbiAgICAgICAgICAgICAgYm91bmRzLnlNaW4gPSBib3VuZHMueU1pbiA8IHBvaW50LnkgPyBib3VuZHMueU1pbiA6IHBvaW50Lnk7XG4gICAgICAgICAgICAgIGJvdW5kcy55TWF4ID0gYm91bmRzLnlNYXggPiBwb2ludC55ID8gYm91bmRzLnlNYXggOiBwb2ludC55O1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRzO1xufVxuXG5mdW5jdGlvbiBjb29yZGluYXRlVG9Qb2ludChsYXRpdHVkZSwgbG9uZ2l0dWRlLGJvdW5kcyxzY2FsZSx4b2Zmc2V0LHlvZmZzZXQpIHtcbiAgcmV0dXJuIHtcbiAgICAgIHg6IChsb25naXR1ZGUgLSBib3VuZHMueE1pbikgKiBzY2FsZSt4b2Zmc2V0LFxuICAgICAgeTogKGJvdW5kcy55TWF4IC0gbGF0aXR1ZGUpICogc2NhbGUreW9mZnNldFxuICB9O1xufVxuXG5mdW5jdGlvbiBwb2ludFRvQ29vcmRpbmF0ZShwb2ludFksIHBvaW50WCxib3VuZHMsc2NhbGUseG9mZnNldCx5b2Zmc2V0KSB7XG4gIHJldHVybiB7XG4gICAgICB4OiAocG9pbnRYLXhvZmZzZXQpL3NjYWxlK2JvdW5kcy54TWluLFxuICAgICAgeTogYm91bmRzLnlNYXggLSAocG9pbnRZLXlvZmZzZXQpL3NjYWxlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzUmF5SW50ZXJzZWN0c1NlZ21lbnQocG9pLHNfcG9pLGVfcG9pKXtcbiAgICAgIGlmIChzX3BvaVsxXT09ZV9wb2lbMV0pe3JldHVybiBmYWxzZTt9IFxuICAgICAgaWYgKHNfcG9pWzFdPnBvaVsxXSAmJiBlX3BvaVsxXT5wb2lbMV0pe3JldHVybiBmYWxzZTt9XG4gICAgICBpZiAoc19wb2lbMV08cG9pWzFdICYmIGVfcG9pWzFdPHBvaVsxXSl7cmV0dXJuIGZhbHNlO31cbiAgICAgIGlmIChzX3BvaVsxXT09cG9pWzFdICYmIGVfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cbiAgICAgIGlmIChlX3BvaVsxXT09cG9pWzFdICYmIHNfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cbiAgICAgIGlmIChzX3BvaVswXTxwb2lbMF0gJiYgZV9wb2lbMV08cG9pWzFdKXtyZXR1cm4gZmFsc2U7fVxuICAgICAgbGV0IHhzZWc9ZV9wb2lbMF0tKGVfcG9pWzBdLXNfcG9pWzBdKSooZV9wb2lbMV0tcG9pWzFdKS8oZV9wb2lbMV0tc19wb2lbMV0pOyBcbiAgICAgIGlmICh4c2VnPHBvaVswXSl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbn0gXG5cbmZ1bmN0aW9uIGlzUG9pV2l0aGluUG9seShwb2kscG9seSl7XG4gIGxldCBzaW5zYz0wO1xuICBmb3IgKGxldCBpPTA7aTxwb2x5Lmxlbmd0aDtpKyspe1xuICAgIGxldCBlcG9seT1wb2x5W2ldWzBdO1xuICAgIGlmIChwb2x5Lmxlbmd0aCA9PSAxKSB7XG4gICAgICBlcG9seSA9IHBvbHlbaV1bMF1cbiAgICB9XG4gICAgZm9yKGxldCBqPTA7ajxlcG9seS5sZW5ndGgtMTtqKyspe1xuICAgICAgbGV0IHNfcG9pPWVwb2x5W2pdO1xuICAgICAgbGV0IGVfcG9pPWVwb2x5W2orMV07XG4gICAgICBpZiAoaXNSYXlJbnRlcnNlY3RzU2VnbWVudChwb2ksc19wb2ksZV9wb2kpKXtcbiAgICAgICAgc2luc2MrPTE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBpZihzaW5zYyUyPT0xKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfWVsc2V7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZHJhd01hcERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgdmFyIG1hcE9wdGlvbj1hc3NpZ24oe30se1xuICAgIGJvcmRlcjp0cnVlLFxuICAgIGJvcmRlcldpZHRoOjEsXG4gICAgYm9yZGVyQ29sb3I6JyM2NjY2NjYnLFxuICAgIGZpbGxPcGFjaXR5OjAuNixcbiAgICBhY3RpdmVCb3JkZXJDb2xvcjonI2YwNDg2NCcsXG4gICAgYWN0aXZlRmlsbENvbG9yOicjZmFjYzE0JyxcbiAgICBhY3RpdmVGaWxsT3BhY2l0eToxXG4gIH0sb3B0cy5leHRyYS5tYXApO1xuICB2YXIgY29vcmRzLCBwb2ludDtcbiAgdmFyIGRhdGEgPSBzZXJpZXM7XG4gIHZhciBib3VuZHM9IGdldEJvdW5kaW5nQm94KGRhdGEpO1xuICB2YXIgeFNjYWxlID0gb3B0cy53aWR0aCAvIE1hdGguYWJzKGJvdW5kcy54TWF4IC0gYm91bmRzLnhNaW4pO1xuICB2YXIgeVNjYWxlID0gb3B0cy5oZWlnaHQgLyBNYXRoLmFicyhib3VuZHMueU1heCAtIGJvdW5kcy55TWluKTtcbiAgdmFyIHNjYWxlID0geFNjYWxlIDwgeVNjYWxlID8geFNjYWxlIDogeVNjYWxlO1xuICB2YXIgeG9mZnNldD1vcHRzLndpZHRoLzItTWF0aC5hYnMoYm91bmRzLnhNYXggLSBib3VuZHMueE1pbikvMipzY2FsZTtcbiAgdmFyIHlvZmZzZXQ9b3B0cy5oZWlnaHQvMi1NYXRoLmFicyhib3VuZHMueU1heCAtIGJvdW5kcy55TWluKS8yKnNjYWxlO1xuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMuYmFja2dyb3VuZHx8JyNGRkZGRkYnKTtcbiAgY29udGV4dC5yZWN0KDAsMCxvcHRzLndpZHRoLG9wdHMuaGVpZ2h0KTtcbiAgY29udGV4dC5maWxsKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgobWFwT3B0aW9uLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG1hcE9wdGlvbi5ib3JkZXJDb2xvcik7XG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBtYXBPcHRpb24uZmlsbE9wYWNpdHkpKTtcbiAgICBpZiAob3B0cy50b29sdGlwKSB7XG4gICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkgKSB7XG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUobWFwT3B0aW9uLmFjdGl2ZUJvcmRlckNvbG9yKTtcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IobWFwT3B0aW9uLmFjdGl2ZUZpbGxDb2xvciwgbWFwT3B0aW9uLmFjdGl2ZUZpbGxPcGFjaXR5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjb29yZGEgPSBkYXRhW2ldLmdlb21ldHJ5LmNvb3JkaW5hdGVzXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBjb29yZGEubGVuZ3RoOyBrKyspIHtcbiAgICAgIGNvb3JkcyA9IGNvb3JkYVtrXTtcbiAgICAgIGlmIChjb29yZHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgY29vcmRzID0gY29vcmRzWzBdXG4gICAgICB9XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvb3Jkcy5sZW5ndGg7IGorKykge1xuICAgICAgICBwb2ludCA9IGNvb3JkaW5hdGVUb1BvaW50KGNvb3Jkc1tqXVsxXSwgY29vcmRzW2pdWzBdLGJvdW5kcyxzY2FsZSx4b2Zmc2V0LHlvZmZzZXQpXG4gICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICBpZihtYXBPcHRpb24uYm9yZGVyID09IHRydWUpe1xuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihvcHRzLmRhdGFMYWJlbCA9PSB0cnVlKXtcbiAgICAgIHZhciBjZW50ZXJQb2ludCA9IGRhdGFbaV0ucHJvcGVydGllcy5jZW50cm9pZDtcbiAgICAgIGlmKGNlbnRlclBvaW50KXtcbiAgICAgICAgcG9pbnQgPSBjb29yZGluYXRlVG9Qb2ludChjZW50ZXJQb2ludFsxXSwgY2VudGVyUG9pbnRbMF0sYm91bmRzLHNjYWxlLHhvZmZzZXQseW9mZnNldCk7XG4gICAgICAgIGxldCBmb250U2l6ZT1kYXRhW2ldLnRleHRTaXplfHxjb25maWcuZm9udFNpemU7XG4gICAgICAgIGxldCB0ZXh0PWRhdGFbaV0ucHJvcGVydGllcy5uYW1lO1xuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKGZvbnRTaXplKVxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShkYXRhW2ldLnRleHRDb2xvcnx8JyM2NjY2NjYnKVxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHBvaW50LngtbWVhc3VyZVRleHQodGV4dCxmb250U2l6ZSkvMiwgcG9pbnQueStmb250U2l6ZS8yKTtcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb3B0cy5jaGFydERhdGEubWFwRGF0YT17XG4gICAgYm91bmRzOmJvdW5kcyxcbiAgICBzY2FsZTpzY2FsZSxcbiAgICB4b2Zmc2V0OnhvZmZzZXQsXG4gICAgeW9mZnNldDp5b2Zmc2V0XG4gIH1cbiAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LDEpO1xuICBjb250ZXh0LmRyYXcoKTtcbn1cblxuZnVuY3Rpb24gZ2V0V29yZENsb3VkUG9pbnQob3B0cyx0eXBlKXtcbiAgbGV0IHBvaW50cyA9IG9wdHMuc2VyaWVzLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGFyc2VJbnQoYi50ZXh0U2l6ZSktcGFyc2VJbnQoYS50ZXh0U2l6ZSk7fSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGV4dCA9IHBvaW50c1tpXS5uYW1lO1xuICAgICAgICBsZXQgdEhlaWdodCA9IHBvaW50c1tpXS50ZXh0U2l6ZTtcbiAgICAgICAgbGV0IHRXaWR0aCA9IG1lYXN1cmVUZXh0KHRleHQsdEhlaWdodCk7XG4gICAgICAgIGxldCB4LHk7XG4gICAgICAgIGxldCBhcmVhO1xuICAgICAgICBsZXQgYnJlYWtudW09MDtcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgYnJlYWtudW0rKztcbiAgICAgICAgICAgIHggPSBub3JtYWxJbnQoLW9wdHMud2lkdGgvMiwgb3B0cy53aWR0aC8yLDUpIC0gdFdpZHRoLzI7XG4gICAgICAgICAgICB5ID0gbm9ybWFsSW50KC1vcHRzLmhlaWdodC8yLCBvcHRzLmhlaWdodC8yLDUpICsgdEhlaWdodC8yO1xuICAgICAgICAgICAgYXJlYT1beC01K29wdHMud2lkdGgvMix5LTUtdEhlaWdodCtvcHRzLmhlaWdodC8yLHgrdFdpZHRoKzUrb3B0cy53aWR0aC8yLHkrNStvcHRzLmhlaWdodC8yXTtcbiAgICAgICAgICAgIGxldCBpc0NvbGxpc2lvbiA9IGNvbGxpc2lvbk5ldyhhcmVhLHBvaW50cyxvcHRzLndpZHRoLG9wdHMuaGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICghaXNDb2xsaXNpb24pIGJyZWFrO1xuICAgICAgICAgICAgaWYgKGJyZWFrbnVtPT0xMDAwKXtcbiAgICAgICAgICAgICAgYXJlYT1bLTEwMCwtMTAwLC0xMDAsLTEwMF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwb2ludHNbaV0uYXJlYT1hcmVhO1xuICAgICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgIGZ1bmN0aW9uIFNwaW4oKXtcbiAgICAgICAgLy/ojrflj5blnYfljIDpmo/mnLrlgLzvvIzmmK/lkKbml4vovazvvIzml4vovaznmoTmpoLnjofkuLrvvIgxLTAuNe+8iVxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKT4wLjcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9ZWxzZSB7cmV0dXJuIGZhbHNlfTtcbiAgICAgIH07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykgeyBcbiAgICAgICAgbGV0IHRleHQgPSBwb2ludHNbaV0ubmFtZTtcbiAgICAgICAgbGV0IHRIZWlnaHQgPSBwb2ludHNbaV0udGV4dFNpemU7XG4gICAgICAgIGxldCB0V2lkdGggPSBtZWFzdXJlVGV4dCh0ZXh0LHRIZWlnaHQpO1xuICAgICAgICBsZXQgaXNTcGluID0gU3BpbigpOyBcbiAgICAgICAgbGV0IHgseSxhcmVhLGFyZWF2O1xuICAgICAgICBsZXQgYnJlYWtudW09MDtcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgIGJyZWFrbnVtKys7XG4gICAgICAgICAgbGV0IGlzQ29sbGlzaW9uO1xuICAgICAgICAgIGlmIChpc1NwaW4pIHtcbiAgICAgICAgICAgICAgeCA9IG5vcm1hbEludCgtb3B0cy53aWR0aC8yLCBvcHRzLndpZHRoLzIsNSkgLSB0V2lkdGgvMjtcbiAgICAgICAgICAgICAgeSA9IG5vcm1hbEludCgtb3B0cy5oZWlnaHQvMiwgb3B0cy5oZWlnaHQvMiw1KSt0SGVpZ2h0LzI7XG4gICAgICAgICAgICAgIGFyZWE9W3ktNS10V2lkdGgrb3B0cy53aWR0aC8yLCgteC01K29wdHMuaGVpZ2h0LzIpLHkrNStvcHRzLndpZHRoLzIsKC14K3RIZWlnaHQrNStvcHRzLmhlaWdodC8yKV07XG4gICAgICAgICAgICAgIGFyZWF2PVtvcHRzLndpZHRoLShvcHRzLndpZHRoLzItb3B0cy5oZWlnaHQvMiktKC14K3RIZWlnaHQrNStvcHRzLmhlaWdodC8yKS01LChvcHRzLmhlaWdodC8yLW9wdHMud2lkdGgvMikrKHktNS10V2lkdGgrb3B0cy53aWR0aC8yKS01LG9wdHMud2lkdGgtKG9wdHMud2lkdGgvMi1vcHRzLmhlaWdodC8yKS0oLXgrdEhlaWdodCs1K29wdHMuaGVpZ2h0LzIpK3RIZWlnaHQsKG9wdHMuaGVpZ2h0LzItb3B0cy53aWR0aC8yKSsoeS01LXRXaWR0aCtvcHRzLndpZHRoLzIpK3RXaWR0aCs1XTtcbiAgICAgICAgICAgICAgaXNDb2xsaXNpb24gPSBjb2xsaXNpb25OZXcoYXJlYXYscG9pbnRzLG9wdHMuaGVpZ2h0LG9wdHMud2lkdGgpO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgeCA9IG5vcm1hbEludCgtb3B0cy53aWR0aC8yLCBvcHRzLndpZHRoLzIsNSkgLSB0V2lkdGgvMjtcbiAgICAgICAgICAgIHkgPSBub3JtYWxJbnQoLW9wdHMuaGVpZ2h0LzIsIG9wdHMuaGVpZ2h0LzIsNSkrdEhlaWdodC8yO1xuICAgICAgICAgICAgYXJlYT1beC01K29wdHMud2lkdGgvMix5LTUtdEhlaWdodCtvcHRzLmhlaWdodC8yLHgrdFdpZHRoKzUrb3B0cy53aWR0aC8yLHkrNStvcHRzLmhlaWdodC8yXTtcbiAgICAgICAgICAgIGlzQ29sbGlzaW9uID0gY29sbGlzaW9uTmV3KGFyZWEscG9pbnRzLG9wdHMud2lkdGgsb3B0cy5oZWlnaHQpO1xuICAgICAgICAgIH0gXG4gICAgICAgICAgaWYgKCFpc0NvbGxpc2lvbikgYnJlYWs7XG4gICAgICAgICAgaWYgKGJyZWFrbnVtPT0xMDAwKXtcbiAgICAgICAgICAgIGFyZWE9Wy0xMDAwLC0xMDAwLC0xMDAwLC0xMDAwXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGlzU3Bpbikge1xuICAgICAgICAgIHBvaW50c1tpXS5hcmVhPWFyZWF2O1xuICAgICAgICAgIHBvaW50c1tpXS5hcmVhdj1hcmVhO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBwb2ludHNbaV0uYXJlYT1hcmVhO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50c1tpXS5yb3RhdGU9aXNTcGluO1xuICAgICAgfTtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuXG5cbmZ1bmN0aW9uIGRyYXdXb3JkQ2xvdWREYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIGxldCBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xuICBsZXQgd29yZE9wdGlvbiA9IGFzc2lnbih7fSx7XG4gICAgdHlwZTogJ25vcm1hbCcsXG4gICAgYXV0b0NvbG9yczogdHJ1ZVxuICB9LG9wdHMuZXh0cmEud29yZCk7XG4gIFxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmJhY2tncm91bmR8fCcjRkZGRkZGJyk7XG4gIGNvbnRleHQucmVjdCgwLDAsb3B0cy53aWR0aCxvcHRzLmhlaWdodCk7XG4gIGNvbnRleHQuZmlsbCgpO1xuICBjb250ZXh0LnNhdmUoKTtcbiAgbGV0IHBvaW50cyA9IG9wdHMuY2hhcnREYXRhLndvcmRDbG91ZERhdGE7XG4gIGNvbnRleHQudHJhbnNsYXRlKG9wdHMud2lkdGgvMixvcHRzLmhlaWdodC8yKTtcbiAgXG4gIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xuICAgICAgY29udGV4dC5zYXZlKCk7XG4gICAgICBpZihwb2ludHNbaV0ucm90YXRlKXtcbiAgICAgICAgY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gcG9pbnRzW2ldLm5hbWU7XG4gICAgICBsZXQgdEhlaWdodCA9IHBvaW50c1tpXS50ZXh0U2l6ZTtcbiAgICAgIGxldCB0V2lkdGggPSBtZWFzdXJlVGV4dCh0ZXh0LHRIZWlnaHQpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocG9pbnRzW2ldLmNvbG9yKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHBvaW50c1tpXS5jb2xvcik7XG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKHRIZWlnaHQpO1xuICAgICAgaWYocG9pbnRzW2ldLnJvdGF0ZSl7XG4gICAgICAgIGlmKHBvaW50c1tpXS5hcmVhdlswXT4wKXtcbiAgICAgICAgICBpZiAob3B0cy50b29sdGlwKSB7XG4gICAgICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcbiAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRleHQsKHBvaW50c1tpXS5hcmVhdlswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWF2WzFdKzUrdEhlaWdodC1vcHRzLmhlaWdodC8yKSpwcm9jZXNzKTtcbiAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYXZbMF0rNS1vcHRzLndpZHRoLzIpKnByb2Nlc3MtdFdpZHRoKigxLXByb2Nlc3MpLzIsKHBvaW50c1tpXS5hcmVhdlsxXSs1K3RIZWlnaHQtb3B0cy5oZWlnaHQvMikqcHJvY2Vzcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwocG9pbnRzW2ldLmFyZWF2WzBdKzUtb3B0cy53aWR0aC8yKSpwcm9jZXNzLXRXaWR0aCooMS1wcm9jZXNzKS8yLChwb2ludHNbaV0uYXJlYXZbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xuICAgICAgICAgIH0gXG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICBpZihwb2ludHNbaV0uYXJlYVswXT4wKXtcbiAgICAgICAgICBpZiAob3B0cy50b29sdGlwKSB7XG4gICAgICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcbiAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRleHQsKHBvaW50c1tpXS5hcmVhWzBdKzUtb3B0cy53aWR0aC8yKSpwcm9jZXNzLXRXaWR0aCooMS1wcm9jZXNzKS8yLChwb2ludHNbaV0uYXJlYVsxXSs1K3RIZWlnaHQtb3B0cy5oZWlnaHQvMikqcHJvY2Vzcyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgfVxuICBjb250ZXh0LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gZHJhd0Z1bm5lbERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcbiAgbGV0IHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XG4gIGxldCBmdW5uZWxPcHRpb24gPSBhc3NpZ24oe30se1xuICAgIGFjdGl2ZVdpZHRoOjEwLFxuICAgIGFjdGl2ZU9wYWNpdHk6MC4zLFxuICAgIGJvcmRlcjpmYWxzZSxcbiAgICBib3JkZXJXaWR0aDoyLFxuICAgIGJvcmRlckNvbG9yOicjRkZGRkZGJyxcbiAgICBmaWxsT3BhY2l0eToxLFxuICAgIGxhYmVsQWxpZ246J3JpZ2h0J1xuICB9LG9wdHMuZXh0cmEuZnVubmVsKTtcbiAgbGV0IGVhY2hTcGFjaW5nID0gKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKS9zZXJpZXMubGVuZ3RoO1xuICBsZXQgY2VudGVyUG9zaXRpb24gPSB7XG4gICAgeDogb3B0cy5hcmVhWzNdICsgKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMixcbiAgICB5OiBvcHRzLmhlaWdodC1vcHRzLmFyZWFbMl1cbiAgfTtcbiAgbGV0IGFjdGl2ZVdpZHRoID0gZnVubmVsT3B0aW9uLmFjdGl2ZVdpZHRoO1xuICBsZXQgcmFkaXVzID0gTWF0aC5taW4oKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMiAtIGFjdGl2ZVdpZHRoLCAob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl0pIC8gMiAtIGFjdGl2ZVdpZHRoKTtcbiAgc2VyaWVzID0gZ2V0RnVubmVsRGF0YVBvaW50cyhzZXJpZXMsIHJhZGl1cywgcHJvY2Vzcyk7XG4gIGNvbnRleHQuc2F2ZSgpO1xuICBjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJQb3NpdGlvbi54LGNlbnRlclBvc2l0aW9uLnkpO1xuICBmb3IobGV0IGk9MDtpPHNlcmllcy5sZW5ndGg7aSsrKXtcbiAgICBpZihpPT0wKXtcbiAgICAgIGlmIChvcHRzLnRvb2x0aXApIHtcbiAgICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpKSB7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihzZXJpZXNbaV0uY29sb3IsIGZ1bm5lbE9wdGlvbi5hY3RpdmVPcGFjaXR5KSk7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oLWFjdGl2ZVdpZHRoLCAwKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbygtc2VyaWVzW2ldLnJhZGl1cy1hY3RpdmVXaWR0aCwgLWVhY2hTcGFjaW5nKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaV0ucmFkaXVzK2FjdGl2ZVdpZHRoLCAtZWFjaFNwYWNpbmcpO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKGFjdGl2ZVdpZHRoLCAwKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbygtYWN0aXZlV2lkdGgsIDApO1xuICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNlcmllc1tpXS5mdW5uZWxBcmVhPVtjZW50ZXJQb3NpdGlvbi54LXNlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueS1lYWNoU3BhY2luZyxjZW50ZXJQb3NpdGlvbi54K3Nlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueV07XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoZnVubmVsT3B0aW9uLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvKTtcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZnVubmVsT3B0aW9uLmJvcmRlckNvbG9yKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHNlcmllc1tpXS5jb2xvciwgZnVubmVsT3B0aW9uLmZpbGxPcGFjaXR5KSk7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDAsIDApO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgaWYoZnVubmVsT3B0aW9uLmJvcmRlciA9PSB0cnVlKXtcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIGlmIChvcHRzLnRvb2x0aXApIHtcbiAgICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpKSB7XG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihzZXJpZXNbaV0uY29sb3IsIGZ1bm5lbE9wdGlvbi5hY3RpdmVPcGFjaXR5KSk7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oLXNlcmllc1tpLTFdLnJhZGl1cy1hY3RpdmVXaWR0aCwgMCk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oLXNlcmllc1tpXS5yYWRpdXMtYWN0aXZlV2lkdGgsIC1lYWNoU3BhY2luZyk7XG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cythY3RpdmVXaWR0aCwgLWVhY2hTcGFjaW5nKTtcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaS0xXS5yYWRpdXMrYWN0aXZlV2lkdGgsIDApO1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIDApO1xuICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2VyaWVzW2ldLmZ1bm5lbEFyZWE9W2NlbnRlclBvc2l0aW9uLngtc2VyaWVzW2ldLnJhZGl1cyxjZW50ZXJQb3NpdGlvbi55LWVhY2hTcGFjaW5nKihpKzEpLGNlbnRlclBvc2l0aW9uLngrc2VyaWVzW2ldLnJhZGl1cyxjZW50ZXJQb3NpdGlvbi55LWVhY2hTcGFjaW5nKmldO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGZ1bm5lbE9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGZ1bm5lbE9wdGlvbi5ib3JkZXJDb2xvcik7XG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihzZXJpZXNbaV0uY29sb3IsIGZ1bm5lbE9wdGlvbi5maWxsT3BhY2l0eSkpO1xuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG4gICAgICBjb250ZXh0LmxpbmVUbygtc2VyaWVzW2ktMV0ucmFkaXVzLCAwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHNlcmllc1tpLTFdLnJhZGl1cywgMCk7XG4gICAgICBjb250ZXh0LmxpbmVUbygwLCAwKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgIGlmKGZ1bm5lbE9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSl7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRleHQudHJhbnNsYXRlKDAsLWVhY2hTcGFjaW5nKVxuICB9XG4gIGNvbnRleHQucmVzdG9yZSgpO1xuICBcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XG4gICAgZHJhd0Z1bm5lbFRleHQoc2VyaWVzLCBvcHRzLCBjb250ZXh0LCBlYWNoU3BhY2luZywgZnVubmVsT3B0aW9uLmxhYmVsQWxpZ24sIGFjdGl2ZVdpZHRoLCBjZW50ZXJQb3NpdGlvbik7XG4gIH1cbiAgXG4gIHJldHVybiB7XG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcbiAgICByYWRpdXM6IHJhZGl1cyxcbiAgICBzZXJpZXM6IHNlcmllc1xuICB9O1xufVxuXG5mdW5jdGlvbiBkcmF3RnVubmVsVGV4dChzZXJpZXMsIG9wdHMsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCBsYWJlbEFsaWduLGFjdGl2ZVdpZHRoLCBjZW50ZXJQb3NpdGlvbil7XG4gIGZvcihsZXQgaT0wO2k8c2VyaWVzLmxlbmd0aDtpKyspe1xuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xuICAgIGxldCBzdGFydFgsZW5kWCxzdGFydFksZm9udFNpemU7XG4gICAgbGV0IHRleHQgPSBpdGVtLmZvcm1hdCA/IGl0ZW0uZm9ybWF0KCtpdGVtLl9wcm9wb3J0aW9uXy50b0ZpeGVkKDIpKSA6IHV0aWwudG9GaXhlZChpdGVtLl9wcm9wb3J0aW9uXyAqIDEwMCkgKyclJztcbiAgICBpZihsYWJlbEFsaWduID09ICdyaWdodCcpe1xuICAgICAgaWYoaT09MCl7XG4gICAgICAgIHN0YXJ0WD0oaXRlbS5mdW5uZWxBcmVhWzJdK2NlbnRlclBvc2l0aW9uLngpLzI7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMl0rc2VyaWVzW2ktMV0uZnVubmVsQXJlYVsyXSkvMjtcbiAgICAgIH1cbiAgICAgIGVuZFg9c3RhcnRYK2FjdGl2ZVdpZHRoKjI7XG4gICAgICBzdGFydFk9aXRlbS5mdW5uZWxBcmVhWzFdK2VhY2hTcGFjaW5nLzI7XG4gICAgICBmb250U2l6ZSA9IGl0ZW0udGV4dFNpemUgfHwgb3B0cy5mb250U2l6ZTtcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCxzdGFydFkgKTtcbiAgICAgIGNvbnRleHQubGluZVRvKGVuZFgsc3RhcnRZKTtcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQubW92ZVRvKGVuZFgsIHN0YXJ0WSk7XG4gICAgICBjb250ZXh0LmFyYyhlbmRYLCBzdGFydFksIDIsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0udGV4dENvbG9yIHx8ICcjNjY2NjY2Jyk7XG4gICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIGVuZFgrNSwgc3RhcnRZICsgZm9udFNpemUvMiAtMik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfWVsc2V7XG4gICAgICBpZihpPT0wKXtcbiAgICAgICAgc3RhcnRYPShpdGVtLmZ1bm5lbEFyZWFbMF0rY2VudGVyUG9zaXRpb24ueCkvMjtcbiAgICAgIH1lbHNle1xuICAgICAgICBzdGFydFg9KGl0ZW0uZnVubmVsQXJlYVswXStzZXJpZXNbaS0xXS5mdW5uZWxBcmVhWzBdKS8yO1xuICAgICAgfVxuICAgICAgZW5kWD1zdGFydFgtYWN0aXZlV2lkdGgqMjtcbiAgICAgIHN0YXJ0WT1pdGVtLmZ1bm5lbEFyZWFbMV0rZWFjaFNwYWNpbmcvMjtcbiAgICAgIGZvbnRTaXplID0gaXRlbS50ZXh0U2l6ZSB8fCBvcHRzLmZvbnRTaXplO1xuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvcik7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLHN0YXJ0WSApO1xuICAgICAgY29udGV4dC5saW5lVG8oZW5kWCxzdGFydFkpO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgY29udGV4dC5tb3ZlVG8oZW5kWCwgc3RhcnRZKTtcbiAgICAgIGNvbnRleHQuYXJjKGVuZFgsIHN0YXJ0WSwgMiwgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoZm9udFNpemUpO1xuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS50ZXh0Q29sb3IgfHwgJyM2NjY2NjYnKTtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgZW5kWC01LW1lYXN1cmVUZXh0KHRleHQpLCBzdGFydFkgKyBmb250U2l6ZS8yIC0yKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gICAgXG4gIH1cbn1cblxuXG5mdW5jdGlvbiBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpIHtcbiAgY29udGV4dC5kcmF3KCk7XG59XG5cbnZhciBUaW1pbmcgPSB7XG4gIGVhc2VJbjogZnVuY3Rpb24gZWFzZUluKHBvcykge1xuICAgIHJldHVybiBNYXRoLnBvdyhwb3MsIDMpO1xuICB9LFxuICBlYXNlT3V0OiBmdW5jdGlvbiBlYXNlT3V0KHBvcykge1xuICAgIHJldHVybiBNYXRoLnBvdyhwb3MgLSAxLCAzKSArIDE7XG4gIH0sXG4gIGVhc2VJbk91dDogZnVuY3Rpb24gZWFzZUluT3V0KHBvcykge1xuICAgIGlmICgocG9zIC89IDAuNSkgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLCAzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDAuNSAqIChNYXRoLnBvdyhwb3MgLSAyLCAzKSArIDIpO1xuICAgIH1cbiAgfSxcbiAgbGluZWFyOiBmdW5jdGlvbiBsaW5lYXIocG9zKSB7XG4gICAgcmV0dXJuIHBvcztcbiAgfVxufTtcblxuZnVuY3Rpb24gQW5pbWF0aW9uKG9wdHMpIHtcbiAgdGhpcy5pc1N0b3AgPSBmYWxzZTtcbiAgb3B0cy5kdXJhdGlvbiA9IHR5cGVvZiBvcHRzLmR1cmF0aW9uID09PSAndW5kZWZpbmVkJyA/IDEwMDAgOiBvcHRzLmR1cmF0aW9uO1xuICBvcHRzLnRpbWluZyA9IG9wdHMudGltaW5nIHx8ICdsaW5lYXInO1xuICB2YXIgZGVsYXkgPSAxNztcblxuICBmdW5jdGlvbiBjcmVhdGVBbmltYXRpb25GcmFtZSgpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RlcCwgZGVsYXkpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gICAgICAgICAgc3RlcCh0aW1lU3RhbXApO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgIHN0ZXAobnVsbCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgdmFyIGFuaW1hdGlvbkZyYW1lID0gY3JlYXRlQW5pbWF0aW9uRnJhbWUoKTtcbiAgdmFyIHN0YXJ0VGltZVN0YW1wID0gbnVsbDtcbiAgdmFyIF9zdGVwID0gZnVuY3Rpb24gc3RlcCh0aW1lc3RhbXApIHtcbiAgICBpZiAodGltZXN0YW1wID09PSBudWxsIHx8IHRoaXMuaXNTdG9wID09PSB0cnVlKSB7XG4gICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2VzcygxKTtcbiAgICAgIG9wdHMub25BbmltYXRpb25GaW5pc2ggJiYgb3B0cy5vbkFuaW1hdGlvbkZpbmlzaCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3RhcnRUaW1lU3RhbXAgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZVN0YW1wID0gdGltZXN0YW1wO1xuICAgIH1cbiAgICBpZiAodGltZXN0YW1wIC0gc3RhcnRUaW1lU3RhbXAgPCBvcHRzLmR1cmF0aW9uKSB7XG4gICAgICB2YXIgcHJvY2VzcyA9ICh0aW1lc3RhbXAgLSBzdGFydFRpbWVTdGFtcCkgLyBvcHRzLmR1cmF0aW9uO1xuICAgICAgdmFyIHRpbWluZ0Z1bmN0aW9uID0gVGltaW5nW29wdHMudGltaW5nXTtcbiAgICAgIHByb2Nlc3MgPSB0aW1pbmdGdW5jdGlvbihwcm9jZXNzKTtcblxuICAgICAgb3B0cy5vblByb2Nlc3MgJiYgb3B0cy5vblByb2Nlc3MocHJvY2Vzcyk7XG4gICAgICBhbmltYXRpb25GcmFtZShfc3RlcCwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2VzcygxKTtcbiAgICAgIG9wdHMub25BbmltYXRpb25GaW5pc2ggJiYgb3B0cy5vbkFuaW1hdGlvbkZpbmlzaCgpO1xuICAgIH1cbiAgfTtcbiAgX3N0ZXAgPSBfc3RlcC5iaW5kKHRoaXMpO1xuICBhbmltYXRpb25GcmFtZShfc3RlcCwgZGVsYXkpO1xufVxuXG4vLyBzdG9wIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuLy8gYW5kIHRpZ2dlciBvbkFuaW1hdGlvbkZpbmlzaFxuQW5pbWF0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNTdG9wID0gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGRyYXdDaGFydHModHlwZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHZhciBzZXJpZXMgPSBvcHRzLnNlcmllcztcbiAgdmFyIGNhdGVnb3JpZXMgPSBvcHRzLmNhdGVnb3JpZXM7XG4gIHNlcmllcyA9IGZpbGxTZXJpZXMoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xuICB2YXIgZHVyYXRpb24gPSBvcHRzLmFuaW1hdGlvbiA/IG9wdHMuZHVyYXRpb24gOiAwO1xuICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlICYmIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2Uuc3RvcCgpO1xuICB2YXIgc2VyaWVzTUEgPSBudWxsO1xuICBpZiAodHlwZSA9PSAnY2FuZGxlJykge1xuICAgIGxldCBhdmVyYWdlID0gYXNzaWduKHt9LCBvcHRzLmV4dHJhLmNhbmRsZS5hdmVyYWdlKTtcbiAgICBpZiAoYXZlcmFnZS5zaG93KSB7XG4gICAgICBzZXJpZXNNQSA9IGNhbENhbmRsZU1BKGF2ZXJhZ2UuZGF5LCBhdmVyYWdlLm5hbWUsIGF2ZXJhZ2UuY29sb3IsIHNlcmllc1swXS5kYXRhKTtcbiAgICAgIHNlcmllc01BID0gZmlsbFNlcmllcyhzZXJpZXNNQSwgb3B0cywgY29uZmlnKTtcbiAgICAgIG9wdHMuc2VyaWVzTUEgPSBzZXJpZXNNQTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuc2VyaWVzTUEpIHtcbiAgICAgIHNlcmllc01BID0gb3B0cy5zZXJpZXNNQSA9IGZpbGxTZXJpZXMob3B0cy5zZXJpZXNNQSwgb3B0cywgY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWVzTUEgPSBzZXJpZXM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNlcmllc01BID0gc2VyaWVzO1xuICB9XG5cbiAgLyog6L+H5ruk5o6Jc2hvdz1mYWxzZeeahHNlcmllcyAqL1xuICBvcHRzLl9zZXJpZXNfID0gc2VyaWVzID0gZmlsdGVyU2VyaWVzKHNlcmllcyk7XG5cbiAgLy/ph43mlrDorqHnrpflm77ooajljLrln59cblxuICBvcHRzLmFyZWEgPSBuZXcgQXJyYXkoNCk7XG4gIC8v5aSN5L2N57uY5Zu+5Yy65Z+fXG4gIGZvciAobGV0IGogPSAwOyBqIDwgNDsgaisrKSB7XG4gICAgb3B0cy5hcmVhW2pdID0gb3B0cy5wYWRkaW5nW2pdO1xuICB9XG5cbiAgLy/pgJrov4forqHnrpfkuInlpKfljLrln5/vvJrlm77kvovjgIFY6L2044CBWei9tOeahOWkp+Wwj++8jOehruWumue7mOWbvuWMuuWfn1xuICB2YXIgX2NhbExlZ2VuZERhdGEgPSBjYWxMZWdlbmREYXRhKHNlcmllc01BLCBvcHRzLCBjb25maWcsIG9wdHMuY2hhcnREYXRhKSxcbiAgICBsZWdlbmRIZWlnaHQgPSBfY2FsTGVnZW5kRGF0YS5hcmVhLndob2xlSGVpZ2h0LFxuICAgIGxlZ2VuZFdpZHRoID0gX2NhbExlZ2VuZERhdGEuYXJlYS53aG9sZVdpZHRoO1xuICAvL1RPRE/lup/lvINjb25maWcubGVnZW5kSGVpZ2h05Y+C5pWwXG4gIGNvbmZpZy5sZWdlbmRIZWlnaHQgPSBsZWdlbmRIZWlnaHQ7XG4gIHN3aXRjaCAob3B0cy5sZWdlbmQucG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgb3B0cy5hcmVhWzBdICs9IGxlZ2VuZEhlaWdodDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICBvcHRzLmFyZWFbMl0gKz0gbGVnZW5kSGVpZ2h0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICBvcHRzLmFyZWFbM10gKz0gbGVnZW5kV2lkdGg7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBvcHRzLmFyZWFbMV0gKz0gbGVnZW5kV2lkdGg7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGxldCBfY2FsWUF4aXNEYXRhID0ge30seUF4aXNXaWR0aCA9IDA7XG4gIGlmIChvcHRzLnR5cGUgPT09ICdsaW5lJyB8fCBvcHRzLnR5cGUgPT09ICdjb2x1bW4nIHx8IG9wdHMudHlwZSA9PT0gJ2FyZWEnIHx8IG9wdHMudHlwZSA9PT0gJ21peCcgfHwgb3B0cy50eXBlID09PSAnY2FuZGxlJykge1xuICAgIF9jYWxZQXhpc0RhdGEgPSBjYWxZQXhpc0RhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xuICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XG4gICAgY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xuICAgIG9wdHMuYXJlYVszXSArPSB5QXhpc1dpZHRoO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy55QXhpc1dpZHRoID0geUF4aXNXaWR0aDtcbiAgfVxuICBvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEgPSBfY2FsWUF4aXNEYXRhO1xuXG4gIGlmIChvcHRzLmNhdGVnb3JpZXMgJiYgb3B0cy5jYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSA9IGdldFhBeGlzUG9pbnRzKG9wdHMuY2F0ZWdvcmllcywgb3B0cywgY29uZmlnKTtcbiAgICBsZXQgX2NhbENhdGVnb3JpZXNEYXRhID0gY2FsQ2F0ZWdvcmllc0RhdGEob3B0cy5jYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YS5lYWNoU3BhY2luZyksXG4gICAgICB4QXhpc0hlaWdodCA9IF9jYWxDYXRlZ29yaWVzRGF0YS54QXhpc0hlaWdodCxcbiAgICAgIGFuZ2xlID0gX2NhbENhdGVnb3JpZXNEYXRhLmFuZ2xlO1xuICAgIGNvbmZpZy54QXhpc0hlaWdodCA9IHhBeGlzSGVpZ2h0O1xuICAgIGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfID0gYW5nbGU7XG4gICAgb3B0cy5hcmVhWzJdICs9IHhBeGlzSGVpZ2h0O1xuICAgIG9wdHMuY2hhcnREYXRhLmNhdGVnb3JpZXNEYXRhID0gX2NhbENhdGVnb3JpZXNEYXRhO1xuICB9XG5cbiAgLy/orqHnrpflj7Plr7npvZDlgY/np7vot53nprtcbiAgaWYgKG9wdHMuZW5hYmxlU2Nyb2xsICYmIG9wdHMueEF4aXMuc2Nyb2xsQWxpZ24gPT0gJ3JpZ2h0JyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gPT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBvZmZzZXRMZWZ0ID0gMCxcbiAgICAgIHhBeGlzUG9pbnRzID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLFxuICAgICAgc3RhcnRYID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLnN0YXJ0WCxcbiAgICAgIGVuZFggPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEuZW5kWCxcbiAgICAgIGVhY2hTcGFjaW5nID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xuICAgIGxldCB0b3RhbFdpZHRoID0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgbGV0IHNjcmVlbldpZHRoID0gZW5kWCAtIHN0YXJ0WDtcbiAgICBvZmZzZXRMZWZ0ID0gc2NyZWVuV2lkdGggLSB0b3RhbFdpZHRoO1xuICAgIF90aGlzLnNjcm9sbE9wdGlvbiA9IHtcbiAgICAgIGN1cnJlbnRPZmZzZXQ6IG9mZnNldExlZnQsXG4gICAgICBzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcbiAgICAgIGRpc3RhbmNlOiAwLFxuICAgICAgbGFzdE1vdmVUaW1lOiAwXG4gICAgfTtcbiAgICBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gPSBvZmZzZXRMZWZ0O1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdwaWUnIHx8IHR5cGUgPT09ICdyaW5nJyB8fCB0eXBlID09PSAncm9zZScpIHtcbiAgICBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfID0gb3B0cy5kYXRhTGFiZWwgPT09IGZhbHNlID8gMCA6IGdldFBpZVRleHRNYXhMZW5ndGgoc2VyaWVzTUEpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnd29yZCc6XG4gICAgICBsZXQgd29yZE9wdGlvbiA9IGFzc2lnbih7fSx7XG4gICAgICAgIHR5cGU6ICdub3JtYWwnLFxuICAgICAgICBhdXRvQ29sb3JzOiB0cnVlXG4gICAgICB9LG9wdHMuZXh0cmEud29yZCk7XG4gICAgICBpZihvcHRzLnVwZGF0ZURhdGE9PXRydWUgfHwgb3B0cy51cGRhdGVEYXRhPT11bmRlZmluZWQpe1xuICAgICAgICBvcHRzLmNoYXJ0RGF0YS53b3JkQ2xvdWREYXRhPWdldFdvcmRDbG91ZFBvaW50KG9wdHMsd29yZE9wdGlvbi50eXBlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkcmF3V29yZENsb3VkRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCxwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xuICAgICAgICB9LFxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnbWFwJzpcbiAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICAgIGRyYXdNYXBEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICBicmVhaztcbiAgICBjYXNlICdmdW5uZWwnOlxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmZ1bm5lbERhdGEgPSBkcmF3RnVubmVsRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xuICAgICAgICB9LFxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnbGluZSc6XG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB2YXIgX2RyYXdMaW5lRGF0YVBvaW50cyA9IGRyYXdMaW5lRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcyksXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3TGluZURhdGFQb2ludHMueEF4aXNQb2ludHMsXG4gICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd0xpbmVEYXRhUG9pbnRzLmNhbFBvaW50cyxcbiAgICAgICAgICAgIGVhY2hTcGFjaW5nID0gX2RyYXdMaW5lRGF0YVBvaW50cy5lYWNoU3BhY2luZyxcbiAgICAgICAgICAgIG1pblJhbmdlID0gX2RyYXdMaW5lRGF0YVBvaW50cy5taW5SYW5nZSxcbiAgICAgICAgICAgIG1heFJhbmdlID0gX2RyYXdMaW5lRGF0YVBvaW50cy5tYXhSYW5nZTtcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50cyA9IHhBeGlzUG9pbnRzO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyA9IGNhbFBvaW50cztcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xuICAgICAgICAgIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgICAgICAgaWYgKG9wdHMuZW5hYmxlTWFya0xpbmUgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIGRyYXdNYXJrTGluZShtaW5SYW5nZSwgbWF4UmFuZ2UsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21peCc6XG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB2YXIgX2RyYXdNaXhEYXRhUG9pbnRzID0gZHJhd01peERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd01peERhdGFQb2ludHMueEF4aXNQb2ludHMsXG4gICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd01peERhdGFQb2ludHMuY2FsUG9pbnRzLFxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd01peERhdGFQb2ludHMuZWFjaFNwYWNpbmcsXG4gICAgICAgICAgICBtaW5SYW5nZSA9IF9kcmF3TWl4RGF0YVBvaW50cy5taW5SYW5nZSxcbiAgICAgICAgICAgIG1heFJhbmdlID0gX2RyYXdNaXhEYXRhUG9pbnRzLm1heFJhbmdlO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NvbHVtbic6XG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB2YXIgX2RyYXdDb2x1bW5EYXRhUG9pbnRzID0gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMueEF4aXNQb2ludHMsXG4gICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMuY2FsUG9pbnRzLFxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMuZWFjaFNwYWNpbmcsXG4gICAgICAgICAgICBtaW5SYW5nZSA9IF9kcmF3Q29sdW1uRGF0YVBvaW50cy5taW5SYW5nZSxcbiAgICAgICAgICAgIG1heFJhbmdlID0gX2RyYXdDb2x1bW5EYXRhUG9pbnRzLm1heFJhbmdlO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FyZWEnOlxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xuICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XG4gICAgICAgICAgdmFyIF9kcmF3QXJlYURhdGFQb2ludHMgPSBkcmF3QXJlYURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0FyZWFEYXRhUG9pbnRzLnhBeGlzUG9pbnRzLFxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdBcmVhRGF0YVBvaW50cy5jYWxQb2ludHMsXG4gICAgICAgICAgICBlYWNoU3BhY2luZyA9IF9kcmF3QXJlYURhdGFQb2ludHMuZWFjaFNwYWNpbmcsXG4gICAgICAgICAgICBtaW5SYW5nZSA9IF9kcmF3QXJlYURhdGFQb2ludHMubWluUmFuZ2UsXG4gICAgICAgICAgICBtYXhSYW5nZSA9IF9kcmF3QXJlYURhdGFQb2ludHMubWF4UmFuZ2U7XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcgPSBlYWNoU3BhY2luZztcbiAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChvcHRzLmVuYWJsZU1hcmtMaW5lICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XG4gICAgICAgICAgICBkcmF3TWFya0xpbmUobWluUmFuZ2UsIG1heFJhbmdlLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cyk7XG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmluZyc6XG4gICAgY2FzZSAncGllJzpcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEucGllRGF0YSA9IGRyYXdQaWVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3Jvc2UnOlxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5waWVEYXRhID0gZHJhd1Jvc2VEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JhZGFyJzpcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEucmFkYXJEYXRhID0gZHJhd1JhZGFyRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xuICAgICAgICB9LFxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdhcmNiYXInOlxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5hcmNiYXJEYXRhID0gZHJhd0FyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2dhdWdlJzpcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZ2F1Z2VEYXRhID0gZHJhd0dhdWdlRGF0YVBvaW50cyhjYXRlZ29yaWVzLCBzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2FuZGxlJzpcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgdGltaW5nOiAnZWFzZUluJyxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICAgIGRyYXdYQXhpcyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xuICAgICAgICAgIHZhciBfZHJhd0NhbmRsZURhdGFQb2ludHMgPSBkcmF3Q2FuZGxlRGF0YVBvaW50cyhzZXJpZXMsIHNlcmllc01BLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMueEF4aXNQb2ludHMsXG4gICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMuY2FsUG9pbnRzLFxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMuZWFjaFNwYWNpbmcsXG4gICAgICAgICAgICBtaW5SYW5nZSA9IF9kcmF3Q2FuZGxlRGF0YVBvaW50cy5taW5SYW5nZSxcbiAgICAgICAgICAgIG1heFJhbmdlID0gX2RyYXdDYW5kbGVEYXRhUG9pbnRzLm1heFJhbmdlO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlcmllc01BKSB7XG4gICAgICAgICAgICBkcmF3TGVnZW5kKHNlcmllc01BLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xuICAgICAgICB9LFxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG4vLyBzaW1wbGUgZXZlbnQgaW1wbGVtZW50XG5cbmZ1bmN0aW9uIEV2ZW50KCkge1xuICB0aGlzLmV2ZW50cyA9IHt9O1xufVxuXG5FdmVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHRoaXMuZXZlbnRzW3R5cGVdID0gdGhpcy5ldmVudHNbdHlwZV0gfHwgW107XG4gIHRoaXMuZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xufTtcblxuRXZlbnQucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBhcmdzWzBdO1xuICB2YXIgcGFyYW1zID0gYXJncy5zbGljZSgxKTtcbiAgaWYgKCEhdGhpcy5ldmVudHNbdHlwZV0pIHtcbiAgICB0aGlzLmV2ZW50c1t0eXBlXS5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgQ2hhcnRzID0gZnVuY3Rpb24gQ2hhcnRzKG9wdHMpIHtcbiAgb3B0cy5waXhlbFJhdGlvID0gb3B0cy5waXhlbFJhdGlvID8gb3B0cy5waXhlbFJhdGlvIDogMTtcbiAgb3B0cy5mb250U2l6ZSA9IG9wdHMuZm9udFNpemUgPyBvcHRzLmZvbnRTaXplICogb3B0cy5waXhlbFJhdGlvIDogMTMgKiBvcHRzLnBpeGVsUmF0aW87XG4gIG9wdHMudGl0bGUgPSBhc3NpZ24oe30sIG9wdHMudGl0bGUpO1xuICBvcHRzLnN1YnRpdGxlID0gYXNzaWduKHt9LCBvcHRzLnN1YnRpdGxlKTtcbiAgb3B0cy5kdXJhdGlvbiA9IG9wdHMuZHVyYXRpb24gPyBvcHRzLmR1cmF0aW9uIDogMTAwMDtcbiAgb3B0cy55QXhpcyA9IGFzc2lnbih7fSwge1xuICAgIGdyaWRUeXBlOiAnc29saWQnLFxuICAgIGRhc2hMZW5ndGg6IDQgKiBvcHRzLnBpeGVsUmF0aW9cbiAgfSwgb3B0cy55QXhpcyk7XG4gIG9wdHMueEF4aXMgPSBhc3NpZ24oe30sIHtcbiAgICByb3RhdGVMYWJlbDogZmFsc2UsXG4gICAgdHlwZTogJ2NhbGlicmF0aW9uJyxcbiAgICBncmlkVHlwZTogJ3NvbGlkJyxcbiAgICBkYXNoTGVuZ3RoOiA0ICogb3B0cy5waXhlbFJhdGlvLFxuICAgIHNjcm9sbEFsaWduOiAnbGVmdCcsXG4gICAgYm91bmRhcnlHYXA6J2NlbnRlcidcbiAgfSwgb3B0cy54QXhpcyk7XG4gIG9wdHMubGVnZW5kID0gYXNzaWduKHt9LCB7XG4gICAgc2hvdzogdHJ1ZSxcbiAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgZmxvYXQ6ICdjZW50ZXInLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgcGFkZGluZzogNSxcbiAgICBtYXJnaW46IDUsXG4gICAgaXRlbUdhcDogMTAsXG4gICAgZm9udFNpemU6IG9wdHMuZm9udFNpemUsXG4gICAgbGluZUhlaWdodDogb3B0cy5mb250U2l6ZSxcbiAgICBmb250Q29sb3I6ICcjMzMzMzMzJyxcbiAgICBmb3JtYXQ6IHt9LFxuICAgIGhpZGRlbkNvbG9yOiAnI0NFQ0VDRSdcbiAgfSwgb3B0cy5sZWdlbmQpO1xuICBvcHRzLmxlZ2VuZC5ib3JkZXJXaWR0aCA9IG9wdHMubGVnZW5kLmJvcmRlcldpZHRoICogb3B0cy5waXhlbFJhdGlvO1xuICBvcHRzLmxlZ2VuZC5pdGVtR2FwID0gb3B0cy5sZWdlbmQuaXRlbUdhcCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgb3B0cy5sZWdlbmQucGFkZGluZyA9IG9wdHMubGVnZW5kLnBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XG4gIG9wdHMubGVnZW5kLm1hcmdpbiA9IG9wdHMubGVnZW5kLm1hcmdpbiAqIG9wdHMucGl4ZWxSYXRpbztcbiAgb3B0cy5leHRyYSA9IGFzc2lnbih7fSwgb3B0cy5leHRyYSk7XG4gIG9wdHMucm90YXRlID0gb3B0cy5yb3RhdGUgPyB0cnVlIDogZmFsc2U7XG4gIG9wdHMuYW5pbWF0aW9uID0gb3B0cy5hbmltYXRpb24gPyB0cnVlIDogZmFsc2U7XG5cbiAgbGV0IGNvbmZpZyQkMSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XG4gIGNvbmZpZyQkMS5jb2xvcnMgPSBvcHRzLmNvbG9ycyA/IG9wdHMuY29sb3JzIDogY29uZmlnJCQxLmNvbG9ycztcbiAgY29uZmlnJCQxLnlBeGlzVGl0bGVXaWR0aCA9IG9wdHMueUF4aXMuZGlzYWJsZWQgIT09IHRydWUgJiYgb3B0cy55QXhpcy50aXRsZSA/IGNvbmZpZyQkMS55QXhpc1RpdGxlV2lkdGggOiAwO1xuICBpZiAob3B0cy50eXBlID09ICdwaWUnIHx8IG9wdHMudHlwZSA9PSAncmluZycpIHtcbiAgICBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBvcHRzLmV4dHJhLnBpZS5sYWJlbFdpZHRoICogb3B0cy5waXhlbFJhdGlvIHx8IGNvbmZpZyQkMS5waWVDaGFydExpbmVQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xuICB9XG4gIGlmIChvcHRzLnR5cGUgPT0gJ3Jvc2UnKSB7XG4gICAgY29uZmlnJCQxLnBpZUNoYXJ0TGluZVBhZGRpbmcgPSBvcHRzLmRhdGFMYWJlbCA9PT0gZmFsc2UgPyAwIDogb3B0cy5leHRyYS5yb3NlLmxhYmVsV2lkdGggKiBvcHRzLnBpeGVsUmF0aW8gfHwgY29uZmlnJCQxLnBpZUNoYXJ0TGluZVBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XG4gIH1cbiAgY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgPSBvcHRzLmRhdGFMYWJlbCA9PT0gZmFsc2UgPyAwIDogY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XG4gIGNvbmZpZyQkMS55QXhpc1NwbGl0ID0gb3B0cy55QXhpcy5zcGxpdE51bWJlciA/IG9wdHMueUF4aXMuc3BsaXROdW1iZXIgOiBjb25maWcueUF4aXNTcGxpdDtcblxuICAvL+Wxj+W5leaXi+i9rFxuICBjb25maWckJDEucm90YXRlID0gb3B0cy5yb3RhdGU7XG4gIGlmIChvcHRzLnJvdGF0ZSkge1xuICAgIGxldCB0ZW1wV2lkdGggPSBvcHRzLndpZHRoO1xuICAgIGxldCB0ZW1wSGVpZ2h0ID0gb3B0cy5oZWlnaHQ7XG4gICAgb3B0cy53aWR0aCA9IHRlbXBIZWlnaHQ7XG4gICAgb3B0cy5oZWlnaHQgPSB0ZW1wV2lkdGg7XG4gIH1cblxuICAvL+mAgumFjemrmOWIhuWxj1xuICBvcHRzLnBhZGRpbmcgPSBvcHRzLnBhZGRpbmcgPyBvcHRzLnBhZGRpbmcgOiBjb25maWckJDEucGFkZGluZztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBvcHRzLnBhZGRpbmdbaV0gKj0gb3B0cy5waXhlbFJhdGlvO1xuICB9XG4gIGNvbmZpZyQkMS55QXhpc1dpZHRoID0gY29uZmlnLnlBeGlzV2lkdGggKiBvcHRzLnBpeGVsUmF0aW87XG4gIGNvbmZpZyQkMS54QXhpc0hlaWdodCA9IGNvbmZpZy54QXhpc0hlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgaWYgKG9wdHMuZW5hYmxlU2Nyb2xsICYmIG9wdHMueEF4aXMuc2Nyb2xsU2hvdykge1xuICAgIGNvbmZpZyQkMS54QXhpc0hlaWdodCArPSA2ICogb3B0cy5waXhlbFJhdGlvO1xuICB9XG4gIGNvbmZpZyQkMS54QXhpc0xpbmVIZWlnaHQgPSBjb25maWcueEF4aXNMaW5lSGVpZ2h0ICogb3B0cy5waXhlbFJhdGlvO1xuICBjb25maWckJDEubGVnZW5kSGVpZ2h0ID0gY29uZmlnLmxlZ2VuZEhlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcbiAgY29uZmlnJCQxLmZvbnRTaXplID0gb3B0cy5mb250U2l6ZTtcbiAgY29uZmlnJCQxLnRpdGxlRm9udFNpemUgPSBjb25maWcudGl0bGVGb250U2l6ZSAqIG9wdHMucGl4ZWxSYXRpbztcbiAgY29uZmlnJCQxLnN1YnRpdGxlRm9udFNpemUgPSBjb25maWcuc3VidGl0bGVGb250U2l6ZSAqIG9wdHMucGl4ZWxSYXRpbztcbiAgY29uZmlnJCQxLnRvb2xUaXBQYWRkaW5nID0gY29uZmlnLnRvb2xUaXBQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xuICBjb25maWckJDEudG9vbFRpcExpbmVIZWlnaHQgPSBjb25maWcudG9vbFRpcExpbmVIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW87XG4gIGNvbmZpZyQkMS5jb2x1bWVQYWRkaW5nID0gY29uZmlnLmNvbHVtZVBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XG4gIG9wdHMuJHRoaXMgPSBvcHRzLiR0aGlzID8gb3B0cy4kdGhpcyA6IHRoaXM7XG4gIFxuICB0aGlzLmNvbnRleHQgPSB1bmkuY3JlYXRlQ2FudmFzQ29udGV4dChvcHRzLmNhbnZhc0lkLCBvcHRzLiR0aGlzKTtcbiAgLyog5YW85a655Y6f55SfSDVcbiAgdGhpcy5jb250ZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0cy5jYW52YXNJZCkuZ2V0Q29udGV4dChcIjJkXCIpO1xuICB0aGlzLmNvbnRleHQuc2V0U3Ryb2tlU3R5bGUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuc3Ryb2tlU3R5bGU9ZTsgfVxuICB0aGlzLmNvbnRleHQuc2V0TGluZVdpZHRoID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmxpbmVXaWR0aD1lOyB9XG4gIHRoaXMuY29udGV4dC5zZXRMaW5lQ2FwID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmxpbmVDYXA9ZTsgfVxuICB0aGlzLmNvbnRleHQuc2V0Rm9udFNpemUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuZm9udD1lK1wicHggc2Fucy1zZXJpZlwiOyB9XG4gIHRoaXMuY29udGV4dC5zZXRGaWxsU3R5bGUgPSBmdW5jdGlvbihlKXsgcmV0dXJuIHRoaXMuZmlsbFN0eWxlPWU7IH1cbiAgdGhpcy5jb250ZXh0LmRyYXcgPSBmdW5jdGlvbigpeyB9XG4gICovXG5cbiAgb3B0cy5jaGFydERhdGEgPSB7fTtcbiAgdGhpcy5ldmVudCA9IG5ldyBFdmVudCgpO1xuICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcbiAgICBjdXJyZW50T2Zmc2V0OiAwLFxuICAgIHN0YXJ0VG91Y2hYOiAwLFxuICAgIGRpc3RhbmNlOiAwLFxuICAgIGxhc3RNb3ZlVGltZTogMFxuICB9O1xuXG4gIHRoaXMub3B0cyA9IG9wdHM7XG4gIHRoaXMuY29uZmlnID0gY29uZmlnJCQxO1xuXG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIGNvbmZpZyQkMSwgdGhpcy5jb250ZXh0KTtcbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUudXBkYXRlRGF0YSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHRoaXMub3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCBkYXRhKTtcbiAgdGhpcy5vcHRzLnVwZGF0ZURhdGEgPSB0cnVlO1xuICBsZXQgc2Nyb2xsUG9zaXRpb24gPSBkYXRhLnNjcm9sbFBvc2l0aW9uIHx8ICdjdXJyZW50JztcbiAgc3dpdGNoIChzY3JvbGxQb3NpdGlvbikge1xuICAgIGNhc2UgJ2N1cnJlbnQnOlxuICAgICAgdGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV8gPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICB0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IDA7XG4gICAgICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcbiAgICAgICAgY3VycmVudE9mZnNldDogMCxcbiAgICAgICAgc3RhcnRUb3VjaFg6IDAsXG4gICAgICAgIGRpc3RhbmNlOiAwLFxuICAgICAgICBsYXN0TW92ZVRpbWU6IDBcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBsZXQgX2NhbFlBeGlzRGF0YSA9IGNhbFlBeGlzRGF0YSh0aGlzLm9wdHMuc2VyaWVzLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnKSxcbiAgICAgICAgeUF4aXNXaWR0aCA9IF9jYWxZQXhpc0RhdGEueUF4aXNXaWR0aDtcbiAgICAgIHRoaXMuY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xuICAgICAgbGV0IG9mZnNldExlZnQgPSAwO1xuICAgICAgbGV0IF9nZXRYQXhpc1BvaW50czAgPSBnZXRYQXhpc1BvaW50cyh0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXG4gICAgICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzMC54QXhpc1BvaW50cyxcbiAgICAgICAgc3RhcnRYID0gX2dldFhBeGlzUG9pbnRzMC5zdGFydFgsXG4gICAgICAgIGVuZFggPSBfZ2V0WEF4aXNQb2ludHMwLmVuZFgsXG4gICAgICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzMC5lYWNoU3BhY2luZztcbiAgICAgIGxldCB0b3RhbFdpZHRoID0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgICBsZXQgc2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xuICAgICAgb2Zmc2V0TGVmdCA9IHNjcmVlbldpZHRoIC0gdG90YWxXaWR0aDtcbiAgICAgIHRoaXMuc2Nyb2xsT3B0aW9uID0ge1xuICAgICAgICBjdXJyZW50T2Zmc2V0OiBvZmZzZXRMZWZ0LFxuICAgICAgICBzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcbiAgICAgICAgZGlzdGFuY2U6IDAsXG4gICAgICAgIGxhc3RNb3ZlVGltZTogMFxuICAgICAgfTtcbiAgICAgIHRoaXMub3B0cy5fc2Nyb2xsRGlzdGFuY2VfID0gb2Zmc2V0TGVmdDtcbiAgICAgIGJyZWFrO1xuICB9XG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUuem9vbSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50O1xuICBpZiAodGhpcy5vcHRzLmVuYWJsZVNjcm9sbCAhPT0gdHJ1ZSkge1xuICAgIGNvbnNvbGUubG9nKCfor7flkK/nlKjmu5rliqjmnaHlkI7kvb/nlKjvvIEnKVxuICAgIHJldHVybjtcbiAgfVxuICAvL+W9k+WJjeWxj+W5leS4remXtOeCuVxuICBsZXQgY2VudGVyUG9pbnQgPSBNYXRoLnJvdW5kKE1hdGguYWJzKHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQpIC8gdGhpcy5vcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZykgKyBNYXRoLnJvdW5kKFxuICAgIHRoaXMub3B0cy54QXhpcy5pdGVtQ291bnQgLyAyKTtcbiAgdGhpcy5vcHRzLmFuaW1hdGlvbiA9IGZhbHNlO1xuICB0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50ID0gdmFsLml0ZW1Db3VudDtcbiAgLy/ph43mlrDorqHnrpd46L205YGP56e76Led56a7XG4gIGxldCBfY2FsWUF4aXNEYXRhID0gY2FsWUF4aXNEYXRhKHRoaXMub3B0cy5zZXJpZXMsIHRoaXMub3B0cywgdGhpcy5jb25maWcpLFxuICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XG4gIHRoaXMuY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xuICBsZXQgb2Zmc2V0TGVmdCA9IDA7XG4gIGxldCBfZ2V0WEF4aXNQb2ludHMwID0gZ2V0WEF4aXNQb2ludHModGhpcy5vcHRzLmNhdGVnb3JpZXMsIHRoaXMub3B0cywgdGhpcy5jb25maWcpLFxuICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzMC54QXhpc1BvaW50cyxcbiAgICBzdGFydFggPSBfZ2V0WEF4aXNQb2ludHMwLnN0YXJ0WCxcbiAgICBlbmRYID0gX2dldFhBeGlzUG9pbnRzMC5lbmRYLFxuICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzMC5lYWNoU3BhY2luZztcbiAgbGV0IGNlbnRlckxlZnQgPSBlYWNoU3BhY2luZyAqIGNlbnRlclBvaW50O1xuICBsZXQgc2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xuICBsZXQgTWF4TGVmdCA9IHNjcmVlbldpZHRoIC0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XG4gIG9mZnNldExlZnQgPSBzY3JlZW5XaWR0aCAvIDIgLSBjZW50ZXJMZWZ0O1xuICBpZiAob2Zmc2V0TGVmdCA+IDApIHtcbiAgICBvZmZzZXRMZWZ0ID0gMDtcbiAgfVxuICBpZiAob2Zmc2V0TGVmdCA8IE1heExlZnQpIHtcbiAgICBvZmZzZXRMZWZ0ID0gTWF4TGVmdDtcbiAgfVxuICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcbiAgICBjdXJyZW50T2Zmc2V0OiBvZmZzZXRMZWZ0LFxuICAgIHN0YXJ0VG91Y2hYOiBvZmZzZXRMZWZ0LFxuICAgIGRpc3RhbmNlOiAwLFxuICAgIGxhc3RNb3ZlVGltZTogMFxuICB9O1xuICB0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IG9mZnNldExlZnQ7XG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlICYmIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2Uuc3RvcCgpO1xufTtcblxuQ2hhcnRzLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdGhpcy5ldmVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUuZ2V0Q3VycmVudERhdGFJbmRleCA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9IGVsc2Uge1xuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9XG4gIGlmICh0b3VjaGVzKSB7XG4gICAgbGV0IF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcbiAgICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdwaWUnIHx8IHRoaXMub3B0cy50eXBlID09PSAncmluZycgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyb3NlJykge1xuICAgICAgcmV0dXJuIGZpbmRQaWVDaGFydEN1cnJlbnRJbmRleCh7XG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxuICAgICAgICB5OiBfdG91Y2hlcyQueVxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5waWVEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0cy50eXBlID09PSAncmFkYXInKSB7XG4gICAgICByZXR1cm4gZmluZFJhZGFyQ2hhcnRDdXJyZW50SW5kZXgoe1xuICAgICAgICB4OiBfdG91Y2hlcyQueCxcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcbiAgICAgIH0sIHRoaXMub3B0cy5jaGFydERhdGEucmFkYXJEYXRhLCB0aGlzLm9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdmdW5uZWwnKSB7XG4gICAgICByZXR1cm4gZmluZEZ1bm5lbENoYXJ0Q3VycmVudEluZGV4KHtcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXG4gICAgICAgIHk6IF90b3VjaGVzJC55XG4gICAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLmZ1bm5lbERhdGEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdtYXAnKSB7XG4gICAgICByZXR1cm4gZmluZE1hcENoYXJ0Q3VycmVudEluZGV4KHtcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXG4gICAgICAgIHk6IF90b3VjaGVzJC55XG4gICAgICB9LCB0aGlzLm9wdHMpO1xuICAgIH1lbHNlIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3dvcmQnKSB7XG4gICAgICByZXR1cm4gZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleCh7XG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxuICAgICAgICB5OiBfdG91Y2hlcyQueVxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS53b3JkQ2xvdWREYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbmRDdXJyZW50SW5kZXgoe1xuICAgICAgICB4OiBfdG91Y2hlcyQueCxcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcbiAgICAgIH0sIHRoaXMub3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMsIHRoaXMub3B0cywgdGhpcy5jb25maWcsIE1hdGguYWJzKHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuQ2hhcnRzLnByb3RvdHlwZS5nZXRMZWdlbmREYXRhSW5kZXggPSBmdW5jdGlvbihlKSB7XG4gIHZhciB0b3VjaGVzID0gbnVsbDtcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgfSBlbHNlIHtcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgfVxuICBpZiAodG91Y2hlcykge1xuICAgIGxldCBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XG4gICAgcmV0dXJuIGZpbmRMZWdlbmRJbmRleCh7XG4gICAgICB4OiBfdG91Y2hlcyQueCxcbiAgICAgIHk6IF90b3VjaGVzJC55XG4gICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5sZWdlbmREYXRhKTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5DaGFydHMucHJvdG90eXBlLnRvdWNoTGVnZW5kID0gZnVuY3Rpb24oZSkge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9IGVsc2Uge1xuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9XG4gIGlmICh0b3VjaGVzKSB7XG4gICAgdmFyIF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldExlZ2VuZERhdGFJbmRleChlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5vcHRzLnNlcmllc1tpbmRleF0uc2hvdyA9ICF0aGlzLm9wdHMuc2VyaWVzW2luZGV4XS5zaG93O1xuICAgICAgdGhpcy5vcHRzLmFuaW1hdGlvbiA9IG9wdGlvbi5hbmltYXRpb24gPyB0cnVlIDogZmFsc2U7XG4gICAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgdGhpcy5vcHRzLnR5cGUsIHRoaXMub3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XG4gICAgfVxuICB9XG5cbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUuc2hvd1Rvb2xUaXAgPSBmdW5jdGlvbihlKSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgdG91Y2hlcyA9IG51bGw7XG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gIH0gZWxzZSB7XG4gICAgdG91Y2hlcyA9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XG4gIH1cbiAgaWYgKCF0b3VjaGVzKSB7XG4gICAgY29uc29sZS5sb2coXCJ0b3VjaEVycm9yXCIpO1xuICB9XG4gIHZhciBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XG4gIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcbiAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xuICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXG4gICAgYW5pbWF0aW9uOiBmYWxzZVxuICB9KTtcbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnbGluZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdhcmVhJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ2NvbHVtbicpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xuICAgICAgaWYgKHNlcmllc0RhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBfZ2V0VG9vbFRpcERhdGEgPSBnZXRUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLG9wdGlvbiksXG4gICAgICAgICAgdGV4dExpc3QgPSBfZ2V0VG9vbFRpcERhdGEudGV4dExpc3QsXG4gICAgICAgICAgb2Zmc2V0ID0gX2dldFRvb2xUaXBEYXRhLm9mZnNldDtcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcbiAgICAgICAgb3B0cy50b29sdGlwID0ge1xuICAgICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBvcHRpb246IG9wdGlvbixcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XG4gIH1cbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnbWl4Jykge1xuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxuICAgICAgICBhbmltYXRpb246IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xuICAgICAgaWYgKHNlcmllc0RhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBfZ2V0TWl4VG9vbFRpcERhdGEgPSBnZXRNaXhUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLG9wdGlvbiksXG4gICAgICAgICAgdGV4dExpc3QgPSBfZ2V0TWl4VG9vbFRpcERhdGEudGV4dExpc3QsXG4gICAgICAgICAgb2Zmc2V0ID0gX2dldE1peFRvb2xUaXBEYXRhLm9mZnNldDtcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcbiAgICAgICAgb3B0cy50b29sdGlwID0ge1xuICAgICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBvcHRpb246IG9wdGlvbixcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XG4gIH1cbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnY2FuZGxlJykge1xuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxuICAgICAgICBhbmltYXRpb246IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xuICAgICAgaWYgKHNlcmllc0RhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBfZ2V0VG9vbFRpcERhdGEgPSBnZXRDYW5kbGVUb29sVGlwRGF0YSh0aGlzLm9wdHMuc2VyaWVzWzBdLmRhdGEsIHNlcmllc0RhdGEsIHRoaXMub3B0cy5jaGFydERhdGEuY2FsUG9pbnRzLFxuICAgICAgICAgICAgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLCB0aGlzLm9wdHMuZXh0cmEuY2FuZGxlLCBvcHRpb24pLFxuICAgICAgICAgIHRleHRMaXN0ID0gX2dldFRvb2xUaXBEYXRhLnRleHRMaXN0LFxuICAgICAgICAgIG9mZnNldCA9IF9nZXRUb29sVGlwRGF0YS5vZmZzZXQ7XG4gICAgICAgIG9mZnNldC55ID0gX3RvdWNoZXMkLnk7XG4gICAgICAgIG9wdHMudG9vbHRpcCA9IHtcbiAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgb3B0aW9uOiBvcHRpb24sXG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xuICB9XG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3BpZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyaW5nJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ3Jvc2UnfHx0aGlzLm9wdHMudHlwZSA9PT0gJ2Z1bm5lbCcgKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KGUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XG4gICAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XG4gICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdmFyIHNlcmllc0RhdGEgPSB0aGlzLm9wdHMuX3Nlcmllc19baW5kZXhdO1xuICAgICAgdmFyIHRleHRMaXN0ID0gW3tcbiAgICAgICAgdGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoc2VyaWVzRGF0YSkgOiBzZXJpZXNEYXRhLm5hbWUgKyAnOiAnICsgc2VyaWVzRGF0YS5kYXRhLFxuICAgICAgICBjb2xvcjogc2VyaWVzRGF0YS5jb2xvclxuICAgICAgfV07XG4gICAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgICB4OiBfdG91Y2hlcyQueCxcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcbiAgICAgIH07XG4gICAgICBvcHRzLnRvb2x0aXAgPSB7XG4gICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIG9wdGlvbjogb3B0aW9uLFxuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH07XG4gICAgfVxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xuICB9XG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ21hcCd8fHRoaXMub3B0cy50eXBlID09PSAnd29yZCcpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcbiAgICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgc2VyaWVzRGF0YSA9IHRoaXMub3B0cy5fc2VyaWVzX1tpbmRleF07XG4gICAgICB2YXIgdGV4dExpc3QgPSBbe1xuICAgICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChzZXJpZXNEYXRhKSA6IHNlcmllc0RhdGEucHJvcGVydGllcy5uYW1lICxcbiAgICAgICAgY29sb3I6IHNlcmllc0RhdGEuY29sb3JcbiAgICAgIH1dO1xuICAgICAgdmFyIG9mZnNldCA9IHtcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXG4gICAgICAgIHk6IF90b3VjaGVzJC55XG4gICAgICB9O1xuICAgICAgb3B0cy50b29sdGlwID0ge1xuICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBvcHRpb246IG9wdGlvbixcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9O1xuICAgIH1cbiAgICBvcHRzLnVwZGF0ZURhdGEgPSBmYWxzZTtcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcbiAgfVxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdyYWRhcicpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcbiAgICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgc2VyaWVzRGF0YSA9IGdldFNlcmllc0RhdGFJdGVtKHRoaXMub3B0cy5zZXJpZXMsIGluZGV4KTtcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB2YXIgdGV4dExpc3QgPSBzZXJpZXNEYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvbi5mb3JtYXQgPyBvcHRpb24uZm9ybWF0KGl0ZW0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcbiAgICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB7XG4gICAgICAgICAgeDogX3RvdWNoZXMkLngsXG4gICAgICAgICAgeTogX3RvdWNoZXMkLnlcbiAgICAgICAgfTtcbiAgICAgICAgb3B0cy50b29sdGlwID0ge1xuICAgICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICBvcHRpb246IG9wdGlvbixcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XG4gIH1cbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24oZGlzdGFuY2UpIHtcbiAgdGhpcy5zY3JvbGxPcHRpb24gPSB7XG4gICAgY3VycmVudE9mZnNldDogZGlzdGFuY2UsXG4gICAgc3RhcnRUb3VjaFg6IGRpc3RhbmNlLFxuICAgIGRpc3RhbmNlOiAwLFxuICAgIGxhc3RNb3ZlVGltZTogMFxuICB9O1xuICBsZXQgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XG4gICAgX3Njcm9sbERpc3RhbmNlXzogZGlzdGFuY2UsXG4gICAgYW5pbWF0aW9uOiBmYWxzZVxuICB9KTtcbiAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcbn07XG5cbkNoYXJ0cy5wcm90b3R5cGUuc2Nyb2xsU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gIHZhciB0b3VjaGVzID0gbnVsbDtcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgfSBlbHNlIHtcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgfVxuICB2YXIgX3RvdWNoZXMkID0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xuICBpZiAodG91Y2hlcyAmJiB0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XG4gICAgdGhpcy5zY3JvbGxPcHRpb24uc3RhcnRUb3VjaFggPSBfdG91Y2hlcyQueDtcbiAgfVxufTtcblxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGwgPSBmdW5jdGlvbihlKSB7XG4gIGlmICh0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgPT09IDApIHtcbiAgICB0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG4gIGxldCBMaW1pdCA9IHRoaXMub3B0cy5leHRyYS50b3VjaE1vdmVMaW1pdCB8fCAyMDtcbiAgbGV0IGN1cnJNb3ZlVGltZSA9IERhdGUubm93KCk7XG4gIGxldCBkdXJhdGlvbiA9IGN1cnJNb3ZlVGltZSAtIHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZTtcbiAgaWYgKGR1cmF0aW9uIDwgTWF0aC5mbG9vcigxMDAwIC8gTGltaXQpKSByZXR1cm47XG4gIHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZSA9IGN1cnJNb3ZlVGltZTtcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9IGVsc2Uge1xuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9XG4gIGlmICh0b3VjaGVzICYmIHRoaXMub3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcbiAgICB2YXIgX3RvdWNoZXMkID0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xuICAgIHZhciBfZGlzdGFuY2U7XG4gICAgX2Rpc3RhbmNlID0gX3RvdWNoZXMkLnggLSB0aGlzLnNjcm9sbE9wdGlvbi5zdGFydFRvdWNoWDtcbiAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XG4gICAgdmFyIHZhbGlkRGlzdGFuY2UgPSBjYWxWYWxpZERpc3RhbmNlKGN1cnJlbnRPZmZzZXQgKyBfZGlzdGFuY2UsIHRoaXMub3B0cy5jaGFydERhdGEsIHRoaXMuY29uZmlnLCB0aGlzLm9wdHMpO1xuICAgIHRoaXMuc2Nyb2xsT3B0aW9uLmRpc3RhbmNlID0gX2Rpc3RhbmNlID0gdmFsaWREaXN0YW5jZSAtIGN1cnJlbnRPZmZzZXQ7XG4gICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xuICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCArIF9kaXN0YW5jZSxcbiAgICAgIGFuaW1hdGlvbjogZmFsc2VcbiAgICB9KTtcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcbiAgICByZXR1cm4gY3VycmVudE9mZnNldCArIF9kaXN0YW5jZTtcbiAgfVxufTtcblxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGxFbmQgPSBmdW5jdGlvbihlKSB7XG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XG4gICAgdmFyIF9zY3JvbGxPcHRpb24gPSB0aGlzLnNjcm9sbE9wdGlvbixcbiAgICAgIGN1cnJlbnRPZmZzZXQgPSBfc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQsXG4gICAgICBkaXN0YW5jZSA9IF9zY3JvbGxPcHRpb24uZGlzdGFuY2U7XG4gICAgdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCA9IGN1cnJlbnRPZmZzZXQgKyBkaXN0YW5jZTtcbiAgICB0aGlzLnNjcm9sbE9wdGlvbi5kaXN0YW5jZSA9IDA7XG4gIH1cbn07XG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBDaGFydHM7XG4gIC8vZXhwb3J0IGRlZmF1bHQgQ2hhcnRzOy8v5bu66K6u5L2/55Sobm9kZWpz55qEbW9kdWxl5a+85Ye65pa55byP77yM5aaC5oql6ZSZ6K+35L2/55SoZXhwb3J05pa55byP5a+85Ye6XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///161\n");

/***/ }),

/***/ 17:
/*!*************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/config/api.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _module$exports;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} //  const ServerUrl = \"https://www.144f.com\"; // 生产环境\n\n//const ServerUrl = \"https://www.qingfangche.net\"; // 开发环境\n//const ServerUrl = \"http://192.168.11.141\"; \nvar ServerUrl = \"http://test.144f.com:8080/qfc-web\";\nvar ChooseUrl = ServerUrl + '/choose/';\nvar VERSION = '3.3.72'; // 小程序版本\n\nmodule.exports = (_module$exports = {\n  VERSION: VERSION,\n  ChooseUrl: ChooseUrl,\n  //下拉选择\n\n  getRegion: ChooseUrl + \"region\", //区域\n  getCoordinate: ChooseUrl + \"coordinate\", //配合度\n  getType: ChooseUrl + \"type\", //客户类型\n  getCompanyScale: ChooseUrl + \"scale\", //客户规模\n  getSource: ChooseUrl + \"source\", //客户来源\n  getBusinessModel: ChooseUrl + \"businessModel\", //公司经营模式\n  getMainProduct: ChooseUrl + \"mainProduct\", //主营产品\n  getOperateCapital: ChooseUrl + \"operateCapital\", //资金状况\n  getOperateCredit: ChooseUrl + \"operateCredit\", //信用状况\n  getOperateOperation: ChooseUrl + \"operateOperation\", //运营状况\n  getOperateWom: ChooseUrl + \"operateWom\", //口碑\n  getQuality: ChooseUrl + \"quality\", //品质定位\n  getPost: ChooseUrl + \"post\", //角色\n  getChannel: ChooseUrl + \"channe\", //渠道\n  getCostPerformance: ChooseUrl + \"costPerformance\", //性价比\n  getIdentity: ChooseUrl + \"identity\", //身份\n  getPotential: ChooseUrl + \"potential\", //发展潜力\n  getPriceSensitivity: ChooseUrl + \"priceSensitivity\", //用户价格敏感度\n  getCooperationIntention: ChooseUrl + \"cooperationIntention\", //合作意向\n  getCharacterFeatures: ChooseUrl + \"characterFeatures\", //性格特点\n  getManageFeatures: ChooseUrl + \"manageFeatures\", //经营者特征\n  getManagementPosition: ChooseUrl + \"managementPosition\", //经营定位\n\n\n  //用户登陆注册\n\n  login: ServerUrl + '/ul/login', //用户登陆 post\n  chanage_password: ServerUrl + '/ul/change_password', // 修改密码 post\n  verification: ServerUrl + '/ul/verification', //短信验证码 post\n  registration: ServerUrl + '/ul/registration', //用户注册 post\n  getNewsNum: ServerUrl + '/um/count', //未读信息\n  noReadList: ServerUrl + '/um/list', //未读信息列表 post\n\n  //个人中心\n  userDetails: ServerUrl + '/user/details', //用户个人信息\n  pupList: ServerUrl + '/pup/list', //查询用户职位列表\n  pupDefault: ServerUrl + '/pup/default', //获取默认职位\n  bsList: ServerUrl + '/cm/bsList', //买/卖帮办客户列表\n  dmList: ServerUrl + '/cm/dmList', //销售总监，区域经理客户列表\n\n  cmDetail: ServerUrl + '/cm/details', //客户详情\n  updateCustomer: ServerUrl + '/cm/updateCustomer', //更新联系人\n  linkMan: ServerUrl + '/cm/linkman', //公司联系人\n  linkmanDetails: ServerUrl + '/cm/linkmanDetails', //联系人详情\n  linkmanDel: ServerUrl + '/cm/linkmanDel', //删除联系人\n  linkmanAdd: ServerUrl + '/cm/linkmanAdd', //公司联系人添加 post\n  linkmanUpdate: ServerUrl + '/cm/linkmanUpdate', //更新联系人 post\n  operation: ServerUrl + '/cm/operation', //获取公司经营状况\n  rival: ServerUrl + '/cm/rival', //公司竞争对手列表\n  rivalDetails: ServerUrl + '/cm/rivalDetails', //竞争对手详情\n  rivalDel: ServerUrl + '/cm/rivalDel', //删除竞争对手\n  rivalUpdate: ServerUrl + '/cm/rivalUpdate', //更新竞争对手\n  buyAddCustomer: ServerUrl + '/cm/buyAddCustomer' }, _defineProperty(_module$exports, \"updateCustomer\",\nServerUrl + '/cm/updateCustomer'), _defineProperty(_module$exports, \"sellCusmterCreated\",\nServerUrl + \"/cm/sellAddCustomer\"), _defineProperty(_module$exports, \"operationUpdate\",\nServerUrl + \"/cm/operationUpdate\"), _defineProperty(_module$exports, \"operationAdd\",\nServerUrl + '/cm/operationAdd'), _defineProperty(_module$exports, \"rivalAdd\",\nServerUrl + '/cm/rivalAdd'), _defineProperty(_module$exports, \"dmList\",\nServerUrl + '/cm/dmList'), _defineProperty(_module$exports, \"dmCount\",\nServerUrl + '/cm/dmCount'), _defineProperty(_module$exports, \"majordomoDel\",\nServerUrl + '/cm/majordomoDel'), _defineProperty(_module$exports, \"managerDel\",\nServerUrl + '/cm/managerDel'), _defineProperty(_module$exports, \"managerList\",\nServerUrl + '/cm/managerList'), _defineProperty(_module$exports, \"deputyList\",\nServerUrl + '/cm/deputyList'), _defineProperty(_module$exports, \"managerAllot\",\nServerUrl + '/cm/managerAllot'), _defineProperty(_module$exports, \"majordomoAllot\",\nServerUrl + '/cm/majordomoAllot'), _defineProperty(_module$exports, \"inquiryType\",\n\nServerUrl + '/choose/inquiryType'), _defineProperty(_module$exports, \"atom\",\nServerUrl + '/choose/atom'), _defineProperty(_module$exports, \"atomAdd\",\nServerUrl + '/choose/atomAdd'), _defineProperty(_module$exports, \"series\",\nServerUrl + '/choose/series'), _defineProperty(_module$exports, \"seriesAdd\",\nServerUrl + '/choose/seriesAdd'), _defineProperty(_module$exports, \"style\",\nServerUrl + '/choose/style'), _defineProperty(_module$exports, \"styleAdd\",\nServerUrl + '/choose/styleAdd'), _defineProperty(_module$exports, \"clothType\",\nServerUrl + '/choose/clothType'), _defineProperty(_module$exports, \"densityUnit\",\nServerUrl + '/choose/densityUnit'), _defineProperty(_module$exports, \"gramWeightUnit\",\nServerUrl + '/choose/gramWeightUnit'), _defineProperty(_module$exports, \"quantityUnit\",\nServerUrl + '/choose/quantityUnit'), _defineProperty(_module$exports, \"buyerList\",\nServerUrl + '/bInquiry/buyerList'), _defineProperty(_module$exports, \"addInquiry\",\nServerUrl + '/bInquiry/add'), _defineProperty(_module$exports, \"buyDeputyClose\",\nServerUrl + '/bInquiry/buyDeputyClose'), _defineProperty(_module$exports, \"push\",\nServerUrl + '/bInquiry/push'), _defineProperty(_module$exports, \"buyDeputyList\",\n\n\nServerUrl + '/bInquiry/buyDeputyList'), _defineProperty(_module$exports, \"sellDeputyList\",\nServerUrl + '/bInquiry/sellDeputyList'), _defineProperty(_module$exports, \"upload\",\n\nServerUrl + '/oss/upload'), _defineProperty(_module$exports, \"upload_batch\",\nServerUrl + '/oss/upload_batch'), _defineProperty(_module$exports, \"deputyDetails\",\nServerUrl + '/bInquiry/deputyDetails'), _defineProperty(_module$exports, \"priceUnit\",\n\nServerUrl + '/choose/priceUnit'), _defineProperty(_module$exports, \"isIcash\",\nServerUrl + '/choose/isIcash'), _defineProperty(_module$exports, \"isPlusDuty\",\nServerUrl + '/choose/isPlusDuty'), _defineProperty(_module$exports, \"inventory\",\nServerUrl + '/choose/inventory'), _defineProperty(_module$exports, \"quotationAdd\",\nServerUrl + '/sQuotation/add'), _defineProperty(_module$exports, \"deputyQuotation\",\nServerUrl + '/sQuotation/sellDeputyList'), _defineProperty(_module$exports, \"sellerQuotationDetail\",\nServerUrl + '/sQuotation/sellDeputyDetails'), _defineProperty(_module$exports, \"buyerQuotation\",\n\nServerUrl + '/sQuotation/buyDeputyList'), _defineProperty(_module$exports, \"buyerQuotationDetail\",\nServerUrl + '/sQuotation/buyDeputyDetails'), _defineProperty(_module$exports, \"sellDeputyClose\",\nServerUrl + '/sQuotation/sellDeputyClose'), _defineProperty(_module$exports, \"directorDetails\",\n\nServerUrl + '/sQuotation/directorDetails'), _defineProperty(_module$exports, \"computationRule\",\n\nServerUrl + '/choose/computationRule'), _defineProperty(_module$exports, \"buyDeputyDirectPrice\",\nServerUrl + '/sQuotation/buyDeputyDirectPrice'), _defineProperty(_module$exports, \"directPriceList\",\nServerUrl + '/sQuotation/directPriceList'), _defineProperty(_module$exports, \"buyDeputySetDetails\",\n\nServerUrl + '/sQuotation/buyDeputySetDetails'), _defineProperty(_module$exports, \"buyDeputySetPrice\",\nServerUrl + '/sQuotation/buyDeputySetPrice'), _defineProperty(_module$exports, \"buyDeputyUnsuited\",\nServerUrl + '/sQuotation/buyDeputyUnsuited'), _defineProperty(_module$exports, \"buyDeputySuited\",\nServerUrl + '/sQuotation/buyDeputySuited'), _defineProperty(_module$exports, \"buyDeputyAddOrder\",\nServerUrl + '/sQuotation/buyDeputyAddOrder'), _defineProperty(_module$exports, \"directorList\",\nServerUrl + '/bInquiry/directorList'), _defineProperty(_module$exports, \"directorReviewCount\",\nServerUrl + '/sQuotation/directorReviewCount'), _defineProperty(_module$exports, \"directorModifyPrice\",\nServerUrl + '/sQuotation/directorModifyPrice'), _defineProperty(_module$exports, \"zyDetails\",\n\n\nServerUrl + '/bInquiry/zyDetails'), _module$exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!*********************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/lib/es6-promise.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {var require;!function (t, e) { true ? module.exports = e() : undefined;}(void 0, function () {\"use strict\";function t(t) {return \"function\" == typeof t || \"object\" == typeof t && null !== t;}function e(t) {return \"function\" == typeof t;}function n(t) {I = t;}function r(t) {J = t;}function o() {return function () {return process.nextTick(a);};}function i() {return \"undefined\" != typeof H ? function () {H(a);} : c();}function s() {var t = 0,e = new V(a),n = document.createTextNode(\"\");return e.observe(n, { characterData: !0 }), function () {n.data = t = ++t % 2;};}function u() {var t = new MessageChannel();return t.port1.onmessage = a, function () {return t.port2.postMessage(0);};}function c() {var t = setTimeout;return function () {return t(a, 1);};}function a() {for (var t = 0; t < G; t += 2) {var e = $[t],n = $[t + 1];e(n), $[t] = void 0, $[t + 1] = void 0;}G = 0;}function f() {try {var t = require,e = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'vertx'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));return H = e.runOnLoop || e.runOnContext, i();} catch (n) {return c();}}function l(t, e) {var n = arguments,r = this,o = new this.constructor(p);void 0 === o[et] && k(o);var i = r._state;return i ? !function () {var t = n[i - 1];J(function () {return x(i, o, t, r._result);});}() : E(r, o, t, e), o;}function h(t) {var e = this;if (t && \"object\" == typeof t && t.constructor === e) return t;var n = new e(p);return g(n, t), n;}function p() {}function v() {return new TypeError(\"You cannot resolve a promise with itself\");}function d() {return new TypeError(\"A promises callback cannot return that same promise.\");}function _(t) {try {return t.then;} catch (e) {return it.error = e, it;}}function y(t, e, n, r) {try {t.call(e, n, r);} catch (o) {return o;}}function m(t, e, n) {J(function (t) {var r = !1,o = y(n, e, function (n) {r || (r = !0, e !== n ? g(t, n) : S(t, n));}, function (e) {r || (r = !0, j(t, e));}, \"Settle: \" + (t._label || \" unknown promise\"));!r && o && (r = !0, j(t, o));}, t);}function b(t, e) {e._state === rt ? S(t, e._result) : e._state === ot ? j(t, e._result) : E(e, void 0, function (e) {return g(t, e);}, function (e) {return j(t, e);});}function w(t, n, r) {n.constructor === t.constructor && r === l && n.constructor.resolve === h ? b(t, n) : r === it ? (j(t, it.error), it.error = null) : void 0 === r ? S(t, n) : e(r) ? m(t, n, r) : S(t, n);}function g(e, n) {e === n ? j(e, v()) : t(n) ? w(e, n, _(n)) : S(e, n);}function A(t) {t._onerror && t._onerror(t._result), T(t);}function S(t, e) {t._state === nt && (t._result = e, t._state = rt, 0 !== t._subscribers.length && J(T, t));}function j(t, e) {t._state === nt && (t._state = ot, t._result = e, J(A, t));}function E(t, e, n, r) {var o = t._subscribers,i = o.length;t._onerror = null, o[i] = e, o[i + rt] = n, o[i + ot] = r, 0 === i && t._state && J(T, t);}function T(t) {var e = t._subscribers,n = t._state;if (0 !== e.length) {for (var r = void 0, o = void 0, i = t._result, s = 0; s < e.length; s += 3) {r = e[s], o = e[s + n], r ? x(n, r, o, i) : o(i);}t._subscribers.length = 0;}}function M() {this.error = null;}function P(t, e) {try {return t(e);} catch (n) {return st.error = n, st;}}function x(t, n, r, o) {var i = e(r),s = void 0,u = void 0,c = void 0,a = void 0;if (i) {if (s = P(r, o), s === st ? (a = !0, u = s.error, s.error = null) : c = !0, n === s) return void j(n, d());} else s = o, c = !0;n._state !== nt || (i && c ? g(n, s) : a ? j(n, u) : t === rt ? S(n, s) : t === ot && j(n, s));}function C(t, e) {try {e(function (e) {g(t, e);}, function (e) {j(t, e);});} catch (n) {j(t, n);}}function O() {return ut++;}function k(t) {t[et] = ut++, t._state = void 0, t._result = void 0, t._subscribers = [];}function Y(t, e) {this._instanceConstructor = t, this.promise = new t(p), this.promise[et] || k(this.promise), B(e) ? (this._input = e, this.length = e.length, this._remaining = e.length, this._result = new Array(this.length), 0 === this.length ? S(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(), 0 === this._remaining && S(this.promise, this._result))) : j(this.promise, q());}function q() {return new Error(\"Array Methods must be provided an Array\");}function F(t) {return new Y(this, t).promise;}function D(t) {var e = this;return new e(B(t) ? function (n, r) {for (var o = t.length, i = 0; i < o; i++) {e.resolve(t[i]).then(n, r);}} : function (t, e) {return e(new TypeError(\"You must pass an array to race.\"));});}function K(t) {var e = this,n = new e(p);return j(n, t), n;}function L() {throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");}function N() {throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");}function U(t) {this[et] = O(), this._result = this._state = void 0, this._subscribers = [], p !== t && (\"function\" != typeof t && L(), this instanceof U ? C(this, t) : N());}function W() {var t = void 0;if (\"undefined\" != typeof global) t = global;else if (\"undefined\" != typeof self) t = self;else try {t = Function(\"return this\")();} catch (e) {throw new Error(\"polyfill failed because global object is unavailable in this environment\");}var n = t.Promise;if (n) {var r = null;try {r = Object.prototype.toString.call(n.resolve());} catch (e) {}if (\"[object Promise]\" === r && !n.cast) return;}t.Promise = U;}var z = void 0;z = Array.isArray ? Array.isArray : function (t) {return \"[object Array]\" === Object.prototype.toString.call(t);};var B = z,G = 0,H = void 0,I = void 0,J = function J(t, e) {$[G] = t, $[G + 1] = e, G += 2, 2 === G && (I ? I(a) : tt());},Q = \"undefined\" != typeof window ? window : void 0,R = Q || {},V = R.MutationObserver || R.WebKitMutationObserver,X = \"undefined\" == typeof self && \"undefined\" != typeof process && \"[object process]\" === {}.toString.call(process),Z = \"undefined\" != typeof Uint8ClampedArray && \"undefined\" != typeof importScripts && \"undefined\" != typeof MessageChannel,$ = new Array(1e3),tt = void 0;tt = X ? o() : V ? s() : Z ? u() : void 0 === Q && \"function\" == \"function\" ? f() : c();var et = Math.random().toString(36).substring(16),nt = void 0,rt = 1,ot = 2,it = new M(),st = new M(),ut = 0;return Y.prototype._enumerate = function () {for (var t = this.length, e = this._input, n = 0; this._state === nt && n < t; n++) {this._eachEntry(e[n], n);}}, Y.prototype._eachEntry = function (t, e) {var n = this._instanceConstructor,r = n.resolve;if (r === h) {var o = _(t);if (o === l && t._state !== nt) this._settledAt(t._state, e, t._result);else if (\"function\" != typeof o) this._remaining--, this._result[e] = t;else if (n === U) {var i = new n(p);w(i, t, o), this._willSettleAt(i, e);} else this._willSettleAt(new n(function (e) {return e(t);}), e);} else this._willSettleAt(r(t), e);}, Y.prototype._settledAt = function (t, e, n) {var r = this.promise;r._state === nt && (this._remaining--, t === ot ? j(r, n) : this._result[e] = n), 0 === this._remaining && S(r, this._result);}, Y.prototype._willSettleAt = function (t, e) {var n = this;E(t, void 0, function (t) {return n._settledAt(rt, e, t);}, function (t) {return n._settledAt(ot, e, t);});}, U.all = F, U.race = D, U.resolve = h, U.reject = K, U._setScheduler = n, U._setAsap = r, U._asap = J, U.prototype = { constructor: U, then: l, \"catch\": function _catch(t) {return this.then(null, t);} }, U.polyfill = W, U.Promise = U, U.polyfill(), U;});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 19), __webpack_require__(/*! ./../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 19:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 20);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 19)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 27:
/*!*************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/jsy-server.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _module$exports;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var Api = __webpack_require__(/*! services/config/api.js */ 17);\nvar Common = __webpack_require__(/*! utils/common.js */ 28);\nvar Util = __webpack_require__(/*! utils/util.js */ 16);\nvar User = __webpack_require__(/*! services/user.js */ 31);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 18);\n\n\n//下拉选择\n//区域列表\nfunction getRegion() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRegion;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//配合度\nfunction getCoordinate() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCoordinate;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户类型\nfunction getType() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getType;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户规模\nfunction getCompanyScale() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCompanyScale;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户来源\nfunction getSource() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getSource;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//公司经营模式\nfunction getBusinessModel() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBusinessModel;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//主营产品\nfunction getMainProduct() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMainProduct;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//资金状况\nfunction getOperateCapital() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateCapital;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//信用状况\nfunction getOperateCredit() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateCredit;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//运营状况\nfunction getOperateOperation() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateOperation;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//口碑\nfunction getOperateWom() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateWom;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//品质定位\nfunction getQuality() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getQuality;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//角色\nfunction getPost() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPost;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//渠道\nfunction getChannel() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getChannel;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//性价比\nfunction getCostPerformance() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCostPerformance;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//身份\nfunction getIdentity() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getIdentity;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//发展潜力\nfunction getPotential() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPotential;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//用户价格敏感度\nfunction getPriceSensitivity() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPriceSensitivity;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//性格特点\nfunction getCharacterFeatures() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCharacterFeatures;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//经营者特征\nfunction getManageFeatures() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getManageFeatures;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//经营定位\nfunction getManagementPosition() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getManagementPosition;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//合作意向\nfunction getCooperationIntention() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCooperationIntention;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//用户登陆\n// function login(data) {\n//     return new Es6Promise(function(resolve, reject) {\n//       let newApi = Api.login;\n//       Util.request(newApi, data, 'post').then(res => {\n//         resolve(res);\n//       }).catch(err => {\n//         reject(err);\n//       })\n//     })\n//   }\n// 更改密码\nfunction chanage_password(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.chanage_password;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//验证码\nfunction verification(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.verification;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//用户注册\nfunction registration(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.registration;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//用户个人信息\nfunction userDetails(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.userDetails;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//未读信息\nfunction getNewsNum() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getNewsNum;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//未读信息列表\nfunction noReadList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.noReadList;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//查询用户职位列表\nfunction pupList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pupList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//获取默认职位\nfunction pupDefault(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pupDefault;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//买/卖帮办客户列表\nfunction bsList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.bsList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//销售总监，区域经理客户列表\n\nfunction dmList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.dmList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户详情\nfunction cmDetail(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.cmDetail;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//更新客户信息 \nfunction updateCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.updateCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//销售总监，区域经理客户列表\nfunction dmList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.dmList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//销售总监，区域经理客户数量\nfunction dmCount(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.dmCount;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//销售总监删除分配\nfunction majordomoDel(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.majordomoDel;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//区域经理删除分配\nfunction managerDel(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.managerDel;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//销售总监查询区域经理列表\nfunction managerList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.managerList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//区域经理查询手下帮办列表\nfunction deputyList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deputyList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//区域经理分配客户给帮办\nfunction managerAllot(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.managerAllot;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//销售总监分配客户给区域经理\nfunction majordomoAllot(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.majordomoAllot;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//公司联系人\nfunction linkMan(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.linkMan;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//联系人详情\nfunction linkmanDetails(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.linkmanDetails;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//删除联系人\nfunction linkmanDel(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.linkmanDel;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//公司联系人添加\nfunction linkmanAdd(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.linkmanAdd;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//更新联系人 \nfunction linkmanUpdate(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.linkmanUpdate;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//获取公司经营状况\nfunction operation(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.operation;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//公司竞争对手列表\nfunction rival(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.rival;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//竞争对手详情\nfunction rivalDetails(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.rivalDetails;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//竞争对手更新\nfunction rivalUpdate(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.rivalUpdate;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//删除竞争对手\nfunction rivalDel(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.rivalDel;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//买办创建客户\nfunction buyAddCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.buyAddCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//修改客户\nfunction updateCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.updateCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//卖帮办创建客户\nfunction sellCusmterCreated(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.sellCusmterCreated;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//更新经营状况\nfunction operationUpdate(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.operationUpdate;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//添加经营状况\nfunction operationAdd(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.operationAdd;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction rivalAdd(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.rivalAdd;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n\n\n\nmodule.exports = (_module$exports = {\n\n  getManageFeatures: getManageFeatures,\n  getRegion: getRegion,\n  getCoordinate: getCoordinate,\n  getType: getType,\n  getCompanyScale: getCompanyScale,\n  getSource: getSource,\n  getBusinessModel: getBusinessModel,\n  getMainProduct: getMainProduct,\n  getOperateCapital: getOperateCapital,\n  getOperateCredit: getOperateCredit,\n  getOperateOperation: getOperateOperation,\n  getOperateWom: getOperateWom,\n  getQuality: getQuality,\n  getPost: getPost,\n  getChannel: getChannel,\n  getCostPerformance: getCostPerformance,\n  getIdentity: getIdentity,\n  getPotential: getPotential,\n  getPriceSensitivity: getPriceSensitivity,\n  getCharacterFeatures: getCharacterFeatures }, _defineProperty(_module$exports, \"getManageFeatures\",\ngetManageFeatures), _defineProperty(_module$exports, \"getManagementPosition\",\ngetManagementPosition), _defineProperty(_module$exports, \"getCooperationIntention\",\ngetCooperationIntention), _defineProperty(_module$exports, \"chanage_password\",\n\n\nchanage_password), _defineProperty(_module$exports, \"verification\",\nverification), _defineProperty(_module$exports, \"registration\",\nregistration), _defineProperty(_module$exports, \"getNewsNum\",\ngetNewsNum), _defineProperty(_module$exports, \"noReadList\",\nnoReadList), _defineProperty(_module$exports, \"pupList\",\npupList), _defineProperty(_module$exports, \"pupDefault\",\npupDefault), _defineProperty(_module$exports, \"bsList\",\nbsList), _defineProperty(_module$exports, \"dmList\",\ndmList), _defineProperty(_module$exports, \"linkMan\",\nlinkMan), _defineProperty(_module$exports, \"linkmanDetails\",\nlinkmanDetails), _defineProperty(_module$exports, \"linkmanAdd\",\nlinkmanAdd), _defineProperty(_module$exports, \"linkmanUpdate\",\nlinkmanUpdate), _defineProperty(_module$exports, \"operation\",\noperation), _defineProperty(_module$exports, \"rival\",\nrival), _defineProperty(_module$exports, \"buyAddCustomer\",\nbuyAddCustomer), _defineProperty(_module$exports, \"updateCustomer\",\nupdateCustomer), _defineProperty(_module$exports, \"sellCusmterCreated\",\nsellCusmterCreated), _defineProperty(_module$exports, \"userDetails\",\nuserDetails), _defineProperty(_module$exports, \"cmDetail\",\ncmDetail), _defineProperty(_module$exports, \"operationUpdate\",\noperationUpdate), _defineProperty(_module$exports, \"operationAdd\",\noperationAdd), _defineProperty(_module$exports, \"rivalDetails\",\nrivalDetails), _defineProperty(_module$exports, \"rivalAdd\",\nrivalAdd), _defineProperty(_module$exports, \"linkmanDel\",\nlinkmanDel), _defineProperty(_module$exports, \"rivalDel\",\nrivalDel), _defineProperty(_module$exports, \"rivalUpdate\",\nrivalUpdate), _defineProperty(_module$exports, \"dmList\",\ndmList), _defineProperty(_module$exports, \"dmCount\",\ndmCount), _defineProperty(_module$exports, \"majordomoDel\",\nmajordomoDel), _defineProperty(_module$exports, \"managerDel\",\nmanagerDel), _defineProperty(_module$exports, \"managerList\",\nmanagerList), _defineProperty(_module$exports, \"deputyList\",\ndeputyList), _defineProperty(_module$exports, \"managerAllot\",\nmanagerAllot), _defineProperty(_module$exports, \"majordomoAllot\",\nmajordomoAllot), _module$exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!******************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/common.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var Api = __webpack_require__(/*! services/config/api.js */ 17);\nvar Pipe = __webpack_require__(/*! utils/pipe.js */ 29);\nvar Util = __webpack_require__(/*! utils/util.js */ 16);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 18);\n\n/**\r\n                                                 * 去除前后空格\r\n                                                 */\nfunction trim(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\n\n/**\r\n   * 功能：显示loading图标；并将loadState设为false，防止用户多次点击\r\n   * 参数：that：当前页面的this；val：loading的提示内容\r\n   */\nfunction showLoading(that, val) {\n  var sVal = val.toString();\n  that.setData({\n    loadState: false });\n\n  // 兼容处理\n  if (wx.showLoading) {\n    wx.showLoading({\n      title: sVal,\n      mask: true });\n\n  } else {\n    wx.showToast({\n      title: sVal,\n      mask: true,\n      duration: 2500 });\n\n  }\n}\n\n/**\r\n   * 功能：隐藏loading图标；并将loadState设为true，防止出现错误，用户无法点击\r\n   * 参数：that：当前页面的this\r\n   */\nfunction hideLoading(that) {\n  // 兼容处理\n  if (wx.hideLoading) {\n    wx.hideLoading();\n  } else {\n    wx.hideToast();\n  }\n  that.setData({\n    loadState: true });\n\n}\n/**\r\n   * 函数：showLoad(val)、hideLoad()\r\n   * 功能：显示/隐藏 loading图标\r\n   * 参数：val：loading图显示的文字\r\n   */\nfunction showLoad(val) {\n  var sVal = val.toString();\n  if (wx.showLoading) {\n    wx.showLoading({\n      title: sVal,\n      mask: true });\n\n  } else {\n    wx.showToast({\n      title: sVal,\n      mask: true,\n      duration: 3000 });\n\n  }\n}\nfunction hideLoad() {\n  if (wx.hideLoading) {\n    wx.hideLoading();\n  } else {\n    wx.hideToast();\n  }\n}\n\n/**\r\n   * 函数：setLoadFalse(that)、setLoadTrue(that)\r\n   * 功能：将loadState设置为false；防止用户重复点击提交表单\r\n   * 参数：that：页面的this\r\n   */\nfunction setLoadFalse(that) {\n  that.setData({\n    loadState: false });\n\n}\nfunction setLoadTrue(that) {\n  that.setData({\n    loadState: true });\n\n}\n\n/**\r\n   * 函数：changePageFalse(that)、changePageTrue(that)\r\n   * 功能：防止用户重复点击多次跳转页面\r\n   * 参数：that：页面的this\r\n   */\nfunction changePageFalse(that) {\n  that.setData({\n    changePage: false });\n\n}\nfunction changePageTrue(that) {\n  that.setData({\n    changePage: true });\n\n}\n\n\n/**\r\n   * 特性 值的转换\r\n   */\nfunction changeGloss(gloss) {\n  return Pipe.pipeGloss(gloss);\n}\n\n/**\r\n   * 特性、品质要求、品质定位 值的转换\r\n   */\nfunction changeVal(obj, stockType) {\n  if (obj) {\n    var oInfo = obj;\n    // 品质要求转换\n    oInfo.quality = Pipe.pipeQuality(oInfo.quality);\n    // 特性转换\n    oInfo.glossLongitude = Pipe.pipeGloss(oInfo.glossLongitude);\n    // oInfo.glossLatitude = Pipe.pipeGloss(oInfo.glossLatitude);\n    // 品质定位转换\n    oInfo.positionQuality = Pipe.pipePosition(oInfo.positionQuality);\n    // 库存状态\n    if (stockType) {\n      oInfo.stockType = Pipe.pipeStock(stockType);\n    }\n  }\n}\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgSmallUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/small/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgMiddleUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/middle/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n/**\r\n   * 图片预加载--图片地址拼接(求购区、现货区 列表)\r\n   */\nfunction pinPreImg(picId) {\n  if (picId) {\n    var imgArr = picId.split(\"|\");\n\n    return {\n      url: \"\".concat(Api.ShowPic, \"/\").concat(imgArr[0], \"/download\"),\n      loaded: false };\n\n  } else {\n    return {\n      url: '../../images/detail-buy-s.png',\n      loaded: false };\n\n  }\n}\n\n/**\r\n   * 图片预加载--图片地址拼接(求购区、现货区 列表)\r\n   */\nfunction pinPreSmallImg(picId) {\n  if (picId) {\n    var imgArr = picId.split(\"|\");\n\n    return {\n      url: \"\".concat(Api.ShowPic, \"/\").concat(imgArr[0], \"/small/download\"),\n      loaded: false };\n\n  } else {\n    return {\n      url: '../../images/detail-buy-s.png',\n      loaded: false };\n\n  }\n}\n\n/**\r\n   * 图片预加载--图片是否加载完成处理\r\n   */\nfunction imgPreload(that, imgArr, fn) {\n  if (imgArr.length < 1) return;\n  imgArr.forEach(function (item) {\n    // 图片预加载\n    that.imgLoader.load(item.url, function (err, data) {\n      var imgList = [];\n      imgList = imgArr.map(function (list) {\n        if (list.url == data.src) {\n          list.loaded = true;\n        }\n        return list;\n      });\n\n      fn && fn(imgList);\n    });\n  });\n}\n\n/**\r\n   * 获取 页面高度\r\n   */\nfunction onWindowH() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.getSystemInfo({\n      success: function success(res) {\n        var minHeight = res.windowHeight;\n\n        resolve(minHeight);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n\n/**\r\n   * 判断有没有token\r\n   */\nfunction getToken() {\n  return wx.getStorageSync(\"token\");\n}\n\n/**\r\n   * formId 地址拼接\r\n   */\nfunction pinFormId(api, formId) {\n  var isFormId = formId == \"the formId is a mock one\" ? \"\" : formId;\n\n  return isFormId ? api + \"?formid=\" + isFormId : api;\n}\n\n/**\r\n   * 添加图片--单张\r\n   */\nfunction addPic(fn) {\n  wx.chooseImage({\n    count: 1,\n    sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n    sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n    success: function success(res) {\n      var filesArr = res.tempFiles;\n      var fliesPathArr = res.tempFilePaths;\n      var maxSize = 1024 * 1024;\n      var picState = true;\n\n      if (!filesArr) {// 用于处理部分手机返回值为空的问题\n        Util.versionTip();\n        picState = false;\n        return;\n      }\n\n      // 验证size是否大于1M\n      filesArr.map(function (item, index) {\n        var size = item.size;\n\n        if (size > maxSize) {\n          wx.showModal({\n            content: '图片不能大于1M',\n            showCancel: false });\n\n          picState = false;\n          return false;\n        }\n      });\n\n      if (picState) {\n        fn && fn(fliesPathArr);\n      } else {\n        fn && fn(picState);\n      }\n    },\n    fail: function fail() {\n      console.log(__f__(\"已取消图片选择\", \" at utils/common.js:314\"));\n    } });\n\n}\n\n/**\r\n   * 控制按钮状态\r\n   */\nfunction setBtnState(formText, that) {\n  var stateNum = 0;\n\n  formText.forEach(function (item) {\n    if (item == 1) stateNum++;\n  });\n\n  if (stateNum == formText.length) {\n    that.setData({\n      submitBtn: true });\n\n  } else {\n    that.setData({\n      submitBtn: false });\n\n  }\n}\n\n\n/**\r\n   * 倒计时\r\n   */\nfunction downTime(that) {\n  var backTime = parseInt(that.data.backTime);\n  setBackTime();\n\n  function setBackTime() {\n    backTime--;\n    that.setData({\n      backTime: backTime });\n\n    if (backTime <= 0 || that.data.backTimeState) {\n      that.setData({\n        validateCod: !that.data.validateCod,\n        backTime: 60,\n        backTimeState: false });\n\n      return false;\n    }\n    setTimeout(setBackTime, 1000);\n  }\n}\n\n/**\r\n   * 价格补零\r\n   */\nfunction supZero(price) {\n  if (price) {\n    var sPrice = price.toString();\n\n    if (sPrice.indexOf(\".\") != -1) {\n      var newPrice = sPrice.split('.');\n      if (!newPrice[1]) {// 有. 没有数\n        sPrice += \"00\";\n      } else if (newPrice[1].length == 1) {// 有. 有一位数\n        sPrice += \"0\";\n      }\n    } else {\n      sPrice += \".00\";\n    }\n    return sPrice;\n  }\n  return price;\n}\n\n/**\r\n   * 打 * 函数\r\n   */\nfunction setStar(str, bNum, aNum) {\n  var oStr = '';\n  if (str) {\n    oStr = str.toString();\n\n    var nStr = '';\n    var nANum = oStr.length - aNum;\n\n    nStr += oStr.substring(0, bNum);\n    for (var i = bNum; i < nANum; i++) {\n      nStr += '*';\n    }\n    nStr += oStr.substring(nANum, oStr.length);\n\n    return nStr;\n  } else {\n    return oStr;\n  }\n}\n\n/**\r\n   * 每个几个字符加空格 函数\r\n   */\nfunction setSpace(str, num) {\n  var nStr = '';\n  var firstIndex = 0;\n  var endIndex = 4;\n  var len = Math.ceil(str.length / 4);\n\n  for (var i = 0; i < len; i++) {\n    if (i < len - 1) {\n      nStr += str.substring(firstIndex, endIndex) + ' ';\n    } else {\n      nStr += str.substring(firstIndex, endIndex);\n    }\n    firstIndex = endIndex;\n    endIndex = endIndex + num;\n  }\n  return nStr;\n}\n\n/**\r\n   * 每个几个数字加逗号 函数\r\n   */\nfunction setComma(num) {\n  var num = (num || 0).toString();\n  var result = '';\n  while (num.length > 3) {\n    result = ',' + num.slice(-3) + result;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {result = num + result;}\n  return result;\n}\n\n/**\r\n   * 判断点击认证进入的页面\r\n   */\nfunction goApprovePage(that) {\n  var approveUrl = [\"../user-approve/approve\", \"../c-approve/private\", \"../c-approve/public\"];\n  var applyType = that.data.applyType;\n  var appState = that.data.appState;\n  var changePage = that.data.changePage;\n\n  if (appState == 2 && applyType == 1 || appState == 2 && applyType == 0 && changePage) {\n    changePageFalse(that);\n    // 个人认证填写页\n    wx.navigateTo({\n      url: approveUrl[1] });\n\n  } else if (appState == 2 && applyType == 2 && changePage) {\n    changePageFalse(that);\n    // 企业认证填写页\n    wx.navigateTo({\n      url: approveUrl[2] + \"?only=true\" });\n\n  } else if (appState == 0 && changePage) {\n    changePageFalse(that);\n    // 企业认证、个人认证选择页\n    wx.navigateTo({\n      url: approveUrl[0] });\n\n  } else if (appState == 3 && applyType == 1 && changePage) {\n    changePageFalse(that);\n    // 企业认证填写页\n    wx.navigateTo({\n      url: approveUrl[2] + \"?only=true\" });\n\n  }\n}\n\n/**\r\n   * 银行账号对比，是否重复添加\r\n   */\nfunction toCompareBank(bankArr, bankNum) {\n  var BBank = true;\n\n  if (bankArr.length < 1) return BBank;\n\n  bankArr.map(function (item) {\n    if (item == bankNum) {\n      Util.showModal(\"绑定提示\", \"您已添加过该账户，请换一个账户\");\n      BBank = false;\n    }\n  });\n  return BBank;\n}\n\n/**\r\n   * 设置银行logo、判断银行是否停用\r\n   * bank1：付款储蓄卡列表、收款卡列表\r\n   * bank2：付款信用卡列表\r\n   */\nfunction getBankLogo(bankArr, str, bank1, bank2) {\n  var bankList = [];\n\n  if (bankArr.length < 1) return;\n\n  if (str == \"pay\") {\n    bankArr.map(function (item) {\n      if (item.cardType == 10) {\n        // bankList = wx.getStorageSync(\"paySaveList\");\n        setBankLogo(item, bank1);\n\n      } else {\n        // bankList = wx.getStorageSync(\"payCreditList\");\n        setBankLogo(item, bank2);\n      }\n    });\n  } else if (str = \"cash\") {\n    // bankList = wx.getStorageSync(\"cashBankList\");\n\n    bankArr.map(function (item, index) {\n      setBankLogo(item, bank1);\n    });\n  }\n}\n\n/**\r\n   * 设置银行的logo、是否停用等\r\n   */\nfunction setBankLogo(item, bankList) {\n  item.bStop = false;\n\n  if (bankList.length < 1) return;\n\n  bankList.map(function (list, j) {\n    if (trim(item.bankId) == trim(list.code)) {\n      item.logo = list.logo;\n      item.bStop = true;\n      item.limitOnce = list.limitOnce; // 单日限额\n      item.limitDay = list.limitDay;\n      getBankOverNum(item);\n      getBankAccount(item);\n    }\n  });\n}\n\n/**\r\n   * 功能：截取银行卡号后四位\r\n   * 参数：获取到的银行列表数组不同索引的对象\r\n   */\nfunction getBankOverNum(item) {\n  var len = item.accountNumber.length;\n  item.overNum = item.accountNumber.substring(len - 4, len);\n}\n\n/**\r\n   * 功能：返回拼接后的银行账户\r\n   * 参数：获取到的银行列表数组不同索引的对象\r\n   */\nfunction getBankAccount(item) {\n  item.sBankVal = \"\".concat(item.bankName).concat(item.cardType == 10 ? '储蓄卡' : '信用卡', \"(\").concat(item.overNum, \")\");\n}\n\n/**\r\n   * 信用卡费率计算\r\n   */\nfunction getRate(amount, PayRateNum) {\n  var nAmount = amount * 100 * PayRateNum / 1000000;\n  var arr = nAmount.toString().split(\".\");\n  var price = 0;\n\n  price = nAmount.toFixed(2);\n\n  // if (arr[1].substring(0,2) > 0) {\n  // 如果小数位超过3位\n  // if (arr.length > 1 && arr[1].length > 3 && arr[1].substring(2, 3) < 5) {\n  //   console.log(\"price\")\n  //   price = (price * 100 + 1)/100;\n  // }\n  // }\n\n  return supZero(Number(price));\n}\n\n//数字四舍五入\nfunction forDight(Dight, How) {\n  Dight = Math.round(Dight * Math.pow(10, How)) / Math.pow(10, How);\n  return Dight;\n}\nfunction setPositionQuality(item) {\n  if (item == 1) {\n    return '一般订单';\n  } else if (item == 2) {\n    return '市场货';\n  } else if (item == 3) {\n    return '高级订单';\n  } else if (item == 4) {\n    return '品牌订单';\n  } else {\n    return '';\n  }\n}\nfunction setGlossLongitude(item) {\n  if (item == 1) {\n    return '消光';\n  } else if (item == 2) {\n    return '半光';\n  } else if (item == 3) {\n    return '半消光';\n  } else if (item == 4) {\n    return '有光';\n  } else {\n    return '';\n  }\n}\nmodule.exports = {\n  showLoading: showLoading,\n  hideLoading: hideLoading,\n  showLoad: showLoad,\n  hideLoad: hideLoad,\n  setLoadFalse: setLoadFalse,\n  setLoadTrue: setLoadTrue,\n  changePageFalse: changePageFalse,\n  changePageTrue: changePageTrue,\n  changeGloss: changeGloss,\n  changeVal: changeVal,\n  pinImgUrl: pinImgUrl,\n  pinImgSmallUrl: pinImgSmallUrl,\n  pinImgMiddleUrl: pinImgMiddleUrl,\n  pinPreImg: pinPreImg,\n  pinPreSmallImg: pinPreSmallImg,\n  imgPreload: imgPreload,\n  onWindowH: onWindowH,\n  getToken: getToken,\n  pinFormId: pinFormId,\n  addPic: addPic,\n  setBtnState: setBtnState,\n  downTime: downTime,\n  supZero: supZero,\n  setStar: setStar,\n  setSpace: setSpace,\n  setComma: setComma,\n  goApprovePage: goApprovePage,\n  toCompareBank: toCompareBank,\n  getBankLogo: getBankLogo,\n  getBankAccount: getBankAccount,\n  getRate: getRate,\n  forDight: forDight,\n  setPositionQuality: setPositionQuality,\n  setGlossLongitude: setGlossLongitude };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/pipe.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _require =\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__webpack_require__(/*! ./const.js */ 30),QUALITY = _require.QUALITY,POSITION = _require.POSITION,GLOSS = _require.GLOSS,STOCK_TYPES = _require.STOCK_TYPES,BUY_ORDER = _require.BUY_ORDER,BUY_BACK_ORDER = _require.BUY_BACK_ORDER,SELL_ORDER = _require.SELL_ORDER,COMPLETE = _require.COMPLETE,COST_PERFORMANCE = _require.COST_PERFORMANCE,REAL_RATE = _require.REAL_RATE,BREAK_OUT = _require.BREAK_OUT,STOP_BRIGHT = _require.STOP_BRIGHT,STOP_DIM = _require.STOP_DIM,DARK_STRIP = _require.DARK_STRIP;\n\nfunction formatTime(date) {\n  if (date) {\n    var oDate = date.slice(0, date.indexOf(\".\")); // 截取时间戳 . 前面的数\n\n    oDate = oDate.replace(/T/g, ' ').replace(/(-)/g, '/');\n\n    var nDate = new Date(oDate);\n\n    var year = nDate.getFullYear();\n    var month = nDate.getMonth() + 1;\n    var day = nDate.getDate();\n\n    var h = nDate.getHours();\n    var m = nDate.getMinutes();\n    var s = nDate.getSeconds();\n    console.log(__f__(h, m, s, \" at utils/pipe.js:33\"));\n    return [year, month, day].map(formatNumber).join('-');\n    //  + ' ' + [hour, minute, second].map(formatNumber).join(':')\n  } else {\n    return '';\n  }\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\n/**\r\n   * 返回key所对应的值\r\n   */\nfunction change(obj, num) {\n  var value = '';\n  var n = parseInt(num);\n  obj.map(function (item) {\n    if (item.key == num) value = item.value;\n  });\n  return value;\n}\n/**\r\n   * 返回key所对应的值\r\n   */\nfunction changeMore(obj, num) {\n  if (num) {\n    var value = [];\n    var n = parseInt(num);\n    obj.map(function (item) {\n      if (item.key & num) {\n        value.push(item.value);\n      }\n    });\n    return value.join('、');\n  }\n}\n\n/**\r\n   * 品质要求\r\n   */\nfunction pipeQuality(num) {\n  return changeMore(QUALITY, num);\n}\n\n/**\r\n   * 品质定位\r\n   */\nfunction pipePosition(num) {\n  return changeMore(POSITION, num);\n}\n\n/**\r\n   * 特性\r\n   */\nfunction pipeGloss(num) {\n  return changeMore(GLOSS, num);\n}\n\n/**\r\n   * 现货详情-库存状态\r\n   */\nfunction pipeStock(num) {\n  return changeMore(STOCK_TYPES, num);\n}\n\n/**\r\n   * 找布状态\r\n   */\nfunction pipeStatus(num) {\n  var newNum = parseInt(num);\n  var sI = 0; // 状态\n\n  if (newNum == 1) {\n    sI = 0;\n  } else if (newNum == 2) {\n    sI = 1;\n  } else if (newNum == 4) {\n    sI = 2;\n  } else if (newNum < 0) {\n    sI = 3;\n  }\n  return sI;\n}\n\n/**\r\n   * 认证状态\r\n   */\nfunction approveState(oData) {\n  // currentType：0: 未认证；1: 个人认证；2: 企业认证\n  // status：0: 认证中；1: 认证通过；2: 认证失败\n  // applyType：1：个人认证中；2：企业认证中\n\n  // 未认证：404\n  // 个人认证-审核中 status:0 currentType:null\n  // 个人认证失败-重新审核 status:2 currentType:null（0）\n  // 个人认证-通过：status:1 currentType:1\n  // 企业认证-审核中：status:0 currentType:null\n  // 企业认证 status:1 currentType:2\n  // 企业认证失败-重新审核：status:2 currentType:0\n  var current = oData.currentType;\n  var state = oData.status;\n\n  if (state == 0) {\n    return 1; // 认证中\n  } else if (state == 2) {\n    return 2; // 认证失败，重新认证\n  } else if (current == 1 && state == 1) {\n    return 3; // 个人认证\n  } else if (current == 2 && state == 1) {\n    return 4; // 企业认证\n  } else {\n    return 0;\n  }\n}\n\n\n/**\r\n   * 采购订单状态转换\r\n   *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n   *    分状态(总状态：1)：1：待支付；2：支付处理中；3：待结算；4：结算处理中；5：待收货；6：订单完成;9:买家支付中\r\n   */\nfunction changeBuyState(obj) {\n\n  var oState = 1;\n  var stateText = \"\";\n  var buyState = obj.buyOrder.status;\n\n  // if (obj.status == 1) { // 订单处理中\n\n  // }\n  // else \n  if (obj.status == 2) {// 取消订单\n    if (buyState == 3 && !obj.buyOrder.refundBankId) {\n      oState = -1;\n    } else if (buyState == 3 && obj.buyOrder.refundBankId) {\n      oState = -4;\n    } else {\n      oState = buyState == -4 ? buyState : buyState == -5 ? buyState : -1;\n    }\n    stateText = buyBackOrderState(oState);\n  } else {\n    oState = buyState;\n    stateText = buyOrderState(oState);\n  }\n  // else if (obj.status == 3) { // 完成订单\n  //   oState = buyState == 7 ? buyState : 9;\n  //   stateText = buyState == 7 ? \"线下订单\" : \"订单完成\";\n  // }\n\n  return {\n    state: oState,\n    text: stateText };\n\n}\n\n\n\n/**\r\n   * 销售订单状态转换\r\n   *    总状态(item.status)：1：正常；2：取消；3：完成\r\n   *    分状态(item.sellOrder.status)：1：等待代付；2：代付处理中；3：待发货；4：订单完成\r\n   */\nfunction changeSellState(obj) {\n  var oState = 1;\n  var stateText = \"\";\n  var sellState = obj.sellOrder.status;\n\n  if (obj.status == 1 || obj.status == 3) {\n    oState = sellState;\n    stateText = obj.sellOrder.cardid == null && sellState == 1 ? \"待确认\" : sellOrderState(sellState);\n  } else if (obj.status == 2) {\n    oState = -1;\n    stateText = \"订单已取消\";\n  }\n  //  else if (obj.status == 3) {\n  //   oState = sellState == 5 ? sellState : 9;\n  //   stateText = sellState == 5 ? \"线下订单\" : \"订单完成\"\n  // }\n\n  return {\n    state: oState,\n    text: stateText };\n\n}\n\n\n\n\n/**\r\n   * 交易订单--状态转换\r\n   */\n// 采购订单\nfunction buyOrderState(state) {\n  return change(BUY_ORDER, state);\n}\n// 采购退款订单\nfunction buyBackOrderState(state) {\n  return change(BUY_BACK_ORDER, state);\n}\n// 销售订单\nfunction sellOrderState(state) {\n  return change(SELL_ORDER, state);\n}\n\n/**\r\n   * 订单流水--退款结果\r\n   */\nfunction pipeComplete(state) {\n  return change(COMPLETE, state);\n}\n\n\n/**\r\n   * 采购订单评价--性价比\r\n   */\nfunction pipeCost(num) {\n  return changeMore(COST_PERFORMANCE, num);\n}\n/**\r\n   * 采购订单评价--实码率\r\n   */\nfunction pipeReal(num) {\n  return changeMore(REAL_RATE, num);\n}\n/**\r\n   * 采购订单评价--断经、断纬\r\n   */\nfunction pipeBreak(num) {\n  return changeMore(BREAK_OUT, num);\n}\n/**\r\n   * 采购订单评价--停车明档\r\n   */\nfunction pipeBright(num) {\n  return changeMore(STOP_BRIGHT, num);\n}\n/**\r\n   * 采购订单评价--停车暗档\r\n   */\nfunction pipeDim(num) {\n  return changeMore(STOP_DIM, num);\n}\n/**\r\n   * 采购订单评价--暗条\r\n   */\nfunction pipeDark(num) {\n  return changeMore(DARK_STRIP, num);\n}\n\n// 获取时间戳\nfunction getTimeStamp() {\n  var myDate = new Date();\n  var Y = myDate.getFullYear().toString().slice(2);\n  var M = myDate.getMonth() + 1 < 10 ? \"0\" + (myDate.getMonth() + 1) : (myDate.getMonth() + 1).toString();\n  var D = myDate.getDate() < 10 ? \"0\" + myDate.getDate() : myDate.getDate().toString();\n  var h = myDate.getHours().toString();\n  var m = myDate.getMinutes().toString();\n  var s = myDate.getSeconds() < 10 ? \"0\" + myDate.getSeconds() : myDate.getSeconds().toString();\n  var ms = myDate.getMilliseconds() < 10 ? \"00\" + myDate.getMilliseconds() : myDate.getMilliseconds() < 100 ? \"0\" + myDate.getMilliseconds() : myDate.getMilliseconds();\n  var timeId = Y + M + D + h + m + s + ms;\n  return timeId;\n}\nfunction timeName(time) {\n  if (!time) {\n    return '';\n  }\n  var myDate = new Date(time);\n  var Y = myDate.getFullYear().toString();\n  var M = myDate.getMonth() + 1 < 10 ? \"0\" + (myDate.getMonth() + 1) : (myDate.getMonth() + 1).toString();\n  var D = myDate.getDate() < 10 ? \"0\" + myDate.getDate() : myDate.getDate().toString();\n  var h = myDate.getHours() < 10 ? \"0\" + myDate.getHours() : myDate.getHours().toString();\n  var m = myDate.getMinutes() < 10 ? \"0\" + myDate.getMinutes() : myDate.getMinutes().toString();\n  var s = myDate.getSeconds() < 10 ? \"0\" + myDate.getSeconds() : myDate.getSeconds().toString();\n  var timeId = Y + '-' + M + '-' + D + ' ' + h + ':' + m + ':' + s;\n  return timeId;\n}\n\n// 设置时间\nfunction setTime(time) {\n  if (time && time.indexOf(\"T\") != -1) {\n    var date = new Date(time),\n    Y = date.getFullYear() + '-',\n    M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-',\n    D = date.getDate() < 10 ? '0' + date.getDate() + ' ' : date.getDate() + ' ',\n    h = date.getHours() < 10 ? '0' + date.getHours() + ':' : date.getHours() + ':',\n    m = date.getMinutes() < 10 ? '0' + date.getMinutes() + ':' : date.getMinutes() + ':',\n    s = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\n    console.log(__f__(\"data\", date, \" at utils/pipe.js:323\"));\n    return Y + M + D + h + m + s;\n  } else {\n    return time;\n  }\n}\nmodule.exports = {\n  formatTime: formatTime,\n  pipeStatus: pipeStatus,\n  pipeQuality: pipeQuality,\n  pipePosition: pipePosition,\n  pipeGloss: pipeGloss,\n  pipeStock: pipeStock,\n  approveState: approveState,\n  changeBuyState: changeBuyState,\n  changeSellState: changeSellState,\n  buyOrderState: buyOrderState,\n  buyBackOrderState: buyBackOrderState,\n  sellOrderState: sellOrderState,\n  pipeComplete: pipeComplete,\n  getTimeStamp: getTimeStamp,\n  // 采购订单评价\n  pipeCost: pipeCost,\n  pipeReal: pipeReal,\n  pipeBreak: pipeBreak,\n  pipeBright: pipeBright,\n  pipeDim: pipeDim,\n  pipeDark: pipeDark,\n  timeName: timeName,\n  setTime: setTime };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 290:
/*!********************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/tools.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction filterNull(data) {\n  var temp = {};\n  Object.keys(data).forEach(function (key) {\n    if (data[key] != -1) {\n      temp[key] = data[key];\n    }\n  });\n  return temp;\n}\nfunction list2code(data) {\n  var temp = [];\n  data.forEach(function (item) {\n    if (item.isChecked == true) {\n      temp.push(item.id);\n    }\n  });\n  return temp;\n}\nfunction list2string(data) {\n  var temp = [];\n  data.forEach(function (item) {\n    temp.push(item.label);\n  });\n  return temp.join('+');\n}\n\nmodule.exports = {\n  filterNull: filterNull,\n  list2code: list2code,\n  list2string: list2string };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc2VydmljZXMvdG9vbHMuanMiXSwibmFtZXMiOlsiZmlsdGVyTnVsbCIsImRhdGEiLCJ0ZW1wIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJsaXN0MmNvZGUiLCJpdGVtIiwiaXNDaGVja2VkIiwicHVzaCIsImlkIiwibGlzdDJzdHJpbmciLCJsYWJlbCIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUVBLFNBQVNBLFVBQVQsQ0FBb0JDLElBQXBCLEVBQXlCO0FBQ3hCLE1BQUlDLElBQUksR0FBQyxFQUFUO0FBQ0FDLFFBQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFaLEVBQWtCSSxPQUFsQixDQUEwQixVQUFDQyxHQUFELEVBQU87QUFDaEMsUUFBSUwsSUFBSSxDQUFDSyxHQUFELENBQUosSUFBYSxDQUFDLENBQWxCLEVBQW9CO0FBQ25CSixVQUFJLENBQUNJLEdBQUQsQ0FBSixHQUFZTCxJQUFJLENBQUNLLEdBQUQsQ0FBaEI7QUFDQTtBQUNELEdBSkQ7QUFLQSxTQUFPSixJQUFQO0FBQ0E7QUFDRCxTQUFTSyxTQUFULENBQW1CTixJQUFuQixFQUF3QjtBQUN2QixNQUFJQyxJQUFJLEdBQUMsRUFBVDtBQUNBRCxNQUFJLENBQUNJLE9BQUwsQ0FBYSxVQUFDRyxJQUFELEVBQVE7QUFDcEIsUUFBSUEsSUFBSSxDQUFDQyxTQUFMLElBQWtCLElBQXRCLEVBQTJCO0FBQzFCUCxVQUFJLENBQUNRLElBQUwsQ0FBVUYsSUFBSSxDQUFDRyxFQUFmO0FBQ0E7QUFDRCxHQUpEO0FBS0EsU0FBT1QsSUFBUDtBQUNBO0FBQ0QsU0FBU1UsV0FBVCxDQUFxQlgsSUFBckIsRUFBMEI7QUFDekIsTUFBSUMsSUFBSSxHQUFFLEVBQVY7QUFDQUQsTUFBSSxDQUFDSSxPQUFMLENBQWEsVUFBQ0csSUFBRCxFQUFRO0FBQ3BCTixRQUFJLENBQUNRLElBQUwsQ0FBVUYsSUFBSSxDQUFDSyxLQUFmO0FBQ0EsR0FGRDtBQUdBLFNBQU9YLElBQUksQ0FBQ1ksSUFBTCxDQUFVLEdBQVYsQ0FBUDtBQUNBOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZmhCLFlBQVUsRUFBVkEsVUFEZTtBQUVmTyxXQUFTLEVBQVRBLFNBRmU7QUFHZkssYUFBVyxFQUFYQSxXQUhlLEVBQWpCIiwiZmlsZSI6IjI5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5mdW5jdGlvbiBmaWx0ZXJOdWxsKGRhdGEpe1xuXHR2YXIgdGVtcD17fVxuXHRPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpPT57XG5cdFx0aWYgKGRhdGFba2V5XSAhPSAtMSl7XG5cdFx0XHR0ZW1wW2tleV0gPSBkYXRhW2tleV1cblx0XHR9XG5cdH0pXG5cdHJldHVybiB0ZW1wXG59XG5mdW5jdGlvbiBsaXN0MmNvZGUoZGF0YSl7XG5cdGxldCB0ZW1wPVtdXG5cdGRhdGEuZm9yRWFjaCgoaXRlbSk9Pntcblx0XHRpZiAoaXRlbS5pc0NoZWNrZWQgPT0gdHJ1ZSl7XG5cdFx0XHR0ZW1wLnB1c2goaXRlbS5pZClcblx0XHR9XG5cdH0pXG5cdHJldHVybiB0ZW1wXG59XG5mdW5jdGlvbiBsaXN0MnN0cmluZyhkYXRhKXtcblx0bGV0IHRlbXAgPVtdXG5cdGRhdGEuZm9yRWFjaCgoaXRlbSk9Pntcblx0XHR0ZW1wLnB1c2goaXRlbS5sYWJlbClcblx0fSlcblx0cmV0dXJuIHRlbXAuam9pbignKycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaWx0ZXJOdWxsLFxuICBsaXN0MmNvZGUsXG4gIGxpc3Qyc3RyaW5nXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///290\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!*****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/const.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\r\n               * 品质要求\r\n               */\nvar QUALITY = [\n{ key: 1 << 3, value: '包染色' },\n{ key: 1 << 2, value: '染白色' },\n{ key: 1 << 1, value: '染黑色' },\n{ key: 1, value: '不包染色' }];\n\n\n/** 品质定位\r\n                             * \r\n                             */\nvar POSITION = [\n{ key: 1, value: '品牌订单' },\n{ key: 1 << 1, value: '高级订单' },\n{ key: 1 << 2, value: '一般订单' },\n{ key: 1 << 3, value: '市场订单' }];\n\n\n/** 特性\r\n                                  * \r\n                                  */\nvar GLOSS = [\n{ key: 1 << 2, value: '有光' },\n{ key: 1 << 1, value: '半光' },\n{ key: 1, value: '消光' }];\n\n\n/**\r\n                           * 库存状态\r\n                           */\nvar STOCK_TYPES = [\n{ key: 1, value: '有现货并生产中' },\n{ key: 1 << 1, value: '有现货' },\n{ key: 1 << 2, value: '生产中' },\n{ key: 1 << 3, value: '可定织' },\n{ key: 1 << 4, value: '已售罄' }];\n\n\n/** 采购订单\r\n                                 *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n                                 *    分状态(总状态：1)：1：待支付；2：支付处理中；3：待结算；4：结算处理中；5：待收货；6：订单完成;9:买家支付中\r\n                                 */\nvar BUY_ORDER = [\n{ key: 1, value: \"待支付\" },\n{ key: 2, value: \"已支付，银行处理中\" },\n{ key: 3, value: \"支付成功\" },\n{ key: 4, value: \"支付成功\" },\n{ key: 5, value: \"待收货\" },\n{ key: 6, value: \"已收货\" },\n{ key: 7, value: \"线下订单\" },\n{ key: 8, value: \"订单完成\" },\n{ key: 9, value: \"支付中\" }];\n\n\n/**\r\n                            * 采购订单\r\n                            *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n                            *    分状态(总状态：2)：-4：退款中；-5：已退款\r\n                            */\nvar BUY_BACK_ORDER = [\n{ key: -1, value: \"订单已取消\" },\n// { key: -3, value: \"待退款\" },\n{ key: -4, value: \"退款中\" },\n{ key: -5, value: \"已退款\" }];\n\n\n/** \r\n                             * 销售订单\r\n                             *    总状态：1：正常；2：取消；3：完成\r\n                             *    分状态：1：等待代付；2：代付处理中；3：待发货；4：订单完成\r\n                             * \r\n                             *    待确认；已确认；买家已支付，待发货；已发货；订单完成；订单已取消\r\n                             */\nvar SELL_ORDER = [\n{ key: 1, value: \"已确认\" },\n{ key: 2, value: \"已确认\" },\n{ key: 3, value: \"买家已支付，待发货\" },\n{ key: 4, value: \"已发货\" },\n{ key: 5, value: \"线下订单\" },\n{ key: 6, value: \"订单完成\" }];\n\n\n/**\r\n                             * 订单退款结果\r\n                             */\nvar COMPLETE = [\n{ key: -1, value: \"退款失败\" },\n{ key: 0, value: \"退款中\" },\n{ key: 1, value: \"退款成功\" }];\n\n\n\n/**\r\n                             * 采购订单评价--性价比\r\n                             */\nvar COST_PERFORMANCE = [\n{ key: 1, value: '性价比偏高' },\n{ key: 1 << 1, value: '性价比合理' },\n{ key: 1 << 2, value: '性价比偏低' }];\n\n\n/**\r\n                                   * 采购订单评价--实码率\r\n                                   */\nvar REAL_RATE = [\n{ key: 1, value: '实码率正常' },\n{ key: 1 << 1, value: '实码率偏低' }];\n\n\n/**\r\n                                   * 采购订单评价--断经、断纬\r\n                                   */\nvar BREAK_OUT = [\n{ key: 1, value: '断经、断纬偶尔' },\n{ key: 1 << 1, value: '断经、断纬较多' },\n{ key: 1 << 2, value: '断经、断纬多' }];\n\n\n/**\r\n                                    * 采购订单评价--停车明档\r\n                                    */\nvar STOP_BRIGHT = [\n{ key: 1, value: '停车明档偶尔' },\n{ key: 1 << 1, value: '停车明档较多' },\n{ key: 1 << 2, value: '停车明档多' }];\n\n\n/**\r\n                                   * 采购订单评价--停车暗档\r\n                                   */\nvar STOP_DIM = [\n{ key: 1, value: '停车暗档偶尔' },\n{ key: 1 << 1, value: '停车暗档较多' },\n{ key: 1 << 2, value: '停车暗档多' }];\n\n\n/**\r\n                                   * 采购订单评价--暗条\r\n                                   */\nvar DARK_STRIP = [\n{ key: 1, value: '暗条偶尔' },\n{ key: 1 << 1, value: '暗条较多' },\n{ key: 1 << 2, value: '暗条多' }];\n\n\nmodule.exports = {\n  QUALITY: QUALITY,\n  POSITION: POSITION,\n  GLOSS: GLOSS,\n  STOCK_TYPES: STOCK_TYPES,\n  BUY_ORDER: BUY_ORDER,\n  BUY_BACK_ORDER: BUY_BACK_ORDER,\n  SELL_ORDER: SELL_ORDER,\n  COMPLETE: COMPLETE,\n\n  // 采购订单评价\n  COST_PERFORMANCE: COST_PERFORMANCE,\n  REAL_RATE: REAL_RATE,\n  BREAK_OUT: BREAK_OUT,\n  STOP_BRIGHT: STOP_BRIGHT,\n  STOP_DIM: STOP_DIM,\n  DARK_STRIP: DARK_STRIP };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!*******************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/user.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\n               * 用户相关服务\n               */\n\nvar Util = __webpack_require__(/*! utils/util.js */ 16);\nvar Api = __webpack_require__(/*! services/config/api.js */ 17);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 18);\n\n\n/**\n                                                 * 调用微信登录\n                                                 */\nfunction loginByWeixin() {\n  var code = null;\n  return new Es6Promise(function (resolve, reject) {\n    // return Util.login().then((res) => {\n    //   code = res.code;\n    //   return Util.getUserInfo();\n    // }).then((userInfo) => {\n    Es6Promise.all([\n    Util.login(),\n    Util.getUserInfo()]).\n    then(function (allRes) {\n      var code = allRes[0].code;\n      var userInfo = allRes[1];\n      var loginOn = wx.getStorageSync(\"loginOn\");\n\n      if (!loginOn) {// 防止重复请求登录\n        wx.setStorageSync(\"loginOn\", true);\n\n        wx.setStorageSync(\"rawData\", userInfo.rawData);\n        wx.setStorageSync(\"signature\", userInfo.signature);\n\n        //登录远程服务器\n        Util.request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'post').then(function (res) {\n          wx.setStorageSync(\"loginOn\", false);\n\n          if (res.statusCode == 200) {\n            if (res.data.sessionKey) {\n              wx.setStorageSync(\"sessionKey\", res.data.sessionKey);\n            }\n            //存储用户信息\n            wx.setStorageSync('userInfo', res.data.userInfo);\n            wx.setStorageSync('token', res.data.token);\n\n            resolve(res);\n          } else {\n            reject(res);\n          }\n        }).catch(function (err) {\n          wx.setStorageSync(\"loginOn\", false);\n          reject(err);\n        });\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\n   * 判断用户是否登录\n   */\nfunction checkLogin() {\n  return new Es6Promise(function (resolve, reject) {\n    if (wx.getStorageSync('userInfo') && wx.getStorageSync('token')) {\n\n      Util.checkSession().then(function () {\n        resolve(true);\n      }).catch(function () {\n        reject(false);\n      });\n\n    } else {\n      reject(false);\n    }\n  });\n}\n\nmodule.exports = {\n  loginByWeixin: loginByWeixin,\n  checkLogin: checkLogin };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc2VydmljZXMvdXNlci5qcyJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsIkFwaSIsIkVzNlByb21pc2UiLCJsb2dpbkJ5V2VpeGluIiwiY29kZSIsInJlc29sdmUiLCJyZWplY3QiLCJhbGwiLCJsb2dpbiIsImdldFVzZXJJbmZvIiwidGhlbiIsImFsbFJlcyIsInVzZXJJbmZvIiwibG9naW5PbiIsInd4IiwiZ2V0U3RvcmFnZVN5bmMiLCJzZXRTdG9yYWdlU3luYyIsInJhd0RhdGEiLCJzaWduYXR1cmUiLCJyZXF1ZXN0IiwiQXV0aExvZ2luQnlXZWl4aW4iLCJyZXMiLCJzdGF0dXNDb2RlIiwiZGF0YSIsInNlc3Npb25LZXkiLCJ0b2tlbiIsImNhdGNoIiwiZXJyIiwiY2hlY2tMb2dpbiIsImNoZWNrU2Vzc2lvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJDQUFBOzs7O0FBSUEsSUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHVCQUFELENBQXBCO0FBQ0EsSUFBTUMsR0FBRyxHQUFHRCxtQkFBTyxDQUFDLGdDQUFELENBQW5CO0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixtQkFBTyxDQUFDLDRCQUFELENBQTFCOzs7QUFHQTs7O0FBR0EsU0FBU0csYUFBVCxHQUF5QjtBQUN2QixNQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQU8sSUFBSUYsVUFBSixDQUFlLFVBQVVHLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0FKLGNBQVUsQ0FBQ0ssR0FBWCxDQUFlO0FBQ2JSLFFBQUksQ0FBQ1MsS0FBTCxFQURhO0FBRWJULFFBQUksQ0FBQ1UsV0FBTCxFQUZhLENBQWY7QUFHR0MsUUFISCxDQUdRLFVBQUFDLE1BQU0sRUFBSTtBQUNoQixVQUFJUCxJQUFJLEdBQUdPLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVVAsSUFBckI7QUFDQSxVQUFJUSxRQUFRLEdBQUdELE1BQU0sQ0FBQyxDQUFELENBQXJCO0FBQ0EsVUFBSUUsT0FBTyxHQUFHQyxFQUFFLENBQUNDLGNBQUgsQ0FBa0IsU0FBbEIsQ0FBZDs7QUFFQSxVQUFJLENBQUNGLE9BQUwsRUFBYyxDQUFFO0FBQ2RDLFVBQUUsQ0FBQ0UsY0FBSCxDQUFrQixTQUFsQixFQUE2QixJQUE3Qjs7QUFFQUYsVUFBRSxDQUFDRSxjQUFILENBQWtCLFNBQWxCLEVBQTZCSixRQUFRLENBQUNLLE9BQXRDO0FBQ0FILFVBQUUsQ0FBQ0UsY0FBSCxDQUFrQixXQUFsQixFQUErQkosUUFBUSxDQUFDTSxTQUF4Qzs7QUFFQTtBQUNBbkIsWUFBSSxDQUFDb0IsT0FBTCxDQUFhbEIsR0FBRyxDQUFDbUIsaUJBQWpCLEVBQW9DLEVBQUVoQixJQUFJLEVBQUVBLElBQVIsRUFBY1EsUUFBUSxFQUFFQSxRQUF4QixFQUFwQyxFQUF3RSxNQUF4RSxFQUFnRkYsSUFBaEYsQ0FBcUYsVUFBQVcsR0FBRyxFQUFJO0FBQzFGUCxZQUFFLENBQUNFLGNBQUgsQ0FBa0IsU0FBbEIsRUFBNkIsS0FBN0I7O0FBRUEsY0FBSUssR0FBRyxDQUFDQyxVQUFKLElBQWtCLEdBQXRCLEVBQTJCO0FBQ3pCLGdCQUFJRCxHQUFHLENBQUNFLElBQUosQ0FBU0MsVUFBYixFQUF5QjtBQUN2QlYsZ0JBQUUsQ0FBQ0UsY0FBSCxDQUFrQixZQUFsQixFQUFnQ0ssR0FBRyxDQUFDRSxJQUFKLENBQVNDLFVBQXpDO0FBQ0Q7QUFDRDtBQUNBVixjQUFFLENBQUNFLGNBQUgsQ0FBa0IsVUFBbEIsRUFBOEJLLEdBQUcsQ0FBQ0UsSUFBSixDQUFTWCxRQUF2QztBQUNBRSxjQUFFLENBQUNFLGNBQUgsQ0FBa0IsT0FBbEIsRUFBMkJLLEdBQUcsQ0FBQ0UsSUFBSixDQUFTRSxLQUFwQzs7QUFFQXBCLG1CQUFPLENBQUNnQixHQUFELENBQVA7QUFDRCxXQVRELE1BU087QUFDTGYsa0JBQU0sQ0FBQ2UsR0FBRCxDQUFOO0FBQ0Q7QUFDRixTQWZELEVBZUdLLEtBZkgsQ0FlUyxVQUFDQyxHQUFELEVBQVM7QUFDaEJiLFlBQUUsQ0FBQ0UsY0FBSCxDQUFrQixTQUFsQixFQUE2QixLQUE3QjtBQUNBVixnQkFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0QsU0FsQkQ7QUFtQkQ7QUFDRixLQW5DRCxFQW1DR0QsS0FuQ0gsQ0FtQ1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2hCckIsWUFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0QsS0FyQ0Q7QUFzQ0QsR0EzQ00sQ0FBUDtBQTRDRDs7QUFFRDs7O0FBR0EsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQixTQUFPLElBQUkxQixVQUFKLENBQWUsVUFBVUcsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDL0MsUUFBSVEsRUFBRSxDQUFDQyxjQUFILENBQWtCLFVBQWxCLEtBQWlDRCxFQUFFLENBQUNDLGNBQUgsQ0FBa0IsT0FBbEIsQ0FBckMsRUFBaUU7O0FBRS9EaEIsVUFBSSxDQUFDOEIsWUFBTCxHQUFvQm5CLElBQXBCLENBQXlCLFlBQU07QUFDN0JMLGVBQU8sQ0FBQyxJQUFELENBQVA7QUFDRCxPQUZELEVBRUdxQixLQUZILENBRVMsWUFBTTtBQUNicEIsY0FBTSxDQUFDLEtBQUQsQ0FBTjtBQUNELE9BSkQ7O0FBTUQsS0FSRCxNQVFPO0FBQ0xBLFlBQU0sQ0FBQyxLQUFELENBQU47QUFDRDtBQUNGLEdBWk0sQ0FBUDtBQWFEOztBQUVEd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Y1QixlQUFhLEVBQWJBLGFBRGU7QUFFZnlCLFlBQVUsRUFBVkEsVUFGZSxFQUFqQiIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog55So5oi355u45YWz5pyN5YqhXG4gKi9cblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3V0aWxzL3V0aWwuanMnKTtcbmNvbnN0IEFwaSA9IHJlcXVpcmUoJ3NlcnZpY2VzL2NvbmZpZy9hcGkuanMnKTtcbmNvbnN0IEVzNlByb21pc2UgPSByZXF1aXJlKCdsaWIvZXM2LXByb21pc2UuanMnKTtcblxuXG4vKipcbiAqIOiwg+eUqOW+ruS/oeeZu+W9lVxuICovXG5mdW5jdGlvbiBsb2dpbkJ5V2VpeGluKCkge1xuICBsZXQgY29kZSA9IG51bGw7XG4gIHJldHVybiBuZXcgRXM2UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gcmV0dXJuIFV0aWwubG9naW4oKS50aGVuKChyZXMpID0+IHtcbiAgICAvLyAgIGNvZGUgPSByZXMuY29kZTtcbiAgICAvLyAgIHJldHVybiBVdGlsLmdldFVzZXJJbmZvKCk7XG4gICAgLy8gfSkudGhlbigodXNlckluZm8pID0+IHtcbiAgICBFczZQcm9taXNlLmFsbChbXG4gICAgICBVdGlsLmxvZ2luKCksXG4gICAgICBVdGlsLmdldFVzZXJJbmZvKClcbiAgICBdKS50aGVuKGFsbFJlcyA9PiB7XG4gICAgICBsZXQgY29kZSA9IGFsbFJlc1swXS5jb2RlO1xuICAgICAgbGV0IHVzZXJJbmZvID0gYWxsUmVzWzFdO1xuICAgICAgbGV0IGxvZ2luT24gPSB3eC5nZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIik7XG5cbiAgICAgIGlmICghbG9naW5PbikgeyAvLyDpmLLmraLph43lpI3or7fmsYLnmbvlvZVcbiAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoXCJsb2dpbk9uXCIsIHRydWUpO1xuXG4gICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKFwicmF3RGF0YVwiLCB1c2VySW5mby5yYXdEYXRhKVxuICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcInNpZ25hdHVyZVwiLCB1c2VySW5mby5zaWduYXR1cmUpXG4gICAgICAgIFxuICAgICAgICAvL+eZu+W9lei/nOeoi+acjeWKoeWZqFxuICAgICAgICBVdGlsLnJlcXVlc3QoQXBpLkF1dGhMb2dpbkJ5V2VpeGluLCB7IGNvZGU6IGNvZGUsIHVzZXJJbmZvOiB1c2VySW5mbyB9LCAncG9zdCcpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIiwgZmFsc2UpO1xuXG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnNlc3Npb25LZXkpIHtcbiAgICAgICAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoXCJzZXNzaW9uS2V5XCIsIHJlcy5kYXRhLnNlc3Npb25LZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy/lrZjlgqjnlKjmiLfkv6Hmga9cbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCd1c2VySW5mbycsIHJlcy5kYXRhLnVzZXJJbmZvKTtcbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCd0b2tlbicsIHJlcy5kYXRhLnRva2VuKTtcblxuICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QocmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIiwgZmFsc2UpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KVxuICB9KTtcbn1cblxuLyoqXG4gKiDliKTmlq3nlKjmiLfmmK/lkKbnmbvlvZVcbiAqL1xuZnVuY3Rpb24gY2hlY2tMb2dpbigpIHtcbiAgcmV0dXJuIG5ldyBFczZQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAod3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXJJbmZvJykgJiYgd3guZ2V0U3RvcmFnZVN5bmMoJ3Rva2VuJykpIHtcblxuICAgICAgVXRpbC5jaGVja1Nlc3Npb24oKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgcmVqZWN0KGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdChmYWxzZSk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2luQnlXZWl4aW4sXG4gIGNoZWNrTG9naW5cbn07XG5cblxuXG5cblxuXG5cblxuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 32:
/*!*********************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/server.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Common = __webpack_require__(/*! utils/common.js */ 28);\nvar Api = __webpack_require__(/*! services/config/api.js */ 17);\nvar Util = __webpack_require__(/*! utils/util.js */ 16);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 18);\n\n/*\r\n                                                 * get 数据\r\n                                                 */\nfunction getDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'get').then(function (res) {\n      if (res.statusCode === 200) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * post 数据\r\n   */\nfunction postDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'post').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n\n/**\r\n   * put 数据\r\n   */\nfunction putDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'put').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * delete 数据\r\n   */\nfunction deleteDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'delete').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * 页面行为记录\r\n   */\nfunction setActive(that, data) {\n  var apiStr = Api.userBehavior;\n  var token = wx.getStorageSync(\"token\");\n\n  if (that.data.loadState && token) {\n    postDataWX(apiStr, data).then(function (res) {\n      Common.setLoadTrue(that);\n    }).catch(function (err) {\n      Common.setLoadTrue(that);\n    });\n  }\n}\n\n/**\r\n   * 获取表单formId\r\n   */\nfunction getFormId(e) {\n  var formId = e.detail.formId;\n  var formApi = Common.pinFormId(Api.formID, formId);\n  var token = wx.getStorageSync(\"token\");\n\n  if (token && formId != \"the formId is a mock one\") {\n    Util.request(formApi, {}, 'get').then(function (res) {}).catch(function (err) {});\n  }\n}\n\n\n/**\r\n   * 功能：获取二维码\r\n   * 参数：\r\n   *    pagePath：页面路径\r\n   *    id：订单id\r\n   */\nfunction getQRCodeUrl(pagePath, id) {\n  return new Es6Promise(function (resolve, reject) {\n    var COdeApi = Api.QRCodeUrl;\n    var pageUrl = id ? \"\".concat(pagePath, \"?id=\").concat(id) : pagePath;\n\n    Util.request(COdeApi, pageUrl, 'post').then(function (res) {\n      var picUrl = \"\".concat(Api.ShowPic, \"/\").concat(res.data.id, \"/download\");\n\n      Util.downloadFile(picUrl).then(function (weChatUrl) {\n        resolve(weChatUrl);\n      }).catch(function (err) {\n        showModal(\"图片下载失败\");\n      });\n    }).catch(function (err) {\n      Util.showErrorToast(\"获取二维码失败\");\n    });\n  });\n}\n\n/**\r\n   * 上传图片\r\n   * \r\n   * 参数：\r\n   *    photoList：要上传的图片数组\r\n   *    apiState：控制使用压缩上传的api，还是不压缩上传的api\r\n   */\nvar uploadPics = function uploadPics(photoList) {var apiState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new Es6Promise(function (resolve, reject) {\n    var photoJsonArray = [];\n    if (photoList && photoList.length >= 1) {\n      photoList.forEach(function (item) {\n        wx.uploadFile({\n          url: !apiState ? Api.PicUpload : Api.PicNewUpload,\n          filePath: item,\n          name: 'file',\n          header: {\n            'Authorization': \"Bearer \" + wx.getStorageSync('token') },\n\n          formData: {\n            'user': 'test' },\n\n          success: function success(res) {\n            photoJsonArray.push(JSON.parse(res.data));\n\n            if (photoJsonArray.length == photoList.length) {\n              resolve(photoJsonArray);\n            }\n          },\n          fail: function fail(err) {\n            reject(err);\n          } });\n\n      });\n    } else {\n      resolve([]);\n    }\n  });\n};\n\n\n\n/**\r\n    * 功能：采购订单详情--获取用户的 付款银行账户 \r\n    */\nfunction createOrder(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var createOrderApi = Api.createOrder;\n\n    Util.request(createOrderApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      Util.showModal(\"新建询价单失败\");\n      // reject(err);\n    });\n  });\n}\n\n\n\nmodule.exports = {\n  getDataWX: getDataWX,\n  postDataWX: postDataWX,\n  putDataWX: putDataWX,\n  deleteDataWX: deleteDataWX,\n  setActive: setActive,\n  getFormId: getFormId,\n  getQRCodeUrl: getQRCodeUrl,\n  uploadPics: uploadPics,\n  createOrder: createOrder };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 4:
/*!*************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\n       * h5 请求\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-24220191115004\",\"_inBundle\":false,\"_integrity\":\"sha512-UKnpiHSP7h9c5IFpJFkWkpm1KyWz9iHj1hchrQSUxPhChx+KPOmunnQcKGiQvvBz9CeSi7Se/eauJYha5ch0kw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-24220191115004.tgz\",\"_shasum\":\"5848f2204f37daaf8c340fb27d9f76b16fcbfdeb\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"bcf65737c5111d47398695d3db8ed87305df346e\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-24220191115004\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!******************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json?{"type":"style"} ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/qing-f-c/index\": { \"navigationStyle\": \"custom\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/inquiryManage/sampleInquiry/buyDeputy/inquiry-details-result\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/analyst/setSampleResult\": { \"navigationBarTitleText\": \"设置找样结果\" }, \"pages/qing-f-c/login/login\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sales_director/modifyPrice\": { \"navigationBarTitleText\": \"修改报价\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/sales_director/modifyPrice\": { \"navigationBarTitleText\": \"修改报价价格\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/sales_director/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/buyDeputy/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/analyst/inquiry-details-result\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/analyst/modifySampleResult\": { \"navigationBarTitleText\": \"修改找样结果\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/sellDeputy/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sellDeputy/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sales_director/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/analyst/inquiryManage\": { \"navigationBarTitleText\": \"分析师询价管理\" }, \"pages/qing-f-c/inquiryManage/sampleInquiry/analyst/analyst-input\": { \"navigationBarTitleText\": \"录入分析结果\" }, \"pages/qing-f-c/inquiryManage/inquiry-created\": { \"navigationBarTitleText\": \"买帮办新建询价单\" }, \"pages/qing-f-c/inquiryManage/priceTrend/priceTrend\": { \"navigationBarTitleText\": \"价格趋势\" }, \"pages/qing-f-c/inquiryManage/inquiry-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sellDeputy/startQuote\": { \"navigationBarTitleText\": \"卖帮办发起报价\" }, \"pages/qing-f-c/inquiryManage/setQuotePrice/setQuotePrice\": { \"navigationBarTitleText\": \"设置报价\" }, \"pages/qing-f-c/inquiryManage/directorQuotePrice\": { \"navigationBarTitleText\": \"直接报价\" }, \"pages/qing-f-c/test/test\": {}, \"pages/qing-f-c/inquiryManage/sales_director/quotation-detail\": { \"navigationBarTitleText\": \"报价单详情\" }, \"pages/qing-f-c/inquiryManage/quotedPrice/quotedPrice\": { \"navigationBarTitleText\": \"报价详情\" }, \"pages/qing-f-c/inquiryManage/sellDeputy/inquiryManage\": { \"navigationBarTitleText\": \"卖办询价管理\", \"navigationBarBackgroundColor\": \"#ffffff\", \"navigationBarTextStyle\": \"black\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/inquiryManage/sales_director/inquiryManage\": { \"navigationBarTitleText\": \"询价管理\", \"navigationBarBackgroundColor\": \"#ffffff\", \"navigationBarTextStyle\": \"black\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/inquiryManage/inquiryManage\": { \"navigationBarTitleText\": \"买办询价管理\", \"navigationBarBackgroundColor\": \"#ffffff\", \"navigationBarTextStyle\": \"black\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/regionalManager/customer-admin\": { \"navigationBarTitleText\": \"区域经理客户管理\", \"enablePullDownRefresh\": true, \"titleNView\": { \"buttons\": [{ \"float\": \"right\", \"fontSize\": \"15px\", \"text\": \"\" }] } }, \"pages/qing-f-c/regionalManager/deputy-list\": { \"navigationBarTitleText\": \"区域经理选择卖帮办\" }, \"pages/qing-f-c/regionalManager/customer-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/sales_director/customer-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/buyDupty/customer-created\": { \"navigationBarTitleText\": \" 买帮办新建客户\" }, \"pages/qing-f-c/buyDupty/edit-customer\": { \"navigationBarTitleText\": \" 买帮办更新客户\" }, \"pages/qing-f-c/buyDupty/contact-detail\": { \"navigationBarTitleText\": \"联系人详情\" }, \"pages/qing-f-c/buyDupty/setManagerCondition\": { \"navigationBarTitleText\": \"买帮办设置经营状况\" }, \"pages/qing-f-c/sellDupty/customer-admin\": { \"navigationBarTitleText\": \"卖帮办客户管理\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/sellDupty/customer-created\": { \"navigationBarTitleText\": \"卖帮办新建客户\" }, \"pages/qing-f-c/sellDupty/edit-customer\": { \"navigationBarTitleText\": \"卖帮办修改客户\" }, \"pages/qing-f-c/sellDupty/customer-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/sellDupty/contact-detail\": { \"navigationBarTitleText\": \"卖帮办联系人详情\" }, \"pages/qing-f-c/sellDupty/setManagerCondition\": { \"navigationBarTitleText\": \"卖帮办设置管理者特征\" }, \"pages/qing-f-c/sellDupty/editManagerCondition\": { \"navigationBarTitleText\": \"卖帮办编辑管理者特征\" }, \"pages/qing-f-c/sellDupty/add-contact\": { \"navigationBarTitleText\": \"卖帮办联系人详情\" }, \"pages/qing-f-c/sellDupty/edit-contact\": { \"navigationBarTitleText\": \"卖帮办修改联系人\" }, \"pages/qing-f-c/sellDupty/add-competitor\": { \"navigationBarTitleText\": \"卖帮办添加竞争者\" }, \"pages/qing-f-c/sellDupty/edit-competitor\": { \"navigationBarTitleText\": \"卖帮办修改竞争者\" }, \"pages/qing-f-c/sellDupty/detail-competitor\": { \"navigationBarTitleText\": \"卖帮办竞争对手详情\" }, \"pages/qing-f-c/buyDupty/editManagerCondition\": { \"navigationBarTitleText\": \"买帮办编辑管理者特征\" }, \"pages/qing-f-c/buyDupty/add-contact\": { \"navigationBarTitleText\": \"买帮办添加联系人\" }, \"pages/qing-f-c/buyDupty/customer-details\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/buyDupty/detail-competitor\": { \"navigationBarTitleText\": \"买帮办竞争对手详情\" }, \"pages/qing-f-c/buyDupty/edit-competitor\": { \"navigationBarTitleText\": \"买帮办编辑竞争对手\" }, \"pages/qing-f-c/buyDupty/add-competitor\": { \"navigationBarTitleText\": \"买帮办添加竞争对手\" }, \"pages/qing-f-c/buyDupty/customer-admin\": { \"navigationBarTitleText\": \"买帮办客户管理\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/sales_director/customer-admin\": { \"navigationBarTitleText\": \"销售总监客户管理\", \"enablePullDownRefresh\": true, \"titleNView\": { \"buttons\": [{ \"float\": \"right\", \"fontSize\": \"15px\", \"text\": \"\" }] } }, \"pages/qing-f-c/sales_director/manager-list\": { \"navigationBarTitleText\": \"选择区域经理\" }, \"pages/qing-f-c/customer/customer-list\": { \"navigationBarTitleText\": \"客户管理\" }, \"pages/qing-f-c/claimIdentity/claimIdentity\": { \"navigationBarTitleText\": \"身份认领\" }, \"pages/qing-f-c/register/register\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/register/findPassword\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/register/finish\": { \"navigationBarTitleText\": \"注册完成\" }, \"pages/qing-f-c/fangzhidao/index/index\": { \"navigationBarTitleText\": \"纺织道论坛\" }, \"pages/qing-f-c/qiugouqu/index/index\": { \"navigationBarTitleText\": \"求购区\" }, \"pages/qing-f-c/xianhuoqu/index/index\": { \"navigationBarTitleText\": \"现货区\" }, \"pages/qing-f-c/temaiqu/index/index\": { \"navigationBarTitleText\": \"特卖区\" }, \"pages/qing-f-c/register/protocol/protocol\": { \"navigationBarTitleText\": \"轻纺车网服务协议\" }, \"pages/qing-f-c/inquiryManage/recentPrice/recentPrice\": { \"navigationBarTitleText\": \"最近报价\" }, \"pages/qing-f-c/inquiryManage/selectBuyer\": { \"navigationBarTitleText\": \"选择买家\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/inquiryManage/sellDeputy/selectSeller\": { \"navigationBarTitleText\": \"选择卖家\", \"enablePullDownRefresh\": true }, \"pages/qing-f-c/inquiryManage/sampleInquiry/sales_director/find-result\": { \"navigationStyle\": \"custom\" }, \"pages/qing-f-c/inquiryManage/sellDeputy/quotation-detail\": { \"navigationBarTitleText\": \"报价详情\" }, \"pages/qing-f-c/sales_director/approved\": { \"navigationBarTitleText\": \"审核管理\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"\", \"navigationBarBackgroundColor\": \"#FF6000\", \"backgroundColor\": \"white\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*****************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json?{"type":"stat"} ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__85973DE\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX184NTk3M0RFXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);