(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\n                    * Create a cached version of a pure function.\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\n   * Camelize a hyphen-delimited string.\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  maskWebview = maskWebview.parent() || maskWebview; // 再次检测父\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nvar api = /*#__PURE__*/Object.freeze({\n  requireNativePlugin: requireNativePlugin,\n  getSubNVueById: getSubNVueById });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *[\n                                              *    ['data.items', 'data.id', item.data.id],\n                                              *    ['metas', 'id', meta.id]\n                                              *],\n                                              *'test'\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref2)\n\n\n{var mocks = _ref2.mocks,initRefs = _ref2.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref3 =\n\n\n\n  event.detail || event.value,vuePid = _ref3.vuePid,vueOptions = _ref3.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref4.isPage,initRelation = _ref4.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref5)\n\n\n{var isPage = _ref5.isPage,initRelation = _ref5.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XG4gIGNvbnN0IHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcbiAgcmV0dXJuIHMuc3Vic3RyaW5nKDgsIHMubGVuZ3RoIC0gMSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICguLi5hcmdzKSB7XG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdiA9ICctLS1CRUdJTjpKU09OLS0tJyArIEpTT04uc3RyaW5naWZ5KHYpICsgJy0tLUVORDpKU09OLS0tJ1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHYgPT09IG51bGwpIHtcbiAgICAgICAgdiA9ICctLS1OVUxMLS0tJ1xuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2XG4gIH0pXG4gIGxldCBtc2cgPSAnJ1xuICBpZiAobXNncy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgbGFzdE1zZyA9IG1zZ3MucG9wKClcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcbiAgICBpZiAobGFzdE1zZy5pbmRleE9mKCcgYXQgJykgPT09IDApIHtcbiAgICAgIG1zZyArPSBsYXN0TXNnXG4gICAgfSBlbHNlIHtcbiAgICAgIG1zZyArPSAnLS0tQ09NTUEtLS0nICsgbGFzdE1zZ1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBtc2dzWzBdXG4gIH1cbiAgcmV0dXJuIG1zZ1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 144:
/*!*********************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/server.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Common = __webpack_require__(/*! utils/common.js */ 24);\nvar Api = __webpack_require__(/*! services/config/api.js */ 23);\nvar Util = __webpack_require__(/*! utils/util.js */ 27);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 28);\n\n/*\r\n                                                 * get 数据\r\n                                                 */\nfunction getDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'get').then(function (res) {\n      if (res.statusCode === 200) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * post 数据\r\n   */\nfunction postDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'post').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n\n/**\r\n   * put 数据\r\n   */\nfunction putDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'put').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * delete 数据\r\n   */\nfunction deleteDataWX(api, data) {\n  return new Es6Promise(function (resolve, reject) {\n    Util.request(api, data, 'delete').then(function (res) {\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\r\n   * 页面行为记录\r\n   */\nfunction setActive(that, data) {\n  var apiStr = Api.userBehavior;\n  var token = wx.getStorageSync(\"token\");\n\n  if (that.data.loadState && token) {\n    postDataWX(apiStr, data).then(function (res) {\n      Common.setLoadTrue(that);\n    }).catch(function (err) {\n      Common.setLoadTrue(that);\n    });\n  }\n}\n\n/**\r\n   * 获取表单formId\r\n   */\nfunction getFormId(e) {\n  var formId = e.detail.formId;\n  var formApi = Common.pinFormId(Api.formID, formId);\n  var token = wx.getStorageSync(\"token\");\n\n  if (token && formId != \"the formId is a mock one\") {\n    Util.request(formApi, {}, 'get').then(function (res) {}).catch(function (err) {});\n  }\n}\n\n\n/**\r\n   * 功能：获取二维码\r\n   * 参数：\r\n   *    pagePath：页面路径\r\n   *    id：订单id\r\n   */\nfunction getQRCodeUrl(pagePath, id) {\n  return new Es6Promise(function (resolve, reject) {\n    var COdeApi = Api.QRCodeUrl;\n    var pageUrl = id ? \"\".concat(pagePath, \"?id=\").concat(id) : pagePath;\n\n    Util.request(COdeApi, pageUrl, 'post').then(function (res) {\n      var picUrl = \"\".concat(Api.ShowPic, \"/\").concat(res.data.id, \"/download\");\n\n      Util.downloadFile(picUrl).then(function (weChatUrl) {\n        resolve(weChatUrl);\n      }).catch(function (err) {\n        showModal(\"图片下载失败\");\n      });\n    }).catch(function (err) {\n      Util.showErrorToast(\"获取二维码失败\");\n    });\n  });\n}\n\n/**\r\n   * 上传图片\r\n   * \r\n   * 参数：\r\n   *    photoList：要上传的图片数组\r\n   *    apiState：控制使用压缩上传的api，还是不压缩上传的api\r\n   */\nvar uploadPics = function uploadPics(photoList) {var apiState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new Es6Promise(function (resolve, reject) {\n    var photoJsonArray = [];\n    if (photoList && photoList.length >= 1) {\n      photoList.forEach(function (item) {\n        wx.uploadFile({\n          url: !apiState ? Api.PicUpload : Api.PicNewUpload,\n          filePath: item,\n          name: 'file',\n          header: {\n            'Authorization': \"Bearer \" + wx.getStorageSync('token') },\n\n          formData: {\n            'user': 'test' },\n\n          success: function success(res) {\n            photoJsonArray.push(JSON.parse(res.data));\n\n            if (photoJsonArray.length == photoList.length) {\n              resolve(photoJsonArray);\n            }\n          },\n          fail: function fail(err) {\n            reject(err);\n          } });\n\n      });\n    } else {\n      resolve([]);\n    }\n  });\n};\n\n\n\n/**\r\n    * 功能：采购订单详情--获取用户的 付款银行账户 \r\n    */\nfunction createOrder(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var createOrderApi = Api.createOrder;\n\n    Util.request(createOrderApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      Util.showModal(\"新建询价单失败\");\n      // reject(err);\n    });\n  });\n}\n\n\n\nmodule.exports = {\n  getDataWX: getDataWX,\n  postDataWX: postDataWX,\n  putDataWX: putDataWX,\n  deleteDataWX: deleteDataWX,\n  setActive: setActive,\n  getFormId: getFormId,\n  getQRCodeUrl: getQRCodeUrl,\n  uploadPics: uploadPics,\n  createOrder: createOrder };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///144\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 22:
/*!*************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/jsy-server.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _module$exports;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var Api = __webpack_require__(/*! services/config/api.js */ 23);\nvar Common = __webpack_require__(/*! utils/common.js */ 24);\nvar Util = __webpack_require__(/*! utils/util.js */ 27);\nvar User = __webpack_require__(/*! services/user.js */ 31);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 28);\n//下拉选择\n//区域列表\nfunction getRegion() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRegion;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//配合度\nfunction getcoordinate() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getcoordinate;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户类型\nfunction getType() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getType;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户规模\nfunction getScale() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getScale;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//客户来源\nfunction getSource() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getSource;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//公司经营模式\nfunction getBusinessModel() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBusinessModel;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//主营产品\nfunction getMainProduct() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMainProduct;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//资金状况\nfunction getOperateCapital() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateCapital;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//信用状况\nfunction getOperateCredit() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateCredit;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//运营状况\nfunction getOperateOperation() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateOperation;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//口碑\nfunction getOperateWom() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOperateWom;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//品质定位\nfunction getQuality() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getQuality;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//角色\nfunction getPost() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPost;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//渠道\nfunction getChanne() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getChanne;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//性价比\nfunction getCostPerformance() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCostPerformance;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//身份\nfunction getIdentity() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getIdentity;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//发展潜力\nfunction getPotential() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPotential;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//用户价格敏感度\nfunction getPriceSensitivity() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPriceSensitivity;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//性格特点\nfunction getCharacterFeatures() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCharacterFeatures;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//经营者特征\nfunction getManageFeatures() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getManageFeatures;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//经营定位\nfunction getManagementPosition() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getManagementPosition;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction getCooperationIntention() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCooperationIntention;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n\n\nfunction sellCusmterCreated(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.sellCusmterCreated;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// ---------------------------------------------\n\n//新用户注册\nfunction registration(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.registration;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nfunction getUserInfo() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAccountInfo;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      if (err.statusCode == 404) {\n        wx.clearStorage();\n      }\n      reject(err);\n    });\n  });\n}\nfunction getInquiryDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getInquiryDetail + '/' + id;\n\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nfunction getInquiryList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getInquiryList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取跟进列表\nfunction getRecordList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRecordList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//获取客户列表\nfunction getCustomerList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCustomerList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取关联客户列表\nfunction getAssociatedCustomers() {var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAssociatedCustomers;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction getBoundAssociatedCustomers() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBoundAssociatedCustomers;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新建客户跟进记录\nfunction addRecord(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addRecord;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 跟进记录详情单条\nfunction getRecordOne(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRecordOne + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//跟进记录详情\nfunction getRecord(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRecord;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新建客户基本信息\nfunction addCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//获取客户信息\nfunction getCustomerInfo(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCustomerInfo + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置客户身份特征\nfunction setIdentity(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setIdentity;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置客户产品信息\nfunction setOpi(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setOpi;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置经营状况\nfunction setManagement(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setManagement;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新建保证金管理\nfunction setDeposit(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setDeposit;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//保证金详情\nfunction getDeposit(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setDeposit + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n//分析单管理列表\nfunction getAnalysisLst(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAnalysisLst;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新建询价分析单\nfunction addXJAnalysis(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addXJAnalysis;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//录入找样分析单\nfunction addZYAnalysis(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addZYAnalysis;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//推送给全部卖帮办\nfunction pushSellDeputy(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pushSellDeputy + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 推送单个帮办\nfunction pushSingleSeLLDeputy(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMatchingDetail;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//匹配列表\nfunction getMatchingList(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMatchingList + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//录入找样结果\nfunction inputResult(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.inputResult;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取找样结果详情\nfunction getSampleDetail(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getSampleDetail;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取匹配结果详情\nfunction getMatchingDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMatchingDetail + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置找样结果\nfunction setSearchResul(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setSearchResul;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置报价\nfunction setOffer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setOffer;\n    // if (pageId.zyId){\n    //   newApi = newApi + '?zyid=' + pageId.zyId\n    // }\n    //  else if (pageId.ppId){\n    //   newApi = newApi + '?ppid=' + pageId.ppId\n    // }\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置是否匹配\nfunction setWhetherMarching(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setWhetherMarching;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction getVerificationCode(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getVerificationCode;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction userRegistration(data, code) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.userRegistration + '?code=' + code;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//获取最热搜索内容\nfunction getNewSearch(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getNewSearch;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 样品库搜索结果列表\nfunction getsearchResult(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getsearchResult;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 多项搜索\nfunction manySearch(data, pageNo, pageSize) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.manySearch + \"?pageNo=\" + pageNo + \"&pageSize=\" + pageSize;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取样品详情\nfunction getSampleDetailBank(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getsearchResult + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 查看历史报价\nfunction viewHistoryQutoe(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.viewHistoryQutoe;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取管理帮办列表\nfunction getDeputyAdminList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getDeputyAdminList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取区域列表\nfunction getAreaList() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAreaList;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 设置区域经理\nfunction setManager(id, areaId) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setManager + \"?id=\" + id + \"&&areaId=\" + areaId;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取区域经理列表\nfunction getManagerList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getManagerList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取帮办详情\nfunction getDeputyDetails(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getDeputyDetails;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 冻结帮办\nfunction freezeDeputy(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.freezeDeputy;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 分配给区域经理\nfunction allocationDeputy(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.allocationDeputy;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获分配的客户列表\nfunction getAllocationClientList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAllocationClientList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获分配的帮办列表\nfunction getAllocationDeputyList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAllocationDeputyList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 移交权限\nfunction transferManager(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.transferManager;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除帮办分配\nfunction deleteDeputyAllocation(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleteDeputyAllocation;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 管理人员获取客户管理列表\nfunction getAdminCustomerList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAdminCustomerList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 分配客户给区域经理\nfunction allocationCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.allocationCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除客户分配(销售总监)\nfunction deleteAllotCustomer(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleteAllotCustomer;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n//删除客户分配（区域经理）\nfunction deleCustomers(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleCustomers;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 区域经理分配客户\nfunction setCustomerForManager(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setCustomerForManager;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取常规询价列表\nfunction getRoutineList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRoutineList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 催单报价\nfunction reminderOffer(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.reminderOffer + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 常规询价报价\nfunction setQuoteforCgxj(id, data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setQuoteforCgxj + \"/\" + id;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 匹配结果报价\nfunction setQuoteforPpbj(id, data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setQuoteforPpbj + \"/\" + id;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nfunction getPpDetail(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getPpDetail;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 推送卖家\nfunction pushSeller(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pushSeller;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 卖家我的报价列表\nfunction getOfferList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getOfferList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取全部找样、匹配列表\nfunction getAllList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getAllList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 关闭询价单\nfunction closeInquirySheet(id, shut_reason) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.closeInquirySheet + \"/\" + id;\n    Util.request(newApi, { shut_reason: shut_reason }, 'put').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 生成小程序二维码\nfunction generateQrCode(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.generateQrCode;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取未读消息数量\nfunction getNewsNum() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getNewsNum;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取消息列表\nfunction getNewsList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getNewsList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 标记已读\nfunction setHaveRead(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setHaveRead;\n    if (id) {\n      newApi = Api.setHaveRead + \"/\" + id;\n    }\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取客户询价列表\nfunction getCustomerInquiryList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCustomerInquiryList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取最热\nfunction getNewNumber(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getNewNumber;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除找样结果\nfunction deleteSample(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleteSample;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取产品展示详情\nfunction getProductDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getProductDetail + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新增产品\nfunction addProduct(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addProduct;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 批量修改产品展示系列类型\nfunction allModityTypeSeries(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.allModityTypeSeries;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取产品详情\nfunction getProductDetails(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addProduct + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 更新产品信息\nfunction updateProduct(data, id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.updateProduct + \"/\" + id;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 更新记录列表\nfunction getRenewList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getRenewList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 更新产品状态\nfunction updateStatus(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.updateStatus;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 保证金处理列表\nfunction getBondHandleList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBondHandleList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新增保证金处理\nfunction addBondHandle(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addBondHandle;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 保证金处理详情\nfunction getHandleDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addBondHandle + '/' + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新增保证金列表\nfunction getBondAddList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBondAddList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新增保证金\nfunction addBond(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setDeposit;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新增保证金详情\nfunction getBondeDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setDeposit + '/' + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 管理员获取审核列表\nfunction getBondAdmin(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getBondAdmin;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 修改保证金处理状态\nfunction setHandleStatus(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setHandleStatus;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 修改保证金状态\nfunction setBondStatus(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setBondStatus;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 请求再次报价\nfunction requestQuoation(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.requestQuoation;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 找样结果发起报价\nfunction setQuoteForZyxj(id, data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.setQuoteForZyxj + \"/\" + id;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 推送买帮办\nfunction pushToBuyer(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pushToBuyer + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 分析师找样列表\nfunction getzyAnalysisList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getzyAnalysisList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 分析师询价列表\nfunction getxjAnalysisList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getxjAnalysisList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 移交客户列表\nfunction getTransferCustomersList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getTransferCustomersList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 新建修改公司\nfunction corporateBaseInfo(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.corporateBaseInfo;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 添加修改联系人\nfunction addContacts(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.addContacts;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除联系人\nfunction deleBaseInfo(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleBaseInfo + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取公司列表\nfunction getCompanyList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getCompanyList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 是否展示\nfunction controllShow() {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.controllShow;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 获取报价详情\nfunction getQuoteDetail(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getQuoteDetail + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除客户公司\nfunction deleteCompany(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleteCompany + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 选择公司\nfunction getContactsList(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getContactsList + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 删除跟进记录\nfunction deleteFollow(id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.deleteFollow + \"/\" + id;\n    Util.request(newApi, {}, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 分析师推送\nfunction pushAllDeputy(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.pushAllDeputy;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 我的询价列表\nfunction getMyList(data) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.getMyList;\n    Util.request(newApi, data, 'get').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n// 买帮办直接报价\nfunction directQuotation(data, id) {\n  return new Es6Promise(function (resolve, reject) {\n    var newApi = Api.directQuotation + \"/\" + id;\n    Util.request(newApi, data, 'post').then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nmodule.exports = (_module$exports = {\n  getUserInfo: getUserInfo,\n  getInquiryDetail: getInquiryDetail,\n  getInquiryList: getInquiryList,\n  getRecordList: getRecordList,\n  getCustomerList: getCustomerList,\n  getAssociatedCustomers: getAssociatedCustomers,\n  getBoundAssociatedCustomers: getBoundAssociatedCustomers,\n  addRecord: addRecord,\n  getRecordOne: getRecordOne,\n  getRecord: getRecord,\n  addCustomer: addCustomer,\n  getCustomerInfo: getCustomerInfo,\n  setIdentity: setIdentity,\n  setOpi: setOpi,\n  setManagement: setManagement,\n  setDeposit: setDeposit,\n  getDeposit: getDeposit,\n  getAnalysisLst: getAnalysisLst,\n  addXJAnalysis: addXJAnalysis,\n  addZYAnalysis: addZYAnalysis,\n  pushSellDeputy: pushSellDeputy,\n  getMatchingList: getMatchingList,\n  inputResult: inputResult,\n  getSampleDetail: getSampleDetail,\n  getMatchingDetail: getMatchingDetail,\n  setSearchResul: setSearchResul,\n  setOffer: setOffer,\n  setWhetherMarching: setWhetherMarching,\n  getVerificationCode: getVerificationCode,\n  userRegistration: userRegistration,\n  getNewSearch: getNewSearch,\n  getsearchResult: getsearchResult,\n  manySearch: manySearch,\n  getSampleDetailBank: getSampleDetailBank,\n  viewHistoryQutoe: viewHistoryQutoe,\n  getDeputyAdminList: getDeputyAdminList,\n  getAreaList: getAreaList,\n  setManager: setManager,\n  getManagerList: getManagerList,\n  getDeputyDetails: getDeputyDetails,\n  freezeDeputy: freezeDeputy,\n  allocationDeputy: allocationDeputy,\n  getAllocationDeputyList: getAllocationDeputyList,\n  getAllocationClientList: getAllocationClientList,\n  transferManager: transferManager,\n  deleteDeputyAllocation: deleteDeputyAllocation,\n  getAdminCustomerList: getAdminCustomerList,\n  allocationCustomer: allocationCustomer,\n  deleteAllotCustomer: deleteAllotCustomer,\n  deleCustomers: deleCustomers,\n  setCustomerForManager: setCustomerForManager,\n  getRoutineList: getRoutineList,\n  reminderOffer: reminderOffer,\n  setQuoteforCgxj: setQuoteforCgxj,\n  pushSingleSeLLDeputy: pushSingleSeLLDeputy,\n  getPpDetail: getPpDetail,\n  setQuoteforPpbj: setQuoteforPpbj,\n  pushSeller: pushSeller,\n  getOfferList: getOfferList,\n  getAllList: getAllList,\n  closeInquirySheet: closeInquirySheet,\n  generateQrCode: generateQrCode,\n  getNewsNum: getNewsNum,\n  getNewsList: getNewsList,\n  setHaveRead: setHaveRead,\n  getCustomerInquiryList: getCustomerInquiryList,\n  getNewNumber: getNewNumber,\n  deleteSample: deleteSample,\n  getProductDetail: getProductDetail,\n  addProduct: addProduct,\n  allModityTypeSeries: allModityTypeSeries,\n  getProductDetails: getProductDetails,\n  updateProduct: updateProduct,\n  getRenewList: getRenewList,\n  updateStatus: updateStatus,\n  getBondHandleList: getBondHandleList,\n  addBondHandle: addBondHandle,\n  getHandleDetail: getHandleDetail,\n  getBondAddList: getBondAddList,\n  addBond: addBond,\n  getBondeDetail: getBondeDetail,\n  getBondAdmin: getBondAdmin,\n  setHandleStatus: setHandleStatus,\n  setBondStatus: setBondStatus,\n  requestQuoation: requestQuoation,\n  setQuoteForZyxj: setQuoteForZyxj,\n  pushToBuyer: pushToBuyer,\n  getzyAnalysisList: getzyAnalysisList,\n  getxjAnalysisList: getxjAnalysisList,\n  getTransferCustomersList: getTransferCustomersList,\n  corporateBaseInfo: corporateBaseInfo,\n  addContacts: addContacts,\n  deleBaseInfo: deleBaseInfo,\n  getCompanyList: getCompanyList,\n  controllShow: controllShow,\n  getQuoteDetail: getQuoteDetail,\n  deleteCompany: deleteCompany,\n  getContactsList: getContactsList,\n  deleteFollow: deleteFollow,\n  pushAllDeputy: pushAllDeputy,\n  getMyList: getMyList,\n  directQuotation: directQuotation,\n  getManageFeatures: getManageFeatures,\n  getRegion: getRegion,\n  getcoordinate: getcoordinate,\n  getType: getType,\n  getScale: getScale,\n  getSource: getSource,\n  getBusinessModel: getBusinessModel,\n  getMainProduct: getMainProduct,\n  getOperateCapital: getOperateCapital,\n  getOperateCredit: getOperateCredit,\n  getOperateOperation: getOperateOperation,\n  getOperateWom: getOperateWom,\n  getQuality: getQuality,\n  getPost: getPost,\n  getChanne: getChanne,\n  getCostPerformance: getCostPerformance,\n  getIdentity: getIdentity,\n  getPotential: getPotential,\n  getPriceSensitivity: getPriceSensitivity,\n  getCharacterFeatures: getCharacterFeatures }, _defineProperty(_module$exports, \"getManageFeatures\",\ngetManageFeatures), _defineProperty(_module$exports, \"getManagementPosition\",\ngetManagementPosition), _defineProperty(_module$exports, \"getCooperationIntention\",\ngetCooperationIntention), _defineProperty(_module$exports, \"sellCusmterCreated\",\nsellCusmterCreated), _module$exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!*************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/config/api.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //  const ServerUrl = \"https://www.144f.com\"; // 生产环境\n\n//const ServerUrl = \"https://www.qingfangche.net\"; // 开发环境\nvar ServerUrl = \"http://192.168.11.141\";\n\nvar NewApiRootUrl = ServerUrl + '/api/';\nvar WXApiRootUrl = ServerUrl + '/wx/';\nvar ChooseUrl = ServerUrl + '/choose/';\nvar VERSION = '3.3.72'; // 小程序版本\n\nmodule.exports = {\n  VERSION: VERSION,\n  NewApiRootUrl: NewApiRootUrl,\n  WXApiRootUrl: WXApiRootUrl,\n  ChooseUrl: ChooseUrl,\n  //下拉选择\n\n  getRegion: ChooseUrl + \"region\", //区域\n  getcoordinate: ChooseUrl + \"coordinate\", //配合度\n  getType: ChooseUrl + \"type\", //客户类型\n  getScale: ChooseUrl + \"scale\", //客户规模\n  getSource: ChooseUrl + \"source\", //客户来源\n  getBusinessModel: ChooseUrl + \"businessModel\", //公司经营模式\n  getMainProduct: ChooseUrl + \"mainProduct\", //主营产品\n  getOperateCapital: ChooseUrl + \"operateCapital\", //资金状况\n  getOperateCredit: ChooseUrl + \"operateCredit\", //信用状况\n  getOperateOperation: ChooseUrl + \"operateOperation\", //运营状况\n  getOperateWom: ChooseUrl + \"operateWom\", //口碑\n  getQuality: ChooseUrl + \"quality\", //品质定位\n  getPost: ChooseUrl + \"post\", //角色\n  getChanne: ChooseUrl + \"channe\", //渠道\n  getCostPerformance: ChooseUrl + \"costPerformance\", //性价比\n  getIdentity: ChooseUrl + \"identity\", //身份\n  getPotential: ChooseUrl + \"potential\", //发展潜力\n  getPriceSensitivity: ChooseUrl + \"priceSensitivity\", //用户价格敏感度\n  getCooperationIntention: ChooseUrl + \"cooperationIntention\", //合作意向\n  getCharacterFeatures: ChooseUrl + \"characterFeatures\", //性格特点\n  getManageFeatures: ChooseUrl + \"manageFeatures\", //经营者特征\n  getManagementPosition: ChooseUrl + \"managementPosition\", //经营定位\n\n\n  //\n  sellCusmterCreated: ServerUrl + \"/cm/sellAddCustomer\", //卖帮办创建客户\n\n\n\n\n  // 图片处理\n  picIdentify: NewApiRootUrl + \"common/picture\", // 图片识别\n  ShowPic: NewApiRootUrl + 'common/picture', // 图片展示/下载\n  PicUpload: NewApiRootUrl + 'common/picture/upload', // 图片上传\n  PicNewUpload: NewApiRootUrl + 'common/picture/v2.2/upload', // 图片上传\n  QRCodeUrl: NewApiRootUrl + 'wxma/qrcode/save', // 获取二维码\n  ConsultTel: WXApiRootUrl + 'consultative', // 获取咨询电话\n\n  AuthLoginByWeixin: WXApiRootUrl + 'user/login', // 微信登录\n  getAccountInfo: WXApiRootUrl + 'user/account', // 获取用户信息\n  // Info: WXApiRootUrl +'user/info', // test\n  formID: WXApiRootUrl + 'formid', // 提交formId\n  userBehavior: WXApiRootUrl + 'common/event', // 用户行为\n  phoneAuthorize: WXApiRootUrl + 'user/registered', // 判断电话是否授权\n  getUserPhone: WXApiRootUrl + 'user/getPhone', // 获取用户微信电话号码\n\n\n  IndexBanner: WXApiRootUrl + 'pbp/banner', // 首页--banner\n  IndexNews: WXApiRootUrl + 'common/message/pbp-index/top', // 首页--公告\n  IndexParam: WXApiRootUrl + 'pbp/index/data', // 首页--系统数据：加入的人织造厂等\n  IndexOrder: WXApiRootUrl + \"common/message/pbp-user/tx-buy-order/first\", // 首页--待支付订单\n  IndexJoinState: WXApiRootUrl + 'pbp/corp-apply/status', // 首页--申请加盟状态\n  regUser: WXApiRootUrl + 'user/v2.2/phone', // 用户注册--提交用户注册（用户微信有号码）\n\n  // 首页--找布、加盟\n  findCloth: WXApiRootUrl + 'pbp/seek-demand', // 提交我的找布\n  joinCorp: WXApiRootUrl + 'pbp/corp-apply', // 提交加盟申请\n  validate: WXApiRootUrl + 'common/sms/sendPbpUserVerifyCode', // 加盟申请/用户注册--发送验证码\n  telName: WXApiRootUrl + 'user/phone', // 用户注册--提交用户注册\n  company: WXApiRootUrl + 'user', // 用户注册--提交公司名称\n\n  // 求购区\n  BuySample: WXApiRootUrl + 'pbp/qiugou', // 求购区--求购列表/求购详情/收藏/取消收藏/浏览人数/搜索\n  BuyOffer: WXApiRootUrl + 'pbp/qiugou-baojia', // 求购区--求购报价\n  BuyCase: WXApiRootUrl + 'pbp/seek-case', // 求购区--匹配成功列表/匹配详情/交易成功列表/交易详情/搜索\n\n  // 现货区\n  goodsList: WXApiRootUrl + 'pbp/spotarea', // 现货区--现货列表/现货详情/收藏/取消收藏/浏览人数\n  goodsApply: WXApiRootUrl + 'pbp/spotarea-apply', // 现货区--提交索样\n\n  // 我的\n  UserNews: WXApiRootUrl + 'common/message/pbp-user/top', // 我的--是否有我的消息\n  UserApprove: WXApiRootUrl + \"tx/certify\", // 我的--个人/企业认证信息\n  UserPaySave: WXApiRootUrl + 'tx/bank/paylist/1', // 我的--付款支持的 储蓄卡 账户列表\n  UserPayCredit: WXApiRootUrl + 'tx/bank/paylist/3', // 我的--付款支持的 信用卡 账户列表\n  UserCashBank: WXApiRootUrl + 'tx/bank/recvlist', // 我的--收款支持的银行账户列表\n\n  // 我的--我的消息\n  UserNewsList: WXApiRootUrl + 'common/message/pbp-user', // 我的--我的消息--消息列表\n  UserNewsRead: WXApiRootUrl + 'common/message', // 我的--我的消息--阅读消息\n\n  // 我的--我的找布\n  UserCloth: WXApiRootUrl + 'pbp/seek', // 我的--我的找布--我的找布/找布详情\n  UserAnalysis: WXApiRootUrl + 'pbp/seek-analysis', // 我的--我的找布--找布详情--分析结果确认/否认\n  UserResult: WXApiRootUrl + 'pbp/seek-result', // 我的--我的找布--找布详情--布样结果确认/否认\n  UserFinally: WXApiRootUrl + 'pbp/seek-finally', // 我的--我的找布--找布详情--匹配结果-提交评价\n\n  // 我的--报价\n  UserPrice: WXApiRootUrl + 'pbp/qiugou-baojia', // 我的--我的报价--报价列表/报价详情\n  UserPriceDel: WXApiRootUrl + 'pbp/qiugou-baojia/delete', // 我的--我的报价--清除失效报价\n  UserPriceMatch: WXApiRootUrl + 'pbp/qiugou-matched', // 我的--我的报价--报价详情--提交报价评价\n\n  // 我的--我的索样\n  UserSeek: WXApiRootUrl + 'pbp/spotarea-apply/query', // 我的--我的索样--索样列表\n  UserSeekDel: WXApiRootUrl + 'pbp/spotarea-apply/delete', // 我的--我的索样--清空失效索样\n\n  // 我的--收藏夹\n  UserCollBuy: WXApiRootUrl + 'pbp/user-collection', // 我的--收藏夹--求购收藏--收藏列表\n  UserBuyUnColl: WXApiRootUrl + 'pbp/qiugou/uncollect', // 我的--收藏夹--求购收藏--取消收藏（清除失效收藏）\n  UserCollGoods: WXApiRootUrl + 'pbp/user-collection/query/spotarea', // 我的--收藏夹--现货收藏--收藏列表\n  UserGoodsUnColl: WXApiRootUrl + 'pbp/spotarea/uncollect', // 我的--收藏夹--现货收藏--取消收藏（清除失效收藏）\n\n  // 我的--交易账户\n  UserPayVerify: WXApiRootUrl + 'tx/user-paycard/send', // 我的--我的交易账户--添加交易账户--发送验证码\n  UserPayAccount: WXApiRootUrl + 'tx/user-paycard', // 我的--我的交易账户--付款账户--付款账户列表/解除绑定/设为默认账户/添加付款账户\n  UserCashAccount: WXApiRootUrl + \"tx/user-recvcard\", // 我的--我的交易账户--收款账户--(个人)收款账户列表/解除绑定/设为默认账户/添加收款账户/(企业)收款账户列表/添加收款账户/解除绑定\n\n  // 我的--个人/企业 认证\n  UserFormApprove: WXApiRootUrl + \"tx/certify\", // 我的--个人/企业认证--获取认证信息/提交个人认证/提交企业认证\n\n  // 我的--我的交易订单\n  UserBuyList: WXApiRootUrl + \"tx/order/buylist\", // 我的--我的交易订单--采购订单列表\n  UserSellList: WXApiRootUrl + \"tx/order/selllist\", // 我的--我的交易订单--销售订单列表\n  UserOrder: WXApiRootUrl + \"tx/order\", // 我的--我的交易订单--采购订单详情/提交评价/修改退款账户/确认收货/快捷支付验证码/快捷支付；销售订单详情/确认订单/修改收款账户/确认收货/提交评价\n  UserBuyAppraise: WXApiRootUrl + \"tx/assess\", // 采购订单提交评价\n  UserOrderSend: NewApiRootUrl + \"wxma/tplmsg/send\", // 订单支付成功后，发送信息通知卖家\n  // bannee点击跳转\n  // bannerJump: NewApiRootUrl +\"pbp/banner\",\n\n  // 加盟，找样，上月成交\n  mainCount: WXApiRootUrl + \"pbp/mixed-information/banner/count\",\n  // 客户评语\n  guestComment: WXApiRootUrl + \"pbp/comments\",\n  //弹窗广告\n  popAds: WXApiRootUrl + \"pbp/banner/advertise\",\n\n  //搜索求购、现货、成功案例的整合\n  goodsCount: WXApiRootUrl + \"pbp/mixed-information/keyword\",\n\n  // 订单整合\n  totalOrder: WXApiRootUrl + \"tx/order/orderlist\",\n\n  // mingpian: WXApiRootUrl + \"pbp/corp-apply\",\n\n  tiaozhuan: WXApiRootUrl + \"user/gotoCarte\",\n\n  //白条消息通知\n  whiteBars: WXApiRootUrl + \"tx/white-strip/notice\", //POST\n\n\n  //白条页面展示\n  whiteStrips: WXApiRootUrl + \"tx/whitebar-apply/status\", //get\n\n  baitiaoApply: WXApiRootUrl + \"tx/whitebar-apply\", //POST\n\n\n  //获取信用卡手续费费率\n  getPayRateNum: NewApiRootUrl + \"/common/param/creditrates\", //get\n\n  // 金梭云\n  // 新建询价单\n  createOrder: WXApiRootUrl + \"inquiry-list\", //post\n\n  // 询价单详情\n  getInquiryDetail: WXApiRootUrl + \"inquiry-list\", //get\n\n  // 获取询价单列表\n  getInquiryList: WXApiRootUrl + \"inquiry-list/findAll\",\n  //分析师获取分析单管理列表\n  getAnalysisLst: WXApiRootUrl + \"inquirylist/analysis/findAll\",\n  // 录入找样结果，\n  inputResult: WXApiRootUrl + \"inquirylist/seek-result\",\n  // 获取找样结果详情\n  getSampleDetail: WXApiRootUrl + \"inquirylist/seek-result/getZyDetail\",\n  //新建保证金管理\n  setDeposit: WXApiRootUrl + \"customer/deposit\",\n  // 新建询价分析单\n  addXJAnalysis: WXApiRootUrl + \"inquirylist/analysis\",\n  // 录入找样分析单\n  addZYAnalysis: WXApiRootUrl + \"inquirylist/seekresult/analysis\",\n  //推送给卖帮办\n  pushSellDeputy: WXApiRootUrl + \"inquiry-list/forAllseller\",\n  // 催单报价\n  reminderOffer: WXApiRootUrl + \"inquiry-list/urgeQuote\",\n  //获取匹配列表\n  getMatchingList: WXApiRootUrl + \"inquiry-list/searchInSample\",\n  //设置找样结果\n  setSearchResul: WXApiRootUrl + \"inquirylist/seek-result/setSampleResults\",\n  //设置并推送报价\n  setOffer: WXApiRootUrl + \"inquirylist/quote/setQuote\",\n  //设置是否匹配\n  setWhetherMarching: WXApiRootUrl + \"inquirylist/quote/updateStatus\",\n  // 获取匹配结果详情,推送卖帮办\n  getMatchingDetail: WXApiRootUrl + \"inquirylist/push\",\n  // 样品库获取最热搜索\n  getNewSearch: WXApiRootUrl + \"jsy/sample/findByType\",\n  // 样品库搜索结果列表,样品详情\n  getsearchResult: WXApiRootUrl + \"jsy/sample\",\n  //多项搜索\n  manySearch: WXApiRootUrl + \"jsy/sample/searchDetail\",\n  //查看历史报价\n  viewHistoryQutoe: WXApiRootUrl + \"jsy/sample/quoteHistory\",\n  // 获取管理帮办列表\n  getDeputyAdminList: WXApiRootUrl + \"jsy/designatedPersons/deputy\",\n  //获取区域列表 \n  getAreaList: WXApiRootUrl + \"jsy/designatedPersons/getAreaList\",\n  // 设置区域经理\n  setManager: WXApiRootUrl + \"jsy/designatedPersons/setManager\",\n  //获取区域经理列表\n  getManagerList: WXApiRootUrl + \"jsy/designatedPersons/getManagerList\",\n  // 获取帮办详情\n  getDeputyDetails: WXApiRootUrl + \"jsy/designatedPersons/getDeputy\",\n  // 冻结帮办\n  freezeDeputy: WXApiRootUrl + \"jsy/designatedPersons/freezeDeputy\",\n  // 分配给区域经理\n  allocationDeputy: WXApiRootUrl + \"jsy/designatedPersons/setDeputy\",\n  //获取分配的客户列表\n  getAllocationClientList: WXApiRootUrl + \"jsy/designatedPersons/distribution/customer\",\n  //获取分配的帮办列表\n  getAllocationDeputyList: WXApiRootUrl + \"jsy/designatedPersons/distribution/deputy\",\n  // 移交权限\n  transferManager: WXApiRootUrl + \"jsy/designatedPersons/transferManager\",\n  // 删除帮办分配\n  deleteDeputyAllocation: WXApiRootUrl + \"jsy/designatedPersons/deleDeputyList\",\n  // 管理人员获取客户管理列表\n  getAdminCustomerList: WXApiRootUrl + \"jsy/designatedPersons/customerList\",\n  // 分配客户给区域经理\n  allocationCustomer: WXApiRootUrl + \"jsy/designatedPersons/setCustomerForDirector\",\n  // 删除客户分配\n  deleteAllotCustomer: WXApiRootUrl + \"jsy/designatedPersons/deleCustomerList\",\n  //删除客户分配（区域经理）\n  deleCustomers: WXApiRootUrl + \"jsy/designatedPersons/deleCustomers\",\n  // 区域经理分配客户\n  setCustomerForManager: WXApiRootUrl + \"jsy/designatedPersons/setCustomerForManager\",\n  // 获取常规询价列表\n  getRoutineList: WXApiRootUrl + \"inquiry-list/findAllConvention\",\n  // 常规询价报价\n  setQuoteforCgxj: WXApiRootUrl + \"inquirylist/push/setQuoteforCgxj\",\n  // 匹配结果报价\n  setQuoteforPpbj: WXApiRootUrl + \"inquirylist/push/setQuote\",\n  // 获取匹配结果详情\n  getPpDetail: WXApiRootUrl + \"inquirylist/push/getPpDetail\",\n  // 推送卖家\n  pushSeller: WXApiRootUrl + \"inquirylist/push/pushSeller\",\n  // 卖家，我的报价列表\n  getOfferList: WXApiRootUrl + \"inquiry-list/myQuote\",\n  // 获取全部找样、匹配列表\n  getAllList: WXApiRootUrl + \"inquiry-list/getAllQuote\",\n  // 关闭询价单\n  closeInquirySheet: WXApiRootUrl + \"inquiry-list/updateStatus\",\n  // 生成小程序二维码\n  generateQrCode: NewApiRootUrl + \"wxma/qrcode/min\",\n  // 获取未读消息数量\n  getNewsNum: WXApiRootUrl + \"jsy/message/findAllNum\",\n  //获取消息列表\n  getNewsList: WXApiRootUrl + \"jsy/message/findAll\",\n  //标记已读\n  setHaveRead: WXApiRootUrl + \"jsy/message/haveRead\",\n  // 最热\n  getNewNumber: WXApiRootUrl + \"jsy/sample/findAllByType\",\n  // 删除找样结果\n  deleteSample: WXApiRootUrl + \"inquirylist/seek-result/delete\",\n  // 请求再次报价\n  requestQuoation: WXApiRootUrl + \"inquirylist/quote/requestQuoteAgain\",\n  // 找样发起报价\n  setQuoteForZyxj: WXApiRootUrl + \"inquirylist/quote/setQuoteForZyxj\",\n  // 推送买帮办\n  pushToBuyer: WXApiRootUrl + \"inquirylist/quote/pushToBuyer\",\n  // 分析师找样列表\n  getzyAnalysisList: WXApiRootUrl + \"inquirylist/analysis/findAllForZy\",\n  // 分析师询价列表\n  getxjAnalysisList: WXApiRootUrl + \"inquirylist/analysis/findAllForXj\",\n  // 移交客户列表\n  getTransferCustomersList: WXApiRootUrl + \"jsy/designatedPersons/deputylistForTransfer\",\n\n  //金梭云客户管理系统\n\n  // 获取跟进记录列表\n  getRecordList: WXApiRootUrl + \"customer/findAllFollowList\", //get\n  //获取客户列表\n  getCustomerList: WXApiRootUrl + \"customer/findAllCustomerByPage\", //get\n  // 获取帮办关联客户列表\n  getAssociatedCustomers: WXApiRootUrl + \"customer/findAllCustomer\", //get\n  // 获取帮办关联客户列表(已绑定)\n  getBoundAssociatedCustomers: WXApiRootUrl + \"customer/findAllUser\",\n  //新建客户跟进记录\n  addRecord: WXApiRootUrl + \"customer/followRecord\", //post\n  //跟进记录单条\n  getRecordOne: WXApiRootUrl + \"customer/followRecordFindOne\", //post\n  //跟进记录\n  getRecord: WXApiRootUrl + \"customer/followRecordFindAll\", //get\n  // 新建客户\n  addCustomer: WXApiRootUrl + \"customer/baseInfo\", //post\n  // 获取客户信息\n  getCustomerInfo: WXApiRootUrl + \"customer/baseInfo/\", //get\n  //设置客户身份特征\n  setIdentity: WXApiRootUrl + \"customer/identityCharacteristics\", //post\n  // 设置客户产品信息\n  setOpi: WXApiRootUrl + \"customer/productInfo\", //post\n  // 设置经营状况\n  setManagement: WXApiRootUrl + \"customer/operationStatus\", //post\n  //获取验证码\n  getVerificationCode: WXApiRootUrl + \"common/sms/sendPbpUserVerifyCodeUnBind\", //post\n  // 注册用户\n  userRegistration: WXApiRootUrl + \"customer/login\", //post\n  // 客户询价记录\n  getCustomerInquiryList: WXApiRootUrl + \"inquiry-list/findAllByBuyerid\",\n  //产品展示详情\n  getProductDetail: WXApiRootUrl + \"customer/product/productShow\",\n  // 新增产品\n  addProduct: WXApiRootUrl + \"customer/product\",\n  // 批量修改产品展示系列类型\n  allModityTypeSeries: WXApiRootUrl + \"customer/product/updateAll\",\n  // 更新产品信息\n  updateProduct: WXApiRootUrl + \"customer/product/updateProduct\",\n  // 更新记录列表\n  getRenewList: WXApiRootUrl + \"customer/product/renewList\",\n  //更新产品状态\n  updateStatus: WXApiRootUrl + \"customer/product/updateStatus\",\n  // 保证金处理列表\n  getBondHandleList: WXApiRootUrl + \"customer/depositDeal/findAll\",\n  // 新增保证金处理\n  addBondHandle: WXApiRootUrl + \"customer/depositDeal\",\n  // 保证金列表\n  getBondAddList: WXApiRootUrl + \"customer/deposit/findAll\",\n  // 管理员获取审核列表\n  getBondAdmin: WXApiRootUrl + \"customer/depositDeal/findAllList\",\n  // 修改保证金处理状态\n  setHandleStatus: WXApiRootUrl + \"customer/depositDeal/updateStatus\",\n  // 修改添加保证金状态\n  setBondStatus: WXApiRootUrl + \"customer/deposit/updateStatus\",\n  // 新建修改公司\n  corporateBaseInfo: WXApiRootUrl + \"corporateBaseInfo\",\n  // 添加联系人\n  addContacts: WXApiRootUrl + \"customer/baseInfo\",\n  // 删除联系人\n  deleBaseInfo: WXApiRootUrl + \"customer/deleBaseInfo\",\n  // 获取公司列表\n  getCompanyList: WXApiRootUrl + \"corporateBaseInfo/list\",\n  // 是否展示\n  controllShow: NewApiRootUrl + \"common/param/controllShow\",\n  // 报价详情\n  getQuoteDetail: WXApiRootUrl + \"inquirylist/quote\",\n  // 删除客户公司\n  deleteCompany: WXApiRootUrl + \"corporateBaseInfo/dele\",\n  // 选择联系人\n  getContactsList: WXApiRootUrl + \"corporateBaseInfo/contlist\",\n  // 删除跟进记录\n  deleteFollow: WXApiRootUrl + \"customer/deleFollowRecord\",\n  // 分析师推送\n  pushAllDeputy: WXApiRootUrl + \"inquirylist/seekresult/analysis/push\",\n  // 我的询价列表\n  getMyList: WXApiRootUrl + \"inquiry-list/findMyInquiry\",\n  // \n  directQuotation: WXApiRootUrl + \"inquirylist/quote/setQuoteMJ\" };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc2VydmljZXMvY29uZmlnL2FwaS5qcyJdLCJuYW1lcyI6WyJTZXJ2ZXJVcmwiLCJOZXdBcGlSb290VXJsIiwiV1hBcGlSb290VXJsIiwiQ2hvb3NlVXJsIiwiVkVSU0lPTiIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRSZWdpb24iLCJnZXRjb29yZGluYXRlIiwiZ2V0VHlwZSIsImdldFNjYWxlIiwiZ2V0U291cmNlIiwiZ2V0QnVzaW5lc3NNb2RlbCIsImdldE1haW5Qcm9kdWN0IiwiZ2V0T3BlcmF0ZUNhcGl0YWwiLCJnZXRPcGVyYXRlQ3JlZGl0IiwiZ2V0T3BlcmF0ZU9wZXJhdGlvbiIsImdldE9wZXJhdGVXb20iLCJnZXRRdWFsaXR5IiwiZ2V0UG9zdCIsImdldENoYW5uZSIsImdldENvc3RQZXJmb3JtYW5jZSIsImdldElkZW50aXR5IiwiZ2V0UG90ZW50aWFsIiwiZ2V0UHJpY2VTZW5zaXRpdml0eSIsImdldENvb3BlcmF0aW9uSW50ZW50aW9uIiwiZ2V0Q2hhcmFjdGVyRmVhdHVyZXMiLCJnZXRNYW5hZ2VGZWF0dXJlcyIsImdldE1hbmFnZW1lbnRQb3NpdGlvbiIsInNlbGxDdXNtdGVyQ3JlYXRlZCIsInBpY0lkZW50aWZ5IiwiU2hvd1BpYyIsIlBpY1VwbG9hZCIsIlBpY05ld1VwbG9hZCIsIlFSQ29kZVVybCIsIkNvbnN1bHRUZWwiLCJBdXRoTG9naW5CeVdlaXhpbiIsImdldEFjY291bnRJbmZvIiwiZm9ybUlEIiwidXNlckJlaGF2aW9yIiwicGhvbmVBdXRob3JpemUiLCJnZXRVc2VyUGhvbmUiLCJJbmRleEJhbm5lciIsIkluZGV4TmV3cyIsIkluZGV4UGFyYW0iLCJJbmRleE9yZGVyIiwiSW5kZXhKb2luU3RhdGUiLCJyZWdVc2VyIiwiZmluZENsb3RoIiwiam9pbkNvcnAiLCJ2YWxpZGF0ZSIsInRlbE5hbWUiLCJjb21wYW55IiwiQnV5U2FtcGxlIiwiQnV5T2ZmZXIiLCJCdXlDYXNlIiwiZ29vZHNMaXN0IiwiZ29vZHNBcHBseSIsIlVzZXJOZXdzIiwiVXNlckFwcHJvdmUiLCJVc2VyUGF5U2F2ZSIsIlVzZXJQYXlDcmVkaXQiLCJVc2VyQ2FzaEJhbmsiLCJVc2VyTmV3c0xpc3QiLCJVc2VyTmV3c1JlYWQiLCJVc2VyQ2xvdGgiLCJVc2VyQW5hbHlzaXMiLCJVc2VyUmVzdWx0IiwiVXNlckZpbmFsbHkiLCJVc2VyUHJpY2UiLCJVc2VyUHJpY2VEZWwiLCJVc2VyUHJpY2VNYXRjaCIsIlVzZXJTZWVrIiwiVXNlclNlZWtEZWwiLCJVc2VyQ29sbEJ1eSIsIlVzZXJCdXlVbkNvbGwiLCJVc2VyQ29sbEdvb2RzIiwiVXNlckdvb2RzVW5Db2xsIiwiVXNlclBheVZlcmlmeSIsIlVzZXJQYXlBY2NvdW50IiwiVXNlckNhc2hBY2NvdW50IiwiVXNlckZvcm1BcHByb3ZlIiwiVXNlckJ1eUxpc3QiLCJVc2VyU2VsbExpc3QiLCJVc2VyT3JkZXIiLCJVc2VyQnV5QXBwcmFpc2UiLCJVc2VyT3JkZXJTZW5kIiwibWFpbkNvdW50IiwiZ3Vlc3RDb21tZW50IiwicG9wQWRzIiwiZ29vZHNDb3VudCIsInRvdGFsT3JkZXIiLCJ0aWFvemh1YW4iLCJ3aGl0ZUJhcnMiLCJ3aGl0ZVN0cmlwcyIsImJhaXRpYW9BcHBseSIsImdldFBheVJhdGVOdW0iLCJjcmVhdGVPcmRlciIsImdldElucXVpcnlEZXRhaWwiLCJnZXRJbnF1aXJ5TGlzdCIsImdldEFuYWx5c2lzTHN0IiwiaW5wdXRSZXN1bHQiLCJnZXRTYW1wbGVEZXRhaWwiLCJzZXREZXBvc2l0IiwiYWRkWEpBbmFseXNpcyIsImFkZFpZQW5hbHlzaXMiLCJwdXNoU2VsbERlcHV0eSIsInJlbWluZGVyT2ZmZXIiLCJnZXRNYXRjaGluZ0xpc3QiLCJzZXRTZWFyY2hSZXN1bCIsInNldE9mZmVyIiwic2V0V2hldGhlck1hcmNoaW5nIiwiZ2V0TWF0Y2hpbmdEZXRhaWwiLCJnZXROZXdTZWFyY2giLCJnZXRzZWFyY2hSZXN1bHQiLCJtYW55U2VhcmNoIiwidmlld0hpc3RvcnlRdXRvZSIsImdldERlcHV0eUFkbWluTGlzdCIsImdldEFyZWFMaXN0Iiwic2V0TWFuYWdlciIsImdldE1hbmFnZXJMaXN0IiwiZ2V0RGVwdXR5RGV0YWlscyIsImZyZWV6ZURlcHV0eSIsImFsbG9jYXRpb25EZXB1dHkiLCJnZXRBbGxvY2F0aW9uQ2xpZW50TGlzdCIsImdldEFsbG9jYXRpb25EZXB1dHlMaXN0IiwidHJhbnNmZXJNYW5hZ2VyIiwiZGVsZXRlRGVwdXR5QWxsb2NhdGlvbiIsImdldEFkbWluQ3VzdG9tZXJMaXN0IiwiYWxsb2NhdGlvbkN1c3RvbWVyIiwiZGVsZXRlQWxsb3RDdXN0b21lciIsImRlbGVDdXN0b21lcnMiLCJzZXRDdXN0b21lckZvck1hbmFnZXIiLCJnZXRSb3V0aW5lTGlzdCIsInNldFF1b3RlZm9yQ2d4aiIsInNldFF1b3RlZm9yUHBiaiIsImdldFBwRGV0YWlsIiwicHVzaFNlbGxlciIsImdldE9mZmVyTGlzdCIsImdldEFsbExpc3QiLCJjbG9zZUlucXVpcnlTaGVldCIsImdlbmVyYXRlUXJDb2RlIiwiZ2V0TmV3c051bSIsImdldE5ld3NMaXN0Iiwic2V0SGF2ZVJlYWQiLCJnZXROZXdOdW1iZXIiLCJkZWxldGVTYW1wbGUiLCJyZXF1ZXN0UXVvYXRpb24iLCJzZXRRdW90ZUZvclp5eGoiLCJwdXNoVG9CdXllciIsImdldHp5QW5hbHlzaXNMaXN0IiwiZ2V0eGpBbmFseXNpc0xpc3QiLCJnZXRUcmFuc2ZlckN1c3RvbWVyc0xpc3QiLCJnZXRSZWNvcmRMaXN0IiwiZ2V0Q3VzdG9tZXJMaXN0IiwiZ2V0QXNzb2NpYXRlZEN1c3RvbWVycyIsImdldEJvdW5kQXNzb2NpYXRlZEN1c3RvbWVycyIsImFkZFJlY29yZCIsImdldFJlY29yZE9uZSIsImdldFJlY29yZCIsImFkZEN1c3RvbWVyIiwiZ2V0Q3VzdG9tZXJJbmZvIiwic2V0SWRlbnRpdHkiLCJzZXRPcGkiLCJzZXRNYW5hZ2VtZW50IiwiZ2V0VmVyaWZpY2F0aW9uQ29kZSIsInVzZXJSZWdpc3RyYXRpb24iLCJnZXRDdXN0b21lcklucXVpcnlMaXN0IiwiZ2V0UHJvZHVjdERldGFpbCIsImFkZFByb2R1Y3QiLCJhbGxNb2RpdHlUeXBlU2VyaWVzIiwidXBkYXRlUHJvZHVjdCIsImdldFJlbmV3TGlzdCIsInVwZGF0ZVN0YXR1cyIsImdldEJvbmRIYW5kbGVMaXN0IiwiYWRkQm9uZEhhbmRsZSIsImdldEJvbmRBZGRMaXN0IiwiZ2V0Qm9uZEFkbWluIiwic2V0SGFuZGxlU3RhdHVzIiwic2V0Qm9uZFN0YXR1cyIsImNvcnBvcmF0ZUJhc2VJbmZvIiwiYWRkQ29udGFjdHMiLCJkZWxlQmFzZUluZm8iLCJnZXRDb21wYW55TGlzdCIsImNvbnRyb2xsU2hvdyIsImdldFF1b3RlRGV0YWlsIiwiZGVsZXRlQ29tcGFueSIsImdldENvbnRhY3RzTGlzdCIsImRlbGV0ZUZvbGxvdyIsInB1c2hBbGxEZXB1dHkiLCJnZXRNeUxpc3QiLCJkaXJlY3RRdW90YXRpb24iXSwibWFwcGluZ3MiOiJDQUFBOztBQUVBO0FBQ0EsSUFBTUEsU0FBUyxHQUFHLHVCQUFsQjs7QUFFQSxJQUFNQyxhQUFhLEdBQUdELFNBQVMsR0FBRyxPQUFsQztBQUNBLElBQU1FLFlBQVksR0FBR0YsU0FBUyxHQUFHLE1BQWpDO0FBQ0EsSUFBTUcsU0FBUyxHQUFHSCxTQUFTLEdBQUcsVUFBOUI7QUFDQSxJQUFNSSxPQUFPLEdBQUcsUUFBaEIsQyxDQUEwQjs7QUFFMUJDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmRixTQUFPLEVBQUVBLE9BRE07QUFFZkgsZUFBYSxFQUFiQSxhQUZlO0FBR2ZDLGNBQVksRUFBWkEsWUFIZTtBQUlmQyxXQUFTLEVBQVRBLFNBSmU7QUFLZjs7QUFFQUksV0FBUyxFQUFFSixTQUFTLEdBQUcsUUFQUixFQU9rQjtBQUNqQ0ssZUFBYSxFQUFFTCxTQUFTLEdBQUcsWUFSWixFQVEwQjtBQUN6Q00sU0FBTyxFQUFFTixTQUFTLEdBQUcsTUFUTixFQVNjO0FBQzdCTyxVQUFRLEVBQUVQLFNBQVMsR0FBRyxPQVZQLEVBVWdCO0FBQy9CUSxXQUFTLEVBQUVSLFNBQVMsR0FBRyxRQVhSLEVBV2tCO0FBQ2pDUyxrQkFBZ0IsRUFBRVQsU0FBUyxHQUFHLGVBWmYsRUFZZ0M7QUFDL0NVLGdCQUFjLEVBQUVWLFNBQVMsR0FBRyxhQWJiLEVBYTRCO0FBQzNDVyxtQkFBaUIsRUFBRVgsU0FBUyxHQUFHLGdCQWRoQixFQWNrQztBQUNqRFksa0JBQWdCLEVBQUVaLFNBQVMsR0FBRyxlQWZmLEVBZWdDO0FBQy9DYSxxQkFBbUIsRUFBRWIsU0FBUyxHQUFHLGtCQWhCbEIsRUFnQnNDO0FBQ3JEYyxlQUFhLEVBQUVkLFNBQVMsR0FBRyxZQWpCWixFQWlCMEI7QUFDekNlLFlBQVUsRUFBRWYsU0FBUyxHQUFHLFNBbEJULEVBa0JvQjtBQUNuQ2dCLFNBQU8sRUFBRWhCLFNBQVMsR0FBRyxNQW5CTixFQW1CYztBQUM3QmlCLFdBQVMsRUFBRWpCLFNBQVMsR0FBRyxRQXBCUixFQW9Ca0I7QUFDakNrQixvQkFBa0IsRUFBRWxCLFNBQVMsR0FBRyxpQkFyQmpCLEVBcUJvQztBQUNuRG1CLGFBQVcsRUFBRW5CLFNBQVMsR0FBRyxVQXRCVixFQXNCc0I7QUFDckNvQixjQUFZLEVBQUVwQixTQUFTLEdBQUcsV0F2QlgsRUF1QndCO0FBQ3ZDcUIscUJBQW1CLEVBQUVyQixTQUFTLEdBQUcsa0JBeEJsQixFQXdCc0M7QUFDckRzQix5QkFBdUIsRUFBR3RCLFNBQVMsR0FBRyxzQkF6QnZCLEVBeUIrQztBQUM5RHVCLHNCQUFvQixFQUFFdkIsU0FBUyxHQUFHLG1CQTFCbkIsRUEwQndDO0FBQ3ZEd0IsbUJBQWlCLEVBQUV4QixTQUFTLEdBQUcsZ0JBM0JoQixFQTJCa0M7QUFDakR5Qix1QkFBcUIsRUFBRXpCLFNBQVMsR0FBRyxvQkE1QnBCLEVBNEIwQzs7O0FBR3pEO0FBQ0EwQixvQkFBa0IsRUFBRTdCLFNBQVMsR0FBRyxxQkFoQ2pCLEVBZ0N3Qzs7Ozs7QUFLdkQ7QUFDQThCLGFBQVcsRUFBRTdCLGFBQWEsR0FBRyxnQkF0Q2QsRUFzQ2dDO0FBQy9DOEIsU0FBTyxFQUFFOUIsYUFBYSxHQUFHLGdCQXZDVixFQXVDNEI7QUFDM0MrQixXQUFTLEVBQUUvQixhQUFhLEdBQUcsdUJBeENaLEVBd0NxQztBQUNwRGdDLGNBQVksRUFBRWhDLGFBQWEsR0FBRyw0QkF6Q2YsRUF5QzZDO0FBQzVEaUMsV0FBUyxFQUFFakMsYUFBYSxHQUFHLGtCQTFDWixFQTBDZ0M7QUFDL0NrQyxZQUFVLEVBQUVqQyxZQUFZLEdBQUcsY0EzQ1osRUEyQzRCOztBQUUzQ2tDLG1CQUFpQixFQUFFbEMsWUFBWSxHQUFHLFlBN0NuQixFQTZDaUM7QUFDaERtQyxnQkFBYyxFQUFFbkMsWUFBWSxHQUFHLGNBOUNoQixFQThDZ0M7QUFDL0M7QUFDQW9DLFFBQU0sRUFBRXBDLFlBQVksR0FBRyxRQWhEUixFQWdEa0I7QUFDakNxQyxjQUFZLEVBQUVyQyxZQUFZLEdBQUcsY0FqRGQsRUFpRDhCO0FBQzdDc0MsZ0JBQWMsRUFBRXRDLFlBQVksR0FBRyxpQkFsRGhCLEVBa0RtQztBQUNsRHVDLGNBQVksRUFBRXZDLFlBQVksR0FBRyxlQW5EZCxFQW1EK0I7OztBQUc5Q3dDLGFBQVcsRUFBRXhDLFlBQVksR0FBRyxZQXREYixFQXNEMkI7QUFDMUN5QyxXQUFTLEVBQUV6QyxZQUFZLEdBQUcsOEJBdkRYLEVBdUQyQztBQUMxRDBDLFlBQVUsRUFBRTFDLFlBQVksR0FBRyxnQkF4RFosRUF3RDhCO0FBQzdDMkMsWUFBVSxFQUFFM0MsWUFBWSxHQUFHLDRDQXpEWixFQXlEMEQ7QUFDekU0QyxnQkFBYyxFQUFFNUMsWUFBWSxHQUFHLHVCQTFEaEIsRUEwRHlDO0FBQ3hENkMsU0FBTyxFQUFFN0MsWUFBWSxHQUFHLGlCQTNEVCxFQTJENEI7O0FBRTNDO0FBQ0E4QyxXQUFTLEVBQUU5QyxZQUFZLEdBQUcsaUJBOURYLEVBOEQ4QjtBQUM3QytDLFVBQVEsRUFBRS9DLFlBQVksR0FBRyxnQkEvRFYsRUErRDRCO0FBQzNDZ0QsVUFBUSxFQUFFaEQsWUFBWSxHQUFHLGtDQWhFVixFQWdFOEM7QUFDN0RpRCxTQUFPLEVBQUVqRCxZQUFZLEdBQUcsWUFqRVQsRUFpRXVCO0FBQ3RDa0QsU0FBTyxFQUFFbEQsWUFBWSxHQUFHLE1BbEVULEVBa0VpQjs7QUFFaEM7QUFDQW1ELFdBQVMsRUFBRW5ELFlBQVksR0FBRyxZQXJFWCxFQXFFeUI7QUFDeENvRCxVQUFRLEVBQUVwRCxZQUFZLEdBQUcsbUJBdEVWLEVBc0UrQjtBQUM5Q3FELFNBQU8sRUFBRXJELFlBQVksR0FBRyxlQXZFVCxFQXVFMEI7O0FBRXpDO0FBQ0FzRCxXQUFTLEVBQUV0RCxZQUFZLEdBQUcsY0ExRVgsRUEwRTJCO0FBQzFDdUQsWUFBVSxFQUFFdkQsWUFBWSxHQUFHLG9CQTNFWixFQTJFa0M7O0FBRWpEO0FBQ0F3RCxVQUFRLEVBQUV4RCxZQUFZLEdBQUcsNkJBOUVWLEVBOEV5QztBQUN4RHlELGFBQVcsRUFBRXpELFlBQVksR0FBRyxZQS9FYixFQStFMkI7QUFDMUMwRCxhQUFXLEVBQUUxRCxZQUFZLEdBQUcsbUJBaEZiLEVBZ0ZrQztBQUNqRDJELGVBQWEsRUFBRTNELFlBQVksR0FBRyxtQkFqRmYsRUFpRm9DO0FBQ25ENEQsY0FBWSxFQUFFNUQsWUFBWSxHQUFHLGtCQWxGZCxFQWtGa0M7O0FBRWpEO0FBQ0E2RCxjQUFZLEVBQUU3RCxZQUFZLEdBQUcseUJBckZkLEVBcUZ5QztBQUN4RDhELGNBQVksRUFBRTlELFlBQVksR0FBRyxnQkF0RmQsRUFzRmdDOztBQUUvQztBQUNBK0QsV0FBUyxFQUFFL0QsWUFBWSxHQUFHLFVBekZYLEVBeUZ1QjtBQUN0Q2dFLGNBQVksRUFBRWhFLFlBQVksR0FBRyxtQkExRmQsRUEwRm1DO0FBQ2xEaUUsWUFBVSxFQUFFakUsWUFBWSxHQUFHLGlCQTNGWixFQTJGK0I7QUFDOUNrRSxhQUFXLEVBQUVsRSxZQUFZLEdBQUcsa0JBNUZiLEVBNEZpQzs7QUFFaEQ7QUFDQW1FLFdBQVMsRUFBRW5FLFlBQVksR0FBRyxtQkEvRlgsRUErRmdDO0FBQy9Db0UsY0FBWSxFQUFFcEUsWUFBWSxHQUFHLDBCQWhHZCxFQWdHMEM7QUFDekRxRSxnQkFBYyxFQUFFckUsWUFBWSxHQUFHLG9CQWpHaEIsRUFpR3NDOztBQUVyRDtBQUNBc0UsVUFBUSxFQUFFdEUsWUFBWSxHQUFHLDBCQXBHVixFQW9Hc0M7QUFDckR1RSxhQUFXLEVBQUV2RSxZQUFZLEdBQUcsMkJBckdiLEVBcUcwQzs7QUFFekQ7QUFDQXdFLGFBQVcsRUFBRXhFLFlBQVksR0FBRyxxQkF4R2IsRUF3R29DO0FBQ25EeUUsZUFBYSxFQUFFekUsWUFBWSxHQUFHLHNCQXpHZixFQXlHdUM7QUFDdEQwRSxlQUFhLEVBQUUxRSxZQUFZLEdBQUcsb0NBMUdmLEVBMEdxRDtBQUNwRTJFLGlCQUFlLEVBQUUzRSxZQUFZLEdBQUcsd0JBM0dqQixFQTJHMkM7O0FBRTFEO0FBQ0E0RSxlQUFhLEVBQUU1RSxZQUFZLEdBQUcsc0JBOUdmLEVBOEd1QztBQUN0RDZFLGdCQUFjLEVBQUU3RSxZQUFZLEdBQUcsaUJBL0doQixFQStHbUM7QUFDbEQ4RSxpQkFBZSxFQUFFOUUsWUFBWSxHQUFHLGtCQWhIakIsRUFnSHFDOztBQUVwRDtBQUNBK0UsaUJBQWUsRUFBRS9FLFlBQVksR0FBRyxZQW5IakIsRUFtSCtCOztBQUU5QztBQUNBZ0YsYUFBVyxFQUFFaEYsWUFBWSxHQUFHLGtCQXRIYixFQXNIaUM7QUFDaERpRixjQUFZLEVBQUVqRixZQUFZLEdBQUcsbUJBdkhkLEVBdUhtQztBQUNsRGtGLFdBQVMsRUFBRWxGLFlBQVksR0FBRyxVQXhIWCxFQXdIdUI7QUFDdENtRixpQkFBZSxFQUFFbkYsWUFBWSxHQUFHLFdBekhqQixFQXlIOEI7QUFDN0NvRixlQUFhLEVBQUVyRixhQUFhLEdBQUcsa0JBMUhoQixFQTBIb0M7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBc0YsV0FBUyxFQUFFckYsWUFBWSxHQUFHLG9DQS9IWDtBQWdJZjtBQUNBc0YsY0FBWSxFQUFFdEYsWUFBWSxHQUFHLGNBaklkO0FBa0lmO0FBQ0F1RixRQUFNLEVBQUV2RixZQUFZLEdBQUcsc0JBbklSOztBQXFJZjtBQUNBd0YsWUFBVSxFQUFFeEYsWUFBWSxHQUFHLCtCQXRJWjs7QUF3SWY7QUFDQXlGLFlBQVUsRUFBRXpGLFlBQVksR0FBRyxvQkF6SVo7O0FBMklmOztBQUVBMEYsV0FBUyxFQUFFMUYsWUFBWSxHQUFHLGdCQTdJWDs7QUErSWY7QUFDQTJGLFdBQVMsRUFBRTNGLFlBQVksR0FBRyx1QkFoSlgsRUFnSm9DOzs7QUFHbkQ7QUFDQTRGLGFBQVcsRUFBRTVGLFlBQVksR0FBRywwQkFwSmIsRUFvSnlDOztBQUV4RDZGLGNBQVksRUFBRTdGLFlBQVksR0FBRyxtQkF0SmQsRUFzSm1DOzs7QUFHbEQ7QUFDQThGLGVBQWEsRUFBRS9GLGFBQWEsR0FBRywyQkExSmhCLEVBMEo2Qzs7QUFFNUQ7QUFDQTtBQUNBZ0csYUFBVyxFQUFFL0YsWUFBWSxHQUFHLGNBOUpiLEVBOEo2Qjs7QUFFNUM7QUFDQWdHLGtCQUFnQixFQUFFaEcsWUFBWSxHQUFHLGNBaktsQixFQWlLa0M7O0FBRWpEO0FBQ0FpRyxnQkFBYyxFQUFFakcsWUFBWSxHQUFHLHNCQXBLaEI7QUFxS2Y7QUFDQWtHLGdCQUFjLEVBQUVsRyxZQUFZLEdBQUcsOEJBdEtoQjtBQXVLZjtBQUNBbUcsYUFBVyxFQUFFbkcsWUFBWSxHQUFHLHlCQXhLYjtBQXlLaEI7QUFDQW9HLGlCQUFlLEVBQUVwRyxZQUFZLEdBQUcscUNBMUtoQjtBQTJLZjtBQUNBcUcsWUFBVSxFQUFFckcsWUFBWSxHQUFHLGtCQTVLWjtBQTZLZjtBQUNBc0csZUFBYSxFQUFFdEcsWUFBWSxHQUFHLHNCQTlLZjtBQStLZjtBQUNBdUcsZUFBYSxFQUFFdkcsWUFBWSxHQUFHLGlDQWhMZjtBQWlMZjtBQUNBd0csZ0JBQWMsRUFBRXhHLFlBQVksR0FBRywyQkFsTGhCO0FBbUxoQjtBQUNBeUcsZUFBYSxFQUFFekcsWUFBWSxHQUFHLHdCQXBMZDtBQXFMZjtBQUNBMEcsaUJBQWUsRUFBRTFHLFlBQVksR0FBRyw2QkF0TGpCO0FBdUxmO0FBQ0EyRyxnQkFBYyxFQUFFM0csWUFBWSxHQUFHLDBDQXhMaEI7QUF5TGY7QUFDQTRHLFVBQVEsRUFBRTVHLFlBQVksR0FBRyw0QkExTFY7QUEyTGY7QUFDQTZHLG9CQUFrQixFQUFFN0csWUFBWSxHQUFHLGdDQTVMcEI7QUE2TGY7QUFDQThHLG1CQUFpQixFQUFFOUcsWUFBWSxHQUFHLGtCQTlMbkI7QUErTGY7QUFDQStHLGNBQVksRUFBRS9HLFlBQVksR0FBRyx1QkFoTWQ7QUFpTWY7QUFDQWdILGlCQUFlLEVBQUVoSCxZQUFZLEdBQUcsWUFsTWpCO0FBbU1mO0FBQ0FpSCxZQUFVLEVBQUVqSCxZQUFZLEdBQUcseUJBcE1aO0FBcU1mO0FBQ0FrSCxrQkFBZ0IsRUFBRWxILFlBQVksR0FBRyx5QkF0TWxCO0FBdU1mO0FBQ0FtSCxvQkFBa0IsRUFBRW5ILFlBQVksR0FBRyw4QkF4TXBCO0FBeU1mO0FBQ0FvSCxhQUFXLEVBQUVwSCxZQUFZLEdBQUcsbUNBMU1iO0FBMk1mO0FBQ0FxSCxZQUFVLEVBQUVySCxZQUFZLEdBQUcsa0NBNU1aO0FBNk1mO0FBQ0FzSCxnQkFBYyxFQUFFdEgsWUFBWSxHQUFHLHNDQTlNaEI7QUErTWY7QUFDRHVILGtCQUFnQixFQUFFdkgsWUFBWSxHQUFHLGlDQWhOakI7QUFpTmY7QUFDRHdILGNBQVksRUFBRXhILFlBQVksR0FBRyxvQ0FsTmI7QUFtTmY7QUFDRHlILGtCQUFnQixFQUFFekgsWUFBWSxHQUFHLGlDQXBOakI7QUFxTmhCO0FBQ0EwSCx5QkFBdUIsRUFBRTFILFlBQVksR0FBRyw2Q0F0TnhCO0FBdU5mO0FBQ0QySCx5QkFBdUIsRUFBRTNILFlBQVksR0FBRywyQ0F4TnhCO0FBeU5oQjtBQUNBNEgsaUJBQWUsRUFBRTVILFlBQVksR0FBRyx1Q0ExTmhCO0FBMk5oQjtBQUNBNkgsd0JBQXNCLEVBQUU3SCxZQUFZLEdBQUcsc0NBNU52QjtBQTZOaEI7QUFDQThILHNCQUFvQixFQUFFOUgsWUFBWSxHQUFHLG9DQTlOckI7QUErTmhCO0FBQ0ErSCxvQkFBa0IsRUFBRS9ILFlBQVksR0FBRyw4Q0FoT25CO0FBaU9oQjtBQUNBZ0kscUJBQW1CLEVBQUVoSSxZQUFZLEdBQUcsd0NBbE9wQjtBQW1PaEI7QUFDQWlJLGVBQWEsRUFBRWpJLFlBQVksR0FBRyxxQ0FwT2Q7QUFxT2hCO0FBQ0FrSSx1QkFBcUIsRUFBRWxJLFlBQVksR0FBRyw2Q0F0T3RCO0FBdU9oQjtBQUNBbUksZ0JBQWMsRUFBRW5JLFlBQVksR0FBRyxnQ0F4T2Y7QUF5T2hCO0FBQ0FvSSxpQkFBZSxFQUFFcEksWUFBWSxHQUFHLGtDQTFPaEI7QUEyT2hCO0FBQ0FxSSxpQkFBZSxFQUFFckksWUFBWSxHQUFHLDJCQTVPaEI7QUE2T2hCO0FBQ0FzSSxhQUFXLEVBQUV0SSxZQUFZLEdBQUcsOEJBOU9aO0FBK09oQjtBQUNBdUksWUFBVSxFQUFFdkksWUFBWSxHQUFHLDZCQWhQWDtBQWlQaEI7QUFDQXdJLGNBQVksRUFBRXhJLFlBQVksR0FBRyxzQkFsUGI7QUFtUGhCO0FBQ0F5SSxZQUFVLEVBQUV6SSxZQUFZLEdBQUcsMEJBcFBYO0FBcVBoQjtBQUNBMEksbUJBQWlCLEVBQUUxSSxZQUFZLEdBQUcsMkJBdFBsQjtBQXVQaEI7QUFDQTJJLGdCQUFjLEVBQUU1SSxhQUFhLEdBQUcsaUJBeFBoQjtBQXlQaEI7QUFDQTZJLFlBQVUsRUFBRTVJLFlBQVksR0FBRyx3QkExUFg7QUEyUGhCO0FBQ0E2SSxhQUFXLEVBQUU3SSxZQUFZLEdBQUcscUJBNVBaO0FBNlBoQjtBQUNBOEksYUFBVyxFQUFFOUksWUFBWSxHQUFHLHNCQTlQWjtBQStQaEI7QUFDQStJLGNBQVksRUFBRS9JLFlBQVksR0FBRywwQkFoUWI7QUFpUWhCO0FBQ0FnSixjQUFZLEVBQUVoSixZQUFZLEdBQUcsZ0NBbFFiO0FBbVFoQjtBQUNBaUosaUJBQWUsRUFBRWpKLFlBQVksR0FBRyxxQ0FwUWhCO0FBcVFoQjtBQUNBa0osaUJBQWUsRUFBRWxKLFlBQVksR0FBRyxtQ0F0UWhCO0FBdVFoQjtBQUNBbUosYUFBVyxFQUFFbkosWUFBWSxHQUFHLCtCQXhRWjtBQXlRaEI7QUFDQW9KLG1CQUFpQixFQUFFcEosWUFBWSxHQUFHLG1DQTFRbEI7QUEyUWhCO0FBQ0FxSixtQkFBaUIsRUFBRXJKLFlBQVksR0FBRyxtQ0E1UWxCO0FBNlFoQjtBQUNBc0osMEJBQXdCLEVBQUV0SixZQUFZLEdBQUcsNkNBOVF6Qjs7QUFnUmY7O0FBRUE7QUFDQXVKLGVBQWEsRUFBRXZKLFlBQVksR0FBRyw0QkFuUmYsRUFtUjZDO0FBQzVEO0FBQ0F3SixpQkFBZSxFQUFFeEosWUFBWSxHQUFHLGdDQXJSakIsRUFxUm1EO0FBQ2xFO0FBQ0F5Six3QkFBc0IsRUFBRXpKLFlBQVksR0FBRywwQkF2UnhCLEVBdVJvRDtBQUNwRTtBQUNBMEosNkJBQTJCLEVBQUUxSixZQUFZLEdBQUcsc0JBelI1QjtBQTBSZjtBQUNBMkosV0FBUyxFQUFFM0osWUFBWSxHQUFHLHVCQTNSWCxFQTJSb0M7QUFDbkQ7QUFDQTRKLGNBQVksRUFBRTVKLFlBQVksR0FBRyw4QkE3UmQsRUE2UjhDO0FBQzdEO0FBQ0E2SixXQUFTLEVBQUU3SixZQUFZLEdBQUcsOEJBL1JYLEVBK1IyQztBQUMxRDtBQUNBOEosYUFBVyxFQUFFOUosWUFBWSxHQUFHLG1CQWpTYixFQWlTa0M7QUFDakQ7QUFDQStKLGlCQUFlLEVBQUUvSixZQUFZLEdBQUcsb0JBblNqQixFQW1TdUM7QUFDdEQ7QUFDQWdLLGFBQVcsRUFBRWhLLFlBQVksR0FBRyxrQ0FyU2IsRUFxU2lEO0FBQ2hFO0FBQ0FpSyxRQUFNLEVBQUVqSyxZQUFZLEdBQUcsc0JBdlNSLEVBdVNnQztBQUMvQztBQUNBa0ssZUFBYSxFQUFFbEssWUFBWSxHQUFHLDBCQXpTZixFQXlTMkM7QUFDMUQ7QUFDQW1LLHFCQUFtQixFQUFFbkssWUFBWSxHQUFHLHdDQTNTckIsRUEyUytEO0FBQzlFO0FBQ0FvSyxrQkFBZ0IsRUFBRXBLLFlBQVksR0FBRyxnQkE3U2xCLEVBNlNvQztBQUNuRDtBQUNEcUssd0JBQXNCLEVBQUVySyxZQUFZLEdBQUcsK0JBL1N2QjtBQWdUaEI7QUFDQXNLLGtCQUFnQixFQUFFdEssWUFBWSxHQUFHLDhCQWpUakI7QUFrVGhCO0FBQ0F1SyxZQUFVLEVBQUV2SyxZQUFZLEdBQUcsa0JBblRYO0FBb1RoQjtBQUNBd0sscUJBQW1CLEVBQUV4SyxZQUFZLEdBQUcsNEJBclRwQjtBQXNUaEI7QUFDQXlLLGVBQWEsRUFBRXpLLFlBQVksR0FBRyxnQ0F2VGQ7QUF3VGhCO0FBQ0EwSyxjQUFZLEVBQUUxSyxZQUFZLEdBQUcsNEJBelRiO0FBMFRoQjtBQUNBMkssY0FBWSxFQUFFM0ssWUFBWSxHQUFHLCtCQTNUYjtBQTRUaEI7QUFDQTRLLG1CQUFpQixFQUFFNUssWUFBWSxHQUFHLDhCQTdUbEI7QUE4VGhCO0FBQ0E2SyxlQUFhLEVBQUU3SyxZQUFZLEdBQUcsc0JBL1RkO0FBZ1VoQjtBQUNBOEssZ0JBQWMsRUFBRTlLLFlBQVksR0FBRywwQkFqVWY7QUFrVWhCO0FBQ0ErSyxjQUFZLEVBQUUvSyxZQUFZLEdBQUcsa0NBblViO0FBb1VoQjtBQUNBZ0wsaUJBQWUsRUFBRWhMLFlBQVksR0FBRyxtQ0FyVWhCO0FBc1VoQjtBQUNBaUwsZUFBYSxFQUFFakwsWUFBWSxHQUFHLCtCQXZVZDtBQXdVaEI7QUFDQWtMLG1CQUFpQixFQUFFbEwsWUFBWSxHQUFHLG1CQXpVbEI7QUEwVWhCO0FBQ0FtTCxhQUFXLEVBQUVuTCxZQUFZLEdBQUcsbUJBM1VaO0FBNFVoQjtBQUNBb0wsY0FBWSxFQUFFcEwsWUFBWSxHQUFHLHVCQTdVYjtBQThVaEI7QUFDQXFMLGdCQUFjLEVBQUVyTCxZQUFZLEdBQUcsd0JBL1VmO0FBZ1ZoQjtBQUNBc0wsY0FBWSxFQUFFdkwsYUFBYSxHQUFFLDJCQWpWYjtBQWtWaEI7QUFDQXdMLGdCQUFjLEVBQUV2TCxZQUFZLEdBQUcsbUJBblZmO0FBb1ZoQjtBQUNBd0wsZUFBYSxFQUFFeEwsWUFBWSxHQUFHLHdCQXJWZDtBQXNWaEI7QUFDQXlMLGlCQUFlLEVBQUV6TCxZQUFZLEdBQUUsNEJBdlZmO0FBd1ZoQjtBQUNBMEwsY0FBWSxFQUFFMUwsWUFBWSxHQUFHLDJCQXpWYjtBQTBWaEI7QUFDQTJMLGVBQWEsRUFBRTNMLFlBQVksR0FBRyxzQ0EzVmQ7QUE0VmY7QUFDQTRMLFdBQVMsRUFBRTVMLFlBQVksR0FBRyw0QkE3Vlg7QUE4VmY7QUFDQTZMLGlCQUFlLEVBQUU3TCxZQUFZLEdBQUcsOEJBL1ZqQixFQUFqQiIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICBjb25zdCBTZXJ2ZXJVcmwgPSBcImh0dHBzOi8vd3d3LjE0NGYuY29tXCI7IC8vIOeUn+S6p+eOr+Wig1xuXG4vL2NvbnN0IFNlcnZlclVybCA9IFwiaHR0cHM6Ly93d3cucWluZ2ZhbmdjaGUubmV0XCI7IC8vIOW8gOWPkeeOr+Wig1xuY29uc3QgU2VydmVyVXJsID0gXCJodHRwOi8vMTkyLjE2OC4xMS4xNDFcIjsgXG5cbmNvbnN0IE5ld0FwaVJvb3RVcmwgPSBTZXJ2ZXJVcmwgKyAnL2FwaS8nO1xuY29uc3QgV1hBcGlSb290VXJsID0gU2VydmVyVXJsICsgJy93eC8nO1xuY29uc3QgQ2hvb3NlVXJsID0gU2VydmVyVXJsICsgJy9jaG9vc2UvJztcbmNvbnN0IFZFUlNJT04gPSAnMy4zLjcyJzsgLy8g5bCP56iL5bqP54mI5pysXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBWRVJTSU9OOiBWRVJTSU9OLFxuICBOZXdBcGlSb290VXJsLFxuICBXWEFwaVJvb3RVcmwsXG4gIENob29zZVVybCxcbiAgLy/kuIvmi4npgInmi6lcblxuICBnZXRSZWdpb246IENob29zZVVybCArIFwicmVnaW9uXCIsIC8v5Yy65Z+fXG4gIGdldGNvb3JkaW5hdGU6IENob29zZVVybCArIFwiY29vcmRpbmF0ZVwiLCAvL+mFjeWQiOW6plxuICBnZXRUeXBlOiBDaG9vc2VVcmwgKyBcInR5cGVcIiwgLy/lrqLmiLfnsbvlnotcbiAgZ2V0U2NhbGU6IENob29zZVVybCArIFwic2NhbGVcIiwgLy/lrqLmiLfop4TmqKFcbiAgZ2V0U291cmNlOiBDaG9vc2VVcmwgKyBcInNvdXJjZVwiLCAvL+WuouaIt+adpea6kFxuICBnZXRCdXNpbmVzc01vZGVsOiBDaG9vc2VVcmwgKyBcImJ1c2luZXNzTW9kZWxcIiwgLy/lhazlj7jnu4/okKXmqKHlvI9cbiAgZ2V0TWFpblByb2R1Y3Q6IENob29zZVVybCArIFwibWFpblByb2R1Y3RcIiwgLy/kuLvokKXkuqflk4FcbiAgZ2V0T3BlcmF0ZUNhcGl0YWw6IENob29zZVVybCArIFwib3BlcmF0ZUNhcGl0YWxcIiwgLy/otYTph5HnirblhrVcbiAgZ2V0T3BlcmF0ZUNyZWRpdDogQ2hvb3NlVXJsICsgXCJvcGVyYXRlQ3JlZGl0XCIsIC8v5L+h55So54q25Ya1XG4gIGdldE9wZXJhdGVPcGVyYXRpb246IENob29zZVVybCArIFwib3BlcmF0ZU9wZXJhdGlvblwiLCAvL+i/kOiQpeeKtuWGtVxuICBnZXRPcGVyYXRlV29tOiBDaG9vc2VVcmwgKyBcIm9wZXJhdGVXb21cIiwgLy/lj6PnopFcbiAgZ2V0UXVhbGl0eTogQ2hvb3NlVXJsICsgXCJxdWFsaXR5XCIsIC8v5ZOB6LSo5a6a5L2NXG4gIGdldFBvc3Q6IENob29zZVVybCArIFwicG9zdFwiLCAvL+inkuiJslxuICBnZXRDaGFubmU6IENob29zZVVybCArIFwiY2hhbm5lXCIsIC8v5rig6YGTXG4gIGdldENvc3RQZXJmb3JtYW5jZTogQ2hvb3NlVXJsICsgXCJjb3N0UGVyZm9ybWFuY2VcIiwgLy/mgKfku7fmr5RcbiAgZ2V0SWRlbnRpdHk6IENob29zZVVybCArIFwiaWRlbnRpdHlcIiwgLy/ouqvku71cbiAgZ2V0UG90ZW50aWFsOiBDaG9vc2VVcmwgKyBcInBvdGVudGlhbFwiLCAvL+WPkeWxlea9nOWKm1xuICBnZXRQcmljZVNlbnNpdGl2aXR5OiBDaG9vc2VVcmwgKyBcInByaWNlU2Vuc2l0aXZpdHlcIiwgLy/nlKjmiLfku7fmoLzmlY/mhJ/luqZcbiAgZ2V0Q29vcGVyYXRpb25JbnRlbnRpb24gOiBDaG9vc2VVcmwgKyBcImNvb3BlcmF0aW9uSW50ZW50aW9uXCIsIC8v5ZCI5L2c5oSP5ZCRXG4gIGdldENoYXJhY3RlckZlYXR1cmVzOiBDaG9vc2VVcmwgKyBcImNoYXJhY3RlckZlYXR1cmVzXCIsIC8v5oCn5qC854m554K5XG4gIGdldE1hbmFnZUZlYXR1cmVzOiBDaG9vc2VVcmwgKyBcIm1hbmFnZUZlYXR1cmVzXCIsIC8v57uP6JCl6ICF54m55b6BXG4gIGdldE1hbmFnZW1lbnRQb3NpdGlvbjogQ2hvb3NlVXJsICsgXCJtYW5hZ2VtZW50UG9zaXRpb25cIiwgLy/nu4/okKXlrprkvY1cbiAgXG4gIFxuICAvL1xuICBzZWxsQ3VzbXRlckNyZWF0ZWQ6IFNlcnZlclVybCArIFwiL2NtL3NlbGxBZGRDdXN0b21lclwiLCAvL+WNluW4ruWKnuWIm+W7uuWuouaIt1xuICBcbiAgXG4gIFxuICBcbiAgLy8g5Zu+54mH5aSE55CGXG4gIHBpY0lkZW50aWZ5OiBOZXdBcGlSb290VXJsICsgXCJjb21tb24vcGljdHVyZVwiLCAvLyDlm77niYfor4bliKtcbiAgU2hvd1BpYzogTmV3QXBpUm9vdFVybCArICdjb21tb24vcGljdHVyZScsIC8vIOWbvueJh+Wxleekui/kuIvovb1cbiAgUGljVXBsb2FkOiBOZXdBcGlSb290VXJsICsgJ2NvbW1vbi9waWN0dXJlL3VwbG9hZCcsIC8vIOWbvueJh+S4iuS8oFxuICBQaWNOZXdVcGxvYWQ6IE5ld0FwaVJvb3RVcmwgKyAnY29tbW9uL3BpY3R1cmUvdjIuMi91cGxvYWQnLCAvLyDlm77niYfkuIrkvKBcbiAgUVJDb2RlVXJsOiBOZXdBcGlSb290VXJsICsgJ3d4bWEvcXJjb2RlL3NhdmUnLCAvLyDojrflj5bkuoznu7TnoIFcbiAgQ29uc3VsdFRlbDogV1hBcGlSb290VXJsICsgJ2NvbnN1bHRhdGl2ZScsIC8vIOiOt+WPluWSqOivoueUteivnVxuXG4gIEF1dGhMb2dpbkJ5V2VpeGluOiBXWEFwaVJvb3RVcmwgKyAndXNlci9sb2dpbicsIC8vIOW+ruS/oeeZu+W9lVxuICBnZXRBY2NvdW50SW5mbzogV1hBcGlSb290VXJsICsgJ3VzZXIvYWNjb3VudCcsIC8vIOiOt+WPlueUqOaIt+S/oeaBr1xuICAvLyBJbmZvOiBXWEFwaVJvb3RVcmwgKyd1c2VyL2luZm8nLCAvLyB0ZXN0XG4gIGZvcm1JRDogV1hBcGlSb290VXJsICsgJ2Zvcm1pZCcsIC8vIOaPkOS6pGZvcm1JZFxuICB1c2VyQmVoYXZpb3I6IFdYQXBpUm9vdFVybCArICdjb21tb24vZXZlbnQnLCAvLyDnlKjmiLfooYzkuLpcbiAgcGhvbmVBdXRob3JpemU6IFdYQXBpUm9vdFVybCArICd1c2VyL3JlZ2lzdGVyZWQnLCAvLyDliKTmlq3nlLXor53mmK/lkKbmjojmnYNcbiAgZ2V0VXNlclBob25lOiBXWEFwaVJvb3RVcmwgKyAndXNlci9nZXRQaG9uZScsIC8vIOiOt+WPlueUqOaIt+W+ruS/oeeUteivneWPt+eggVxuICBcbiAgXG4gIEluZGV4QmFubmVyOiBXWEFwaVJvb3RVcmwgKyAncGJwL2Jhbm5lcicsIC8vIOmmlumhtS0tYmFubmVyXG4gIEluZGV4TmV3czogV1hBcGlSb290VXJsICsgJ2NvbW1vbi9tZXNzYWdlL3BicC1pbmRleC90b3AnLCAvLyDpppbpobUtLeWFrOWRilxuICBJbmRleFBhcmFtOiBXWEFwaVJvb3RVcmwgKyAncGJwL2luZGV4L2RhdGEnLCAvLyDpppbpobUtLeezu+e7n+aVsOaNru+8muWKoOWFpeeahOS6uue7h+mAoOWOguetiVxuICBJbmRleE9yZGVyOiBXWEFwaVJvb3RVcmwgKyBcImNvbW1vbi9tZXNzYWdlL3BicC11c2VyL3R4LWJ1eS1vcmRlci9maXJzdFwiLCAvLyDpppbpobUtLeW+heaUr+S7mOiuouWNlVxuICBJbmRleEpvaW5TdGF0ZTogV1hBcGlSb290VXJsICsgJ3BicC9jb3JwLWFwcGx5L3N0YXR1cycsIC8vIOmmlumhtS0t55Sz6K+35Yqg55uf54q25oCBXG4gIHJlZ1VzZXI6IFdYQXBpUm9vdFVybCArICd1c2VyL3YyLjIvcGhvbmUnLCAvLyDnlKjmiLfms6jlhowtLeaPkOS6pOeUqOaIt+azqOWGjO+8iOeUqOaIt+W+ruS/oeacieWPt+egge+8iVxuXG4gIC8vIOmmlumhtS0t5om+5biD44CB5Yqg55ufXG4gIGZpbmRDbG90aDogV1hBcGlSb290VXJsICsgJ3BicC9zZWVrLWRlbWFuZCcsIC8vIOaPkOS6pOaIkeeahOaJvuW4g1xuICBqb2luQ29ycDogV1hBcGlSb290VXJsICsgJ3BicC9jb3JwLWFwcGx5JywgLy8g5o+Q5Lqk5Yqg55uf55Sz6K+3XG4gIHZhbGlkYXRlOiBXWEFwaVJvb3RVcmwgKyAnY29tbW9uL3Ntcy9zZW5kUGJwVXNlclZlcmlmeUNvZGUnLCAvLyDliqDnm5/nlLPor7cv55So5oi35rOo5YaMLS3lj5HpgIHpqozor4HnoIFcbiAgdGVsTmFtZTogV1hBcGlSb290VXJsICsgJ3VzZXIvcGhvbmUnLCAvLyDnlKjmiLfms6jlhowtLeaPkOS6pOeUqOaIt+azqOWGjFxuICBjb21wYW55OiBXWEFwaVJvb3RVcmwgKyAndXNlcicsIC8vIOeUqOaIt+azqOWGjC0t5o+Q5Lqk5YWs5Y+45ZCN56ewXG5cbiAgLy8g5rGC6LSt5Yy6XG4gIEJ1eVNhbXBsZTogV1hBcGlSb290VXJsICsgJ3BicC9xaXVnb3UnLCAvLyDmsYLotK3ljLotLeaxgui0reWIl+ihqC/msYLotK3or6bmg4Uv5pS26JePL+WPlua2iOaUtuiXjy/mtY/op4jkurrmlbAv5pCc57SiXG4gIEJ1eU9mZmVyOiBXWEFwaVJvb3RVcmwgKyAncGJwL3FpdWdvdS1iYW9qaWEnLCAvLyDmsYLotK3ljLotLeaxgui0reaKpeS7t1xuICBCdXlDYXNlOiBXWEFwaVJvb3RVcmwgKyAncGJwL3NlZWstY2FzZScsIC8vIOaxgui0reWMui0t5Yy56YWN5oiQ5Yqf5YiX6KGoL+WMuemFjeivpuaDhS/kuqTmmJPmiJDlip/liJfooagv5Lqk5piT6K+m5oOFL+aQnOe0olxuXG4gIC8vIOeOsOi0p+WMulxuICBnb29kc0xpc3Q6IFdYQXBpUm9vdFVybCArICdwYnAvc3BvdGFyZWEnLCAvLyDnjrDotKfljLotLeeOsOi0p+WIl+ihqC/njrDotKfor6bmg4Uv5pS26JePL+WPlua2iOaUtuiXjy/mtY/op4jkurrmlbBcbiAgZ29vZHNBcHBseTogV1hBcGlSb290VXJsICsgJ3BicC9zcG90YXJlYS1hcHBseScsIC8vIOeOsOi0p+WMui0t5o+Q5Lqk57Si5qC3XG5cbiAgLy8g5oiR55qEXG4gIFVzZXJOZXdzOiBXWEFwaVJvb3RVcmwgKyAnY29tbW9uL21lc3NhZ2UvcGJwLXVzZXIvdG9wJywgLy8g5oiR55qELS3mmK/lkKbmnInmiJHnmoTmtojmga9cbiAgVXNlckFwcHJvdmU6IFdYQXBpUm9vdFVybCArIFwidHgvY2VydGlmeVwiLCAvLyDmiJHnmoQtLeS4quS6ui/kvIHkuJrorqTor4Hkv6Hmga9cbiAgVXNlclBheVNhdmU6IFdYQXBpUm9vdFVybCArICd0eC9iYW5rL3BheWxpc3QvMScsIC8vIOaIkeeahC0t5LuY5qy+5pSv5oyB55qEIOWCqOiThOWNoSDotKbmiLfliJfooahcbiAgVXNlclBheUNyZWRpdDogV1hBcGlSb290VXJsICsgJ3R4L2JhbmsvcGF5bGlzdC8zJywgLy8g5oiR55qELS3ku5jmrL7mlK/mjIHnmoQg5L+h55So5Y2hIOi0puaIt+WIl+ihqFxuICBVc2VyQ2FzaEJhbms6IFdYQXBpUm9vdFVybCArICd0eC9iYW5rL3JlY3ZsaXN0JywgLy8g5oiR55qELS3mlLbmrL7mlK/mjIHnmoTpk7booYzotKbmiLfliJfooahcblxuICAvLyDmiJHnmoQtLeaIkeeahOa2iOaBr1xuICBVc2VyTmV3c0xpc3Q6IFdYQXBpUm9vdFVybCArICdjb21tb24vbWVzc2FnZS9wYnAtdXNlcicsIC8vIOaIkeeahC0t5oiR55qE5raI5oGvLS3mtojmga/liJfooahcbiAgVXNlck5ld3NSZWFkOiBXWEFwaVJvb3RVcmwgKyAnY29tbW9uL21lc3NhZ2UnLCAvLyDmiJHnmoQtLeaIkeeahOa2iOaBry0t6ZiF6K+75raI5oGvXG5cbiAgLy8g5oiR55qELS3miJHnmoTmib7luINcbiAgVXNlckNsb3RoOiBXWEFwaVJvb3RVcmwgKyAncGJwL3NlZWsnLCAvLyDmiJHnmoQtLeaIkeeahOaJvuW4gy0t5oiR55qE5om+5biDL+aJvuW4g+ivpuaDhVxuICBVc2VyQW5hbHlzaXM6IFdYQXBpUm9vdFVybCArICdwYnAvc2Vlay1hbmFseXNpcycsIC8vIOaIkeeahC0t5oiR55qE5om+5biDLS3mib7luIPor6bmg4UtLeWIhuaekOe7k+aenOehruiupC/lkKborqRcbiAgVXNlclJlc3VsdDogV1hBcGlSb290VXJsICsgJ3BicC9zZWVrLXJlc3VsdCcsIC8vIOaIkeeahC0t5oiR55qE5om+5biDLS3mib7luIPor6bmg4UtLeW4g+agt+e7k+aenOehruiupC/lkKborqRcbiAgVXNlckZpbmFsbHk6IFdYQXBpUm9vdFVybCArICdwYnAvc2Vlay1maW5hbGx5JywgLy8g5oiR55qELS3miJHnmoTmib7luIMtLeaJvuW4g+ivpuaDhS0t5Yy56YWN57uT5p6cLeaPkOS6pOivhOS7t1xuXG4gIC8vIOaIkeeahC0t5oql5Lu3XG4gIFVzZXJQcmljZTogV1hBcGlSb290VXJsICsgJ3BicC9xaXVnb3UtYmFvamlhJywgLy8g5oiR55qELS3miJHnmoTmiqXku7ctLeaKpeS7t+WIl+ihqC/miqXku7for6bmg4VcbiAgVXNlclByaWNlRGVsOiBXWEFwaVJvb3RVcmwgKyAncGJwL3FpdWdvdS1iYW9qaWEvZGVsZXRlJywgLy8g5oiR55qELS3miJHnmoTmiqXku7ctLea4hemZpOWkseaViOaKpeS7t1xuICBVc2VyUHJpY2VNYXRjaDogV1hBcGlSb290VXJsICsgJ3BicC9xaXVnb3UtbWF0Y2hlZCcsIC8vIOaIkeeahC0t5oiR55qE5oql5Lu3LS3miqXku7for6bmg4UtLeaPkOS6pOaKpeS7t+ivhOS7t1xuXG4gIC8vIOaIkeeahC0t5oiR55qE57Si5qC3XG4gIFVzZXJTZWVrOiBXWEFwaVJvb3RVcmwgKyAncGJwL3Nwb3RhcmVhLWFwcGx5L3F1ZXJ5JywgLy8g5oiR55qELS3miJHnmoTntKLmoLctLee0ouagt+WIl+ihqFxuICBVc2VyU2Vla0RlbDogV1hBcGlSb290VXJsICsgJ3BicC9zcG90YXJlYS1hcHBseS9kZWxldGUnLCAvLyDmiJHnmoQtLeaIkeeahOe0ouagty0t5riF56m65aSx5pWI57Si5qC3XG5cbiAgLy8g5oiR55qELS3mlLbol4/lpLlcbiAgVXNlckNvbGxCdXk6IFdYQXBpUm9vdFVybCArICdwYnAvdXNlci1jb2xsZWN0aW9uJywgLy8g5oiR55qELS3mlLbol4/lpLktLeaxgui0reaUtuiXjy0t5pS26JeP5YiX6KGoXG4gIFVzZXJCdXlVbkNvbGw6IFdYQXBpUm9vdFVybCArICdwYnAvcWl1Z291L3VuY29sbGVjdCcsIC8vIOaIkeeahC0t5pS26JeP5aS5LS3msYLotK3mlLbol48tLeWPlua2iOaUtuiXj++8iOa4hemZpOWkseaViOaUtuiXj++8iVxuICBVc2VyQ29sbEdvb2RzOiBXWEFwaVJvb3RVcmwgKyAncGJwL3VzZXItY29sbGVjdGlvbi9xdWVyeS9zcG90YXJlYScsIC8vIOaIkeeahC0t5pS26JeP5aS5LS3njrDotKfmlLbol48tLeaUtuiXj+WIl+ihqFxuICBVc2VyR29vZHNVbkNvbGw6IFdYQXBpUm9vdFVybCArICdwYnAvc3BvdGFyZWEvdW5jb2xsZWN0JywgLy8g5oiR55qELS3mlLbol4/lpLktLeeOsOi0p+aUtuiXjy0t5Y+W5raI5pS26JeP77yI5riF6Zmk5aSx5pWI5pS26JeP77yJXG5cbiAgLy8g5oiR55qELS3kuqTmmJPotKbmiLdcbiAgVXNlclBheVZlcmlmeTogV1hBcGlSb290VXJsICsgJ3R4L3VzZXItcGF5Y2FyZC9zZW5kJywgLy8g5oiR55qELS3miJHnmoTkuqTmmJPotKbmiLctLea3u+WKoOS6pOaYk+i0puaIty0t5Y+R6YCB6aqM6K+B56CBXG4gIFVzZXJQYXlBY2NvdW50OiBXWEFwaVJvb3RVcmwgKyAndHgvdXNlci1wYXljYXJkJywgLy8g5oiR55qELS3miJHnmoTkuqTmmJPotKbmiLctLeS7mOasvui0puaIty0t5LuY5qy+6LSm5oi35YiX6KGoL+ino+mZpOe7keWumi/orr7kuLrpu5jorqTotKbmiLcv5re75Yqg5LuY5qy+6LSm5oi3XG4gIFVzZXJDYXNoQWNjb3VudDogV1hBcGlSb290VXJsICsgXCJ0eC91c2VyLXJlY3ZjYXJkXCIsIC8vIOaIkeeahC0t5oiR55qE5Lqk5piT6LSm5oi3LS3mlLbmrL7otKbmiLctLSjkuKrkurop5pS25qy+6LSm5oi35YiX6KGoL+ino+mZpOe7keWumi/orr7kuLrpu5jorqTotKbmiLcv5re75Yqg5pS25qy+6LSm5oi3LyjkvIHkuJop5pS25qy+6LSm5oi35YiX6KGoL+a3u+WKoOaUtuasvui0puaIty/op6PpmaTnu5HlrppcblxuICAvLyDmiJHnmoQtLeS4quS6ui/kvIHkuJog6K6k6K+BXG4gIFVzZXJGb3JtQXBwcm92ZTogV1hBcGlSb290VXJsICsgXCJ0eC9jZXJ0aWZ5XCIsIC8vIOaIkeeahC0t5Liq5Lq6L+S8geS4muiupOivgS0t6I635Y+W6K6k6K+B5L+h5oGvL+aPkOS6pOS4quS6uuiupOivgS/mj5DkuqTkvIHkuJrorqTor4FcblxuICAvLyDmiJHnmoQtLeaIkeeahOS6pOaYk+iuouWNlVxuICBVc2VyQnV5TGlzdDogV1hBcGlSb290VXJsICsgXCJ0eC9vcmRlci9idXlsaXN0XCIsIC8vIOaIkeeahC0t5oiR55qE5Lqk5piT6K6i5Y2VLS3ph4fotK3orqLljZXliJfooahcbiAgVXNlclNlbGxMaXN0OiBXWEFwaVJvb3RVcmwgKyBcInR4L29yZGVyL3NlbGxsaXN0XCIsIC8vIOaIkeeahC0t5oiR55qE5Lqk5piT6K6i5Y2VLS3plIDllK7orqLljZXliJfooahcbiAgVXNlck9yZGVyOiBXWEFwaVJvb3RVcmwgKyBcInR4L29yZGVyXCIsIC8vIOaIkeeahC0t5oiR55qE5Lqk5piT6K6i5Y2VLS3ph4fotK3orqLljZXor6bmg4Uv5o+Q5Lqk6K+E5Lu3L+S/ruaUuemAgOasvui0puaIty/noa7orqTmlLbotKcv5b+r5o235pSv5LuY6aqM6K+B56CBL+W/q+aNt+aUr+S7mO+8m+mUgOWUruiuouWNleivpuaDhS/noa7orqTorqLljZUv5L+u5pS55pS25qy+6LSm5oi3L+ehruiupOaUtui0py/mj5DkuqTor4Tku7dcbiAgVXNlckJ1eUFwcHJhaXNlOiBXWEFwaVJvb3RVcmwgKyBcInR4L2Fzc2Vzc1wiLCAvLyDph4fotK3orqLljZXmj5DkuqTor4Tku7dcbiAgVXNlck9yZGVyU2VuZDogTmV3QXBpUm9vdFVybCArIFwid3htYS90cGxtc2cvc2VuZFwiLCAvLyDorqLljZXmlK/ku5jmiJDlip/lkI7vvIzlj5HpgIHkv6Hmga/pgJrnn6XljZblrrZcbiAgLy8gYmFubmVl54K55Ye76Lez6L2sXG4gIC8vIGJhbm5lckp1bXA6IE5ld0FwaVJvb3RVcmwgK1wicGJwL2Jhbm5lclwiLFxuXG4gIC8vIOWKoOebn++8jOaJvuagt++8jOS4iuaciOaIkOS6pFxuICBtYWluQ291bnQ6IFdYQXBpUm9vdFVybCArIFwicGJwL21peGVkLWluZm9ybWF0aW9uL2Jhbm5lci9jb3VudFwiLFxuICAvLyDlrqLmiLfor4Tor61cbiAgZ3Vlc3RDb21tZW50OiBXWEFwaVJvb3RVcmwgKyBcInBicC9jb21tZW50c1wiLFxuICAvL+W8ueeql+W5v+WRilxuICBwb3BBZHM6IFdYQXBpUm9vdFVybCArIFwicGJwL2Jhbm5lci9hZHZlcnRpc2VcIixcblxuICAvL+aQnOe0ouaxgui0reOAgeeOsOi0p+OAgeaIkOWKn+ahiOS+i+eahOaVtOWQiFxuICBnb29kc0NvdW50OiBXWEFwaVJvb3RVcmwgKyBcInBicC9taXhlZC1pbmZvcm1hdGlvbi9rZXl3b3JkXCIsXG5cbiAgLy8g6K6i5Y2V5pW05ZCIXG4gIHRvdGFsT3JkZXI6IFdYQXBpUm9vdFVybCArIFwidHgvb3JkZXIvb3JkZXJsaXN0XCIsXG5cbiAgLy8gbWluZ3BpYW46IFdYQXBpUm9vdFVybCArIFwicGJwL2NvcnAtYXBwbHlcIixcblxuICB0aWFvemh1YW46IFdYQXBpUm9vdFVybCArIFwidXNlci9nb3RvQ2FydGVcIixcblxuICAvL+eZveadoea2iOaBr+mAmuefpVxuICB3aGl0ZUJhcnM6IFdYQXBpUm9vdFVybCArIFwidHgvd2hpdGUtc3RyaXAvbm90aWNlXCIsIC8vUE9TVFxuXG5cbiAgLy/nmb3mnaHpobXpnaLlsZXnpLpcbiAgd2hpdGVTdHJpcHM6IFdYQXBpUm9vdFVybCArIFwidHgvd2hpdGViYXItYXBwbHkvc3RhdHVzXCIsIC8vZ2V0XG5cbiAgYmFpdGlhb0FwcGx5OiBXWEFwaVJvb3RVcmwgKyBcInR4L3doaXRlYmFyLWFwcGx5XCIsIC8vUE9TVFxuXG5cbiAgLy/ojrflj5bkv6HnlKjljaHmiYvnu63otLnotLnnjodcbiAgZ2V0UGF5UmF0ZU51bTogTmV3QXBpUm9vdFVybCArIFwiL2NvbW1vbi9wYXJhbS9jcmVkaXRyYXRlc1wiLCAvL2dldFxuXG4gIC8vIOmHkeaireS6kVxuICAvLyDmlrDlu7ror6Lku7fljZVcbiAgY3JlYXRlT3JkZXI6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeS1saXN0XCIsIC8vcG9zdFxuXG4gIC8vIOivouS7t+WNleivpuaDhVxuICBnZXRJbnF1aXJ5RGV0YWlsOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnktbGlzdFwiLCAvL2dldFxuXG4gIC8vIOiOt+WPluivouS7t+WNleWIl+ihqFxuICBnZXRJbnF1aXJ5TGlzdDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvZmluZEFsbFwiLFxuICAvL+WIhuaekOW4iOiOt+WPluWIhuaekOWNleeuoeeQhuWIl+ihqFxuICBnZXRBbmFseXNpc0xzdDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9hbmFseXNpcy9maW5kQWxsXCIsIFxuICAvLyDlvZXlhaXmib7moLfnu5PmnpzvvIxcbiAgaW5wdXRSZXN1bHQ6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3Qvc2Vlay1yZXN1bHRcIiwgXG5cdC8vIOiOt+WPluaJvuagt+e7k+aenOivpuaDhVxuXHRnZXRTYW1wbGVEZXRhaWw6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3Qvc2Vlay1yZXN1bHQvZ2V0WnlEZXRhaWxcIiwgXG4gIC8v5paw5bu65L+d6K+B6YeR566h55CGXG4gIHNldERlcG9zaXQ6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvZGVwb3NpdFwiLCBcbiAgLy8g5paw5bu66K+i5Lu35YiG5p6Q5Y2VXG4gIGFkZFhKQW5hbHlzaXM6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3QvYW5hbHlzaXNcIiwgXG4gIC8vIOW9leWFpeaJvuagt+WIhuaekOWNlVxuICBhZGRaWUFuYWx5c2lzOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3NlZWtyZXN1bHQvYW5hbHlzaXNcIiwgIFxuICAvL+aOqOmAgee7meWNluW4ruWKnlxuICBwdXNoU2VsbERlcHV0eTogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvZm9yQWxsc2VsbGVyXCIsIFxuXHQvLyDlgqzljZXmiqXku7dcblx0cmVtaW5kZXJPZmZlcjogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvdXJnZVF1b3RlXCIsIFxuICAvL+iOt+WPluWMuemFjeWIl+ihqFxuICBnZXRNYXRjaGluZ0xpc3Q6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeS1saXN0L3NlYXJjaEluU2FtcGxlXCIsXG4gIC8v6K6+572u5om+5qC357uT5p6cXG4gIHNldFNlYXJjaFJlc3VsOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3NlZWstcmVzdWx0L3NldFNhbXBsZVJlc3VsdHNcIiwgXG4gIC8v6K6+572u5bm25o6o6YCB5oql5Lu3XG4gIHNldE9mZmVyOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3F1b3RlL3NldFF1b3RlXCIsIFxuICAvL+iuvue9ruaYr+WQpuWMuemFjVxuICBzZXRXaGV0aGVyTWFyY2hpbmc6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3QvcXVvdGUvdXBkYXRlU3RhdHVzXCIsIFxuICAvLyDojrflj5bljLnphY3nu5Pmnpzor6bmg4Us5o6o6YCB5Y2W5biu5YqeXG4gIGdldE1hdGNoaW5nRGV0YWlsOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3B1c2hcIiwgXG4gIC8vIOagt+WTgeW6k+iOt+WPluacgOeDreaQnOe0olxuICBnZXROZXdTZWFyY2g6IFdYQXBpUm9vdFVybCArIFwianN5L3NhbXBsZS9maW5kQnlUeXBlXCIsIFxuICAvLyDmoLflk4HlupPmkJzntKLnu5PmnpzliJfooags5qC35ZOB6K+m5oOFXG4gIGdldHNlYXJjaFJlc3VsdDogV1hBcGlSb290VXJsICsgXCJqc3kvc2FtcGxlXCIsIFxuICAvL+WkmumhueaQnOe0olxuICBtYW55U2VhcmNoOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9zYW1wbGUvc2VhcmNoRGV0YWlsXCIsIFxuICAvL+afpeeci+WOhuWPsuaKpeS7t1xuICB2aWV3SGlzdG9yeVF1dG9lOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9zYW1wbGUvcXVvdGVIaXN0b3J5XCIsIFxuICAvLyDojrflj5bnrqHnkIbluK7lip7liJfooahcbiAgZ2V0RGVwdXR5QWRtaW5MaXN0OiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9kZXB1dHlcIiwgXG4gIC8v6I635Y+W5Yy65Z+f5YiX6KGoIFxuICBnZXRBcmVhTGlzdDogV1hBcGlSb290VXJsICsgXCJqc3kvZGVzaWduYXRlZFBlcnNvbnMvZ2V0QXJlYUxpc3RcIixcbiAgLy8g6K6+572u5Yy65Z+f57uP55CGXG4gIHNldE1hbmFnZXI6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL3NldE1hbmFnZXJcIixcbiAgLy/ojrflj5bljLrln5/nu4/nkIbliJfooahcbiAgZ2V0TWFuYWdlckxpc3Q6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL2dldE1hbmFnZXJMaXN0XCIsXG4gIC8vIOiOt+WPluW4ruWKnuivpuaDhVxuXHRnZXREZXB1dHlEZXRhaWxzOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9nZXREZXB1dHlcIixcbiAgLy8g5Ya757uT5biu5YqeXG5cdGZyZWV6ZURlcHV0eTogV1hBcGlSb290VXJsICsgXCJqc3kvZGVzaWduYXRlZFBlcnNvbnMvZnJlZXplRGVwdXR5XCIsXG4gIC8vIOWIhumFjee7meWMuuWfn+e7j+eQhlxuXHRhbGxvY2F0aW9uRGVwdXR5OiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9zZXREZXB1dHlcIixcblx0Ly/ojrflj5bliIbphY3nmoTlrqLmiLfliJfooahcblx0Z2V0QWxsb2NhdGlvbkNsaWVudExpc3Q6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL2Rpc3RyaWJ1dGlvbi9jdXN0b21lclwiLCBcbiAgLy/ojrflj5bliIbphY3nmoTluK7lip7liJfooahcblx0Z2V0QWxsb2NhdGlvbkRlcHV0eUxpc3Q6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL2Rpc3RyaWJ1dGlvbi9kZXB1dHlcIixcblx0Ly8g56e75Lqk5p2D6ZmQXG5cdHRyYW5zZmVyTWFuYWdlcjogV1hBcGlSb290VXJsICsgXCJqc3kvZGVzaWduYXRlZFBlcnNvbnMvdHJhbnNmZXJNYW5hZ2VyXCIsXG5cdC8vIOWIoOmZpOW4ruWKnuWIhumFjVxuXHRkZWxldGVEZXB1dHlBbGxvY2F0aW9uOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9kZWxlRGVwdXR5TGlzdFwiLFxuXHQvLyDnrqHnkIbkurrlkZjojrflj5blrqLmiLfnrqHnkIbliJfooahcblx0Z2V0QWRtaW5DdXN0b21lckxpc3Q6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL2N1c3RvbWVyTGlzdFwiLFxuXHQvLyDliIbphY3lrqLmiLfnu5nljLrln5/nu4/nkIZcblx0YWxsb2NhdGlvbkN1c3RvbWVyOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9zZXRDdXN0b21lckZvckRpcmVjdG9yXCIsXG5cdC8vIOWIoOmZpOWuouaIt+WIhumFjVxuXHRkZWxldGVBbGxvdEN1c3RvbWVyOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9kZXNpZ25hdGVkUGVyc29ucy9kZWxlQ3VzdG9tZXJMaXN0XCIsXG5cdC8v5Yig6Zmk5a6i5oi35YiG6YWN77yI5Yy65Z+f57uP55CG77yJXG5cdGRlbGVDdXN0b21lcnM6IFdYQXBpUm9vdFVybCArIFwianN5L2Rlc2lnbmF0ZWRQZXJzb25zL2RlbGVDdXN0b21lcnNcIixcblx0Ly8g5Yy65Z+f57uP55CG5YiG6YWN5a6i5oi3XG5cdHNldEN1c3RvbWVyRm9yTWFuYWdlcjogV1hBcGlSb290VXJsICsgXCJqc3kvZGVzaWduYXRlZFBlcnNvbnMvc2V0Q3VzdG9tZXJGb3JNYW5hZ2VyXCIsXG5cdC8vIOiOt+WPluW4uOinhOivouS7t+WIl+ihqFxuXHRnZXRSb3V0aW5lTGlzdDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvZmluZEFsbENvbnZlbnRpb25cIixcblx0Ly8g5bi46KeE6K+i5Lu35oql5Lu3XG5cdHNldFF1b3RlZm9yQ2d4ajogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9wdXNoL3NldFF1b3RlZm9yQ2d4alwiLFxuXHQvLyDljLnphY3nu5PmnpzmiqXku7dcblx0c2V0UXVvdGVmb3JQcGJqOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3B1c2gvc2V0UXVvdGVcIixcblx0Ly8g6I635Y+W5Yy56YWN57uT5p6c6K+m5oOFXG5cdGdldFBwRGV0YWlsOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3B1c2gvZ2V0UHBEZXRhaWxcIixcblx0Ly8g5o6o6YCB5Y2W5a62XG5cdHB1c2hTZWxsZXI6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3QvcHVzaC9wdXNoU2VsbGVyXCIsXG5cdC8vIOWNluWutu+8jOaIkeeahOaKpeS7t+WIl+ihqFxuXHRnZXRPZmZlckxpc3Q6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeS1saXN0L215UXVvdGVcIixcblx0Ly8g6I635Y+W5YWo6YOo5om+5qC344CB5Yy56YWN5YiX6KGoXG5cdGdldEFsbExpc3Q6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeS1saXN0L2dldEFsbFF1b3RlXCIsXG5cdC8vIOWFs+mXreivouS7t+WNlVxuXHRjbG9zZUlucXVpcnlTaGVldDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvdXBkYXRlU3RhdHVzXCIsXG5cdC8vIOeUn+aIkOWwj+eoi+W6j+S6jOe7tOeggVxuXHRnZW5lcmF0ZVFyQ29kZTogTmV3QXBpUm9vdFVybCArIFwid3htYS9xcmNvZGUvbWluXCIsXG5cdC8vIOiOt+WPluacquivu+a2iOaBr+aVsOmHj1xuXHRnZXROZXdzTnVtOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9tZXNzYWdlL2ZpbmRBbGxOdW1cIixcblx0Ly/ojrflj5bmtojmga/liJfooahcblx0Z2V0TmV3c0xpc3Q6IFdYQXBpUm9vdFVybCArIFwianN5L21lc3NhZ2UvZmluZEFsbFwiLFxuXHQvL+agh+iusOW3suivu1xuXHRzZXRIYXZlUmVhZDogV1hBcGlSb290VXJsICsgXCJqc3kvbWVzc2FnZS9oYXZlUmVhZFwiLFxuXHQvLyDmnIDng61cblx0Z2V0TmV3TnVtYmVyOiBXWEFwaVJvb3RVcmwgKyBcImpzeS9zYW1wbGUvZmluZEFsbEJ5VHlwZVwiLFxuXHQvLyDliKDpmaTmib7moLfnu5Pmnpxcblx0ZGVsZXRlU2FtcGxlOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3NlZWstcmVzdWx0L2RlbGV0ZVwiLFxuXHQvLyDor7fmsYLlho3mrKHmiqXku7dcblx0cmVxdWVzdFF1b2F0aW9uOiBXWEFwaVJvb3RVcmwgKyBcImlucXVpcnlsaXN0L3F1b3RlL3JlcXVlc3RRdW90ZUFnYWluXCIsXG5cdC8vIOaJvuagt+WPkei1t+aKpeS7t1xuXHRzZXRRdW90ZUZvclp5eGo6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3QvcXVvdGUvc2V0UXVvdGVGb3JaeXhqXCIsXG5cdC8vIOaOqOmAgeS5sOW4ruWKnlxuXHRwdXNoVG9CdXllcjogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9xdW90ZS9wdXNoVG9CdXllclwiLFxuXHQvLyDliIbmnpDluIjmib7moLfliJfooahcblx0Z2V0enlBbmFseXNpc0xpc3Q6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3QvYW5hbHlzaXMvZmluZEFsbEZvclp5XCIsXG5cdC8vIOWIhuaekOW4iOivouS7t+WIl+ihqFxuXHRnZXR4akFuYWx5c2lzTGlzdDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9hbmFseXNpcy9maW5kQWxsRm9yWGpcIixcblx0Ly8g56e75Lqk5a6i5oi35YiX6KGoXG5cdGdldFRyYW5zZmVyQ3VzdG9tZXJzTGlzdDogV1hBcGlSb290VXJsICsgXCJqc3kvZGVzaWduYXRlZFBlcnNvbnMvZGVwdXR5bGlzdEZvclRyYW5zZmVyXCIsXHRcblxuICAvL+mHkeaireS6keWuouaIt+euoeeQhuezu+e7n1xuICBcbiAgLy8g6I635Y+W6Lef6L+b6K6w5b2V5YiX6KGoXG4gIGdldFJlY29yZExpc3Q6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvZmluZEFsbEZvbGxvd0xpc3RcIiwgLy9nZXRcbiAgLy/ojrflj5blrqLmiLfliJfooahcbiAgZ2V0Q3VzdG9tZXJMaXN0OiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2ZpbmRBbGxDdXN0b21lckJ5UGFnZVwiLCAvL2dldFxuICAvLyDojrflj5bluK7lip7lhbPogZTlrqLmiLfliJfooahcbiAgZ2V0QXNzb2NpYXRlZEN1c3RvbWVyczogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9maW5kQWxsQ3VzdG9tZXJcIiwgLy9nZXRcblx0Ly8g6I635Y+W5biu5Yqe5YWz6IGU5a6i5oi35YiX6KGoKOW3sue7keWumilcblx0Z2V0Qm91bmRBc3NvY2lhdGVkQ3VzdG9tZXJzOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2ZpbmRBbGxVc2VyXCIsXG4gIC8v5paw5bu65a6i5oi36Lef6L+b6K6w5b2VXG4gIGFkZFJlY29yZDogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9mb2xsb3dSZWNvcmRcIiwgLy9wb3N0XG4gIC8v6Lef6L+b6K6w5b2V5Y2V5p2hXG4gIGdldFJlY29yZE9uZTogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9mb2xsb3dSZWNvcmRGaW5kT25lXCIsIC8vcG9zdFxuICAvL+i3n+i/m+iusOW9lVxuICBnZXRSZWNvcmQ6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvZm9sbG93UmVjb3JkRmluZEFsbFwiLCAvL2dldFxuICAvLyDmlrDlu7rlrqLmiLdcbiAgYWRkQ3VzdG9tZXI6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvYmFzZUluZm9cIiwgLy9wb3N0XG4gIC8vIOiOt+WPluWuouaIt+S/oeaBr1xuICBnZXRDdXN0b21lckluZm86IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvYmFzZUluZm8vXCIsIC8vZ2V0XG4gIC8v6K6+572u5a6i5oi36Lqr5Lu954m55b6BXG4gIHNldElkZW50aXR5OiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2lkZW50aXR5Q2hhcmFjdGVyaXN0aWNzXCIsIC8vcG9zdFxuICAvLyDorr7nva7lrqLmiLfkuqflk4Hkv6Hmga9cbiAgc2V0T3BpOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL3Byb2R1Y3RJbmZvXCIsIC8vcG9zdFxuICAvLyDorr7nva7nu4/okKXnirblhrVcbiAgc2V0TWFuYWdlbWVudDogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9vcGVyYXRpb25TdGF0dXNcIiwgLy9wb3N0XG4gIC8v6I635Y+W6aqM6K+B56CBXG4gIGdldFZlcmlmaWNhdGlvbkNvZGU6IFdYQXBpUm9vdFVybCArIFwiY29tbW9uL3Ntcy9zZW5kUGJwVXNlclZlcmlmeUNvZGVVbkJpbmRcIiwgLy9wb3N0XG4gIC8vIOazqOWGjOeUqOaIt1xuICB1c2VyUmVnaXN0cmF0aW9uOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2xvZ2luXCIsIC8vcG9zdFxuICAvLyDlrqLmiLfor6Lku7forrDlvZVcblx0Z2V0Q3VzdG9tZXJJbnF1aXJ5TGlzdDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5LWxpc3QvZmluZEFsbEJ5QnV5ZXJpZFwiLFxuXHQvL+S6p+WTgeWxleekuuivpuaDhVxuXHRnZXRQcm9kdWN0RGV0YWlsOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL3Byb2R1Y3QvcHJvZHVjdFNob3dcIixcblx0Ly8g5paw5aKe5Lqn5ZOBXG5cdGFkZFByb2R1Y3Q6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvcHJvZHVjdFwiLFxuXHQvLyDmibnph4/kv67mlLnkuqflk4HlsZXnpLrns7vliJfnsbvlnotcblx0YWxsTW9kaXR5VHlwZVNlcmllczogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9wcm9kdWN0L3VwZGF0ZUFsbFwiLFxuXHQvLyDmm7TmlrDkuqflk4Hkv6Hmga9cblx0dXBkYXRlUHJvZHVjdDogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9wcm9kdWN0L3VwZGF0ZVByb2R1Y3RcIixcblx0Ly8g5pu05paw6K6w5b2V5YiX6KGoXG5cdGdldFJlbmV3TGlzdDogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9wcm9kdWN0L3JlbmV3TGlzdFwiLFxuXHQvL+abtOaWsOS6p+WTgeeKtuaAgVxuXHR1cGRhdGVTdGF0dXM6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvcHJvZHVjdC91cGRhdGVTdGF0dXNcIixcblx0Ly8g5L+d6K+B6YeR5aSE55CG5YiX6KGoXG5cdGdldEJvbmRIYW5kbGVMaXN0OiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2RlcG9zaXREZWFsL2ZpbmRBbGxcIixcblx0Ly8g5paw5aKe5L+d6K+B6YeR5aSE55CGXG5cdGFkZEJvbmRIYW5kbGU6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvZGVwb3NpdERlYWxcIixcblx0Ly8g5L+d6K+B6YeR5YiX6KGoXG5cdGdldEJvbmRBZGRMaXN0OiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2RlcG9zaXQvZmluZEFsbFwiLFxuXHQvLyDnrqHnkIblkZjojrflj5blrqHmoLjliJfooahcblx0Z2V0Qm9uZEFkbWluOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2RlcG9zaXREZWFsL2ZpbmRBbGxMaXN0XCIsXG5cdC8vIOS/ruaUueS/neivgemHkeWkhOeQhueKtuaAgVxuXHRzZXRIYW5kbGVTdGF0dXM6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvZGVwb3NpdERlYWwvdXBkYXRlU3RhdHVzXCIsXG5cdC8vIOS/ruaUuea3u+WKoOS/neivgemHkeeKtuaAgVxuXHRzZXRCb25kU3RhdHVzOiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2RlcG9zaXQvdXBkYXRlU3RhdHVzXCIsXG5cdC8vIOaWsOW7uuS/ruaUueWFrOWPuFxuXHRjb3Jwb3JhdGVCYXNlSW5mbzogV1hBcGlSb290VXJsICsgXCJjb3Jwb3JhdGVCYXNlSW5mb1wiLFxuXHQvLyDmt7vliqDogZTns7vkurpcblx0YWRkQ29udGFjdHM6IFdYQXBpUm9vdFVybCArIFwiY3VzdG9tZXIvYmFzZUluZm9cIixcblx0Ly8g5Yig6Zmk6IGU57O75Lq6XG5cdGRlbGVCYXNlSW5mbzogV1hBcGlSb290VXJsICsgXCJjdXN0b21lci9kZWxlQmFzZUluZm9cIixcblx0Ly8g6I635Y+W5YWs5Y+45YiX6KGoXG5cdGdldENvbXBhbnlMaXN0OiBXWEFwaVJvb3RVcmwgKyBcImNvcnBvcmF0ZUJhc2VJbmZvL2xpc3RcIixcblx0Ly8g5piv5ZCm5bGV56S6XG5cdGNvbnRyb2xsU2hvdzogTmV3QXBpUm9vdFVybCArXCJjb21tb24vcGFyYW0vY29udHJvbGxTaG93XCIsXG5cdC8vIOaKpeS7t+ivpuaDhVxuXHRnZXRRdW90ZURldGFpbDogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9xdW90ZVwiLFxuXHQvLyDliKDpmaTlrqLmiLflhazlj7hcblx0ZGVsZXRlQ29tcGFueTogV1hBcGlSb290VXJsICsgXCJjb3Jwb3JhdGVCYXNlSW5mby9kZWxlXCIsXG5cdC8vIOmAieaLqeiBlOezu+S6ulxuXHRnZXRDb250YWN0c0xpc3Q6IFdYQXBpUm9vdFVybCArXCJjb3Jwb3JhdGVCYXNlSW5mby9jb250bGlzdFwiLFxuXHQvLyDliKDpmaTot5/ov5vorrDlvZVcblx0ZGVsZXRlRm9sbG93OiBXWEFwaVJvb3RVcmwgKyBcImN1c3RvbWVyL2RlbGVGb2xsb3dSZWNvcmRcIixcblx0Ly8g5YiG5p6Q5biI5o6o6YCBXG5cdHB1c2hBbGxEZXB1dHk6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeWxpc3Qvc2Vla3Jlc3VsdC9hbmFseXNpcy9wdXNoXCIsXG4gIC8vIOaIkeeahOivouS7t+WIl+ihqFxuICBnZXRNeUxpc3Q6IFdYQXBpUm9vdFVybCArIFwiaW5xdWlyeS1saXN0L2ZpbmRNeUlucXVpcnlcIixcbiAgLy8gXG4gIGRpcmVjdFF1b3RhdGlvbjogV1hBcGlSb290VXJsICsgXCJpbnF1aXJ5bGlzdC9xdW90ZS9zZXRRdW90ZU1KXCIsXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 24:
/*!******************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/common.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var Api = __webpack_require__(/*! services/config/api.js */ 23);\nvar Pipe = __webpack_require__(/*! utils/pipe.js */ 25);\nvar Util = __webpack_require__(/*! utils/util.js */ 27);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 28);\n\n/**\r\n                                                 * 去除前后空格\r\n                                                 */\nfunction trim(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\n\n/**\r\n   * 功能：显示loading图标；并将loadState设为false，防止用户多次点击\r\n   * 参数：that：当前页面的this；val：loading的提示内容\r\n   */\nfunction showLoading(that, val) {\n  var sVal = val.toString();\n  that.setData({\n    loadState: false });\n\n  // 兼容处理\n  if (wx.showLoading) {\n    wx.showLoading({\n      title: sVal,\n      mask: true });\n\n  } else {\n    wx.showToast({\n      title: sVal,\n      mask: true,\n      duration: 2500 });\n\n  }\n}\n\n/**\r\n   * 功能：隐藏loading图标；并将loadState设为true，防止出现错误，用户无法点击\r\n   * 参数：that：当前页面的this\r\n   */\nfunction hideLoading(that) {\n  // 兼容处理\n  if (wx.hideLoading) {\n    wx.hideLoading();\n  } else {\n    wx.hideToast();\n  }\n  that.setData({\n    loadState: true });\n\n}\n/**\r\n   * 函数：showLoad(val)、hideLoad()\r\n   * 功能：显示/隐藏 loading图标\r\n   * 参数：val：loading图显示的文字\r\n   */\nfunction showLoad(val) {\n  var sVal = val.toString();\n  if (wx.showLoading) {\n    wx.showLoading({\n      title: sVal,\n      mask: true });\n\n  } else {\n    wx.showToast({\n      title: sVal,\n      mask: true,\n      duration: 3000 });\n\n  }\n}\nfunction hideLoad() {\n  if (wx.hideLoading) {\n    wx.hideLoading();\n  } else {\n    wx.hideToast();\n  }\n}\n\n/**\r\n   * 函数：setLoadFalse(that)、setLoadTrue(that)\r\n   * 功能：将loadState设置为false；防止用户重复点击提交表单\r\n   * 参数：that：页面的this\r\n   */\nfunction setLoadFalse(that) {\n  that.setData({\n    loadState: false });\n\n}\nfunction setLoadTrue(that) {\n  that.setData({\n    loadState: true });\n\n}\n\n/**\r\n   * 函数：changePageFalse(that)、changePageTrue(that)\r\n   * 功能：防止用户重复点击多次跳转页面\r\n   * 参数：that：页面的this\r\n   */\nfunction changePageFalse(that) {\n  that.setData({\n    changePage: false });\n\n}\nfunction changePageTrue(that) {\n  that.setData({\n    changePage: true });\n\n}\n\n\n/**\r\n   * 特性 值的转换\r\n   */\nfunction changeGloss(gloss) {\n  return Pipe.pipeGloss(gloss);\n}\n\n/**\r\n   * 特性、品质要求、品质定位 值的转换\r\n   */\nfunction changeVal(obj, stockType) {\n  if (obj) {\n    var oInfo = obj;\n    // 品质要求转换\n    oInfo.quality = Pipe.pipeQuality(oInfo.quality);\n    // 特性转换\n    oInfo.glossLongitude = Pipe.pipeGloss(oInfo.glossLongitude);\n    // oInfo.glossLatitude = Pipe.pipeGloss(oInfo.glossLatitude);\n    // 品质定位转换\n    oInfo.positionQuality = Pipe.pipePosition(oInfo.positionQuality);\n    // 库存状态\n    if (stockType) {\n      oInfo.stockType = Pipe.pipeStock(stockType);\n    }\n  }\n}\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgSmallUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/small/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n/**\r\n   * 单个--图片地址拼接--返回图片地址数组\r\n   */\nfunction pinImgMiddleUrl(obj, defaultImg) {\n  if (obj && obj.length >= 1) {\n    return obj.map(function (item) {\n      return \"\".concat(Api.ShowPic, \"/\").concat(item.id, \"/middle/download\");\n    });\n  } else {\n    return defaultImg ? [defaultImg] : [];\n  }\n}\n\n/**\r\n   * 图片预加载--图片地址拼接(求购区、现货区 列表)\r\n   */\nfunction pinPreImg(picId) {\n  if (picId) {\n    var imgArr = picId.split(\"|\");\n\n    return {\n      url: \"\".concat(Api.ShowPic, \"/\").concat(imgArr[0], \"/download\"),\n      loaded: false };\n\n  } else {\n    return {\n      url: '../../images/detail-buy-s.png',\n      loaded: false };\n\n  }\n}\n\n/**\r\n   * 图片预加载--图片地址拼接(求购区、现货区 列表)\r\n   */\nfunction pinPreSmallImg(picId) {\n  if (picId) {\n    var imgArr = picId.split(\"|\");\n\n    return {\n      url: \"\".concat(Api.ShowPic, \"/\").concat(imgArr[0], \"/small/download\"),\n      loaded: false };\n\n  } else {\n    return {\n      url: '../../images/detail-buy-s.png',\n      loaded: false };\n\n  }\n}\n\n/**\r\n   * 图片预加载--图片是否加载完成处理\r\n   */\nfunction imgPreload(that, imgArr, fn) {\n  if (imgArr.length < 1) return;\n  imgArr.forEach(function (item) {\n    // 图片预加载\n    that.imgLoader.load(item.url, function (err, data) {\n      var imgList = [];\n      imgList = imgArr.map(function (list) {\n        if (list.url == data.src) {\n          list.loaded = true;\n        }\n        return list;\n      });\n\n      fn && fn(imgList);\n    });\n  });\n}\n\n/**\r\n   * 获取 页面高度\r\n   */\nfunction onWindowH() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.getSystemInfo({\n      success: function success(res) {\n        var minHeight = res.windowHeight;\n\n        resolve(minHeight);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n\n/**\r\n   * 判断有没有token\r\n   */\nfunction getToken() {\n  return wx.getStorageSync(\"token\");\n}\n\n/**\r\n   * formId 地址拼接\r\n   */\nfunction pinFormId(api, formId) {\n  var isFormId = formId == \"the formId is a mock one\" ? \"\" : formId;\n\n  return isFormId ? api + \"?formid=\" + isFormId : api;\n}\n\n/**\r\n   * 添加图片--单张\r\n   */\nfunction addPic(fn) {\n  wx.chooseImage({\n    count: 1,\n    sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有\n    sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有\n    success: function success(res) {\n      var filesArr = res.tempFiles;\n      var fliesPathArr = res.tempFilePaths;\n      var maxSize = 1024 * 1024;\n      var picState = true;\n\n      if (!filesArr) {// 用于处理部分手机返回值为空的问题\n        Util.versionTip();\n        picState = false;\n        return;\n      }\n\n      // 验证size是否大于1M\n      filesArr.map(function (item, index) {\n        var size = item.size;\n\n        if (size > maxSize) {\n          wx.showModal({\n            content: '图片不能大于1M',\n            showCancel: false });\n\n          picState = false;\n          return false;\n        }\n      });\n\n      if (picState) {\n        fn && fn(fliesPathArr);\n      } else {\n        fn && fn(picState);\n      }\n    },\n    fail: function fail() {\n      console.log(__f__(\"已取消图片选择\", \" at utils/common.js:314\"));\n    } });\n\n}\n\n/**\r\n   * 控制按钮状态\r\n   */\nfunction setBtnState(formText, that) {\n  var stateNum = 0;\n\n  formText.forEach(function (item) {\n    if (item == 1) stateNum++;\n  });\n\n  if (stateNum == formText.length) {\n    that.setData({\n      submitBtn: true });\n\n  } else {\n    that.setData({\n      submitBtn: false });\n\n  }\n}\n\n\n/**\r\n   * 倒计时\r\n   */\nfunction downTime(that) {\n  var backTime = parseInt(that.data.backTime);\n  setBackTime();\n\n  function setBackTime() {\n    backTime--;\n    that.setData({\n      backTime: backTime });\n\n    if (backTime <= 0 || that.data.backTimeState) {\n      that.setData({\n        validateCod: !that.data.validateCod,\n        backTime: 60,\n        backTimeState: false });\n\n      return false;\n    }\n    setTimeout(setBackTime, 1000);\n  }\n}\n\n/**\r\n   * 价格补零\r\n   */\nfunction supZero(price) {\n  if (price) {\n    var sPrice = price.toString();\n\n    if (sPrice.indexOf(\".\") != -1) {\n      var newPrice = sPrice.split('.');\n      if (!newPrice[1]) {// 有. 没有数\n        sPrice += \"00\";\n      } else if (newPrice[1].length == 1) {// 有. 有一位数\n        sPrice += \"0\";\n      }\n    } else {\n      sPrice += \".00\";\n    }\n    return sPrice;\n  }\n  return price;\n}\n\n/**\r\n   * 打 * 函数\r\n   */\nfunction setStar(str, bNum, aNum) {\n  var oStr = '';\n  if (str) {\n    oStr = str.toString();\n\n    var nStr = '';\n    var nANum = oStr.length - aNum;\n\n    nStr += oStr.substring(0, bNum);\n    for (var i = bNum; i < nANum; i++) {\n      nStr += '*';\n    }\n    nStr += oStr.substring(nANum, oStr.length);\n\n    return nStr;\n  } else {\n    return oStr;\n  }\n}\n\n/**\r\n   * 每个几个字符加空格 函数\r\n   */\nfunction setSpace(str, num) {\n  var nStr = '';\n  var firstIndex = 0;\n  var endIndex = 4;\n  var len = Math.ceil(str.length / 4);\n\n  for (var i = 0; i < len; i++) {\n    if (i < len - 1) {\n      nStr += str.substring(firstIndex, endIndex) + ' ';\n    } else {\n      nStr += str.substring(firstIndex, endIndex);\n    }\n    firstIndex = endIndex;\n    endIndex = endIndex + num;\n  }\n  return nStr;\n}\n\n/**\r\n   * 每个几个数字加逗号 函数\r\n   */\nfunction setComma(num) {\n  var num = (num || 0).toString();\n  var result = '';\n  while (num.length > 3) {\n    result = ',' + num.slice(-3) + result;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {result = num + result;}\n  return result;\n}\n\n/**\r\n   * 判断点击认证进入的页面\r\n   */\nfunction goApprovePage(that) {\n  var approveUrl = [\"../user-approve/approve\", \"../c-approve/private\", \"../c-approve/public\"];\n  var applyType = that.data.applyType;\n  var appState = that.data.appState;\n  var changePage = that.data.changePage;\n\n  if (appState == 2 && applyType == 1 || appState == 2 && applyType == 0 && changePage) {\n    changePageFalse(that);\n    // 个人认证填写页\n    wx.navigateTo({\n      url: approveUrl[1] });\n\n  } else if (appState == 2 && applyType == 2 && changePage) {\n    changePageFalse(that);\n    // 企业认证填写页\n    wx.navigateTo({\n      url: approveUrl[2] + \"?only=true\" });\n\n  } else if (appState == 0 && changePage) {\n    changePageFalse(that);\n    // 企业认证、个人认证选择页\n    wx.navigateTo({\n      url: approveUrl[0] });\n\n  } else if (appState == 3 && applyType == 1 && changePage) {\n    changePageFalse(that);\n    // 企业认证填写页\n    wx.navigateTo({\n      url: approveUrl[2] + \"?only=true\" });\n\n  }\n}\n\n/**\r\n   * 银行账号对比，是否重复添加\r\n   */\nfunction toCompareBank(bankArr, bankNum) {\n  var BBank = true;\n\n  if (bankArr.length < 1) return BBank;\n\n  bankArr.map(function (item) {\n    if (item == bankNum) {\n      Util.showModal(\"绑定提示\", \"您已添加过该账户，请换一个账户\");\n      BBank = false;\n    }\n  });\n  return BBank;\n}\n\n/**\r\n   * 设置银行logo、判断银行是否停用\r\n   * bank1：付款储蓄卡列表、收款卡列表\r\n   * bank2：付款信用卡列表\r\n   */\nfunction getBankLogo(bankArr, str, bank1, bank2) {\n  var bankList = [];\n\n  if (bankArr.length < 1) return;\n\n  if (str == \"pay\") {\n    bankArr.map(function (item) {\n      if (item.cardType == 10) {\n        // bankList = wx.getStorageSync(\"paySaveList\");\n        setBankLogo(item, bank1);\n\n      } else {\n        // bankList = wx.getStorageSync(\"payCreditList\");\n        setBankLogo(item, bank2);\n      }\n    });\n  } else if (str = \"cash\") {\n    // bankList = wx.getStorageSync(\"cashBankList\");\n\n    bankArr.map(function (item, index) {\n      setBankLogo(item, bank1);\n    });\n  }\n}\n\n/**\r\n   * 设置银行的logo、是否停用等\r\n   */\nfunction setBankLogo(item, bankList) {\n  item.bStop = false;\n\n  if (bankList.length < 1) return;\n\n  bankList.map(function (list, j) {\n    if (trim(item.bankId) == trim(list.code)) {\n      item.logo = list.logo;\n      item.bStop = true;\n      item.limitOnce = list.limitOnce; // 单日限额\n      item.limitDay = list.limitDay;\n      getBankOverNum(item);\n      getBankAccount(item);\n    }\n  });\n}\n\n/**\r\n   * 功能：截取银行卡号后四位\r\n   * 参数：获取到的银行列表数组不同索引的对象\r\n   */\nfunction getBankOverNum(item) {\n  var len = item.accountNumber.length;\n  item.overNum = item.accountNumber.substring(len - 4, len);\n}\n\n/**\r\n   * 功能：返回拼接后的银行账户\r\n   * 参数：获取到的银行列表数组不同索引的对象\r\n   */\nfunction getBankAccount(item) {\n  item.sBankVal = \"\".concat(item.bankName).concat(item.cardType == 10 ? '储蓄卡' : '信用卡', \"(\").concat(item.overNum, \")\");\n}\n\n/**\r\n   * 信用卡费率计算\r\n   */\nfunction getRate(amount, PayRateNum) {\n  var nAmount = amount * 100 * PayRateNum / 1000000;\n  var arr = nAmount.toString().split(\".\");\n  var price = 0;\n\n  price = nAmount.toFixed(2);\n\n  // if (arr[1].substring(0,2) > 0) {\n  // 如果小数位超过3位\n  // if (arr.length > 1 && arr[1].length > 3 && arr[1].substring(2, 3) < 5) {\n  //   console.log(\"price\")\n  //   price = (price * 100 + 1)/100;\n  // }\n  // }\n\n  return supZero(Number(price));\n}\n\n//数字四舍五入\nfunction forDight(Dight, How) {\n  Dight = Math.round(Dight * Math.pow(10, How)) / Math.pow(10, How);\n  return Dight;\n}\nfunction setPositionQuality(item) {\n  if (item == 1) {\n    return '一般订单';\n  } else if (item == 2) {\n    return '市场货';\n  } else if (item == 3) {\n    return '高级订单';\n  } else if (item == 4) {\n    return '品牌订单';\n  } else {\n    return '';\n  }\n}\nfunction setGlossLongitude(item) {\n  if (item == 1) {\n    return '消光';\n  } else if (item == 2) {\n    return '半光';\n  } else if (item == 3) {\n    return '半消光';\n  } else if (item == 4) {\n    return '有光';\n  } else {\n    return '';\n  }\n}\nmodule.exports = {\n  showLoading: showLoading,\n  hideLoading: hideLoading,\n  showLoad: showLoad,\n  hideLoad: hideLoad,\n  setLoadFalse: setLoadFalse,\n  setLoadTrue: setLoadTrue,\n  changePageFalse: changePageFalse,\n  changePageTrue: changePageTrue,\n  changeGloss: changeGloss,\n  changeVal: changeVal,\n  pinImgUrl: pinImgUrl,\n  pinImgSmallUrl: pinImgSmallUrl,\n  pinImgMiddleUrl: pinImgMiddleUrl,\n  pinPreImg: pinPreImg,\n  pinPreSmallImg: pinPreSmallImg,\n  imgPreload: imgPreload,\n  onWindowH: onWindowH,\n  getToken: getToken,\n  pinFormId: pinFormId,\n  addPic: addPic,\n  setBtnState: setBtnState,\n  downTime: downTime,\n  supZero: supZero,\n  setStar: setStar,\n  setSpace: setSpace,\n  setComma: setComma,\n  goApprovePage: goApprovePage,\n  toCompareBank: toCompareBank,\n  getBankLogo: getBankLogo,\n  getBankAccount: getBankAccount,\n  getRate: getRate,\n  forDight: forDight,\n  setPositionQuality: setPositionQuality,\n  setGlossLongitude: setGlossLongitude };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/pipe.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _require =\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__webpack_require__(/*! ./const.js */ 26),QUALITY = _require.QUALITY,POSITION = _require.POSITION,GLOSS = _require.GLOSS,STOCK_TYPES = _require.STOCK_TYPES,BUY_ORDER = _require.BUY_ORDER,BUY_BACK_ORDER = _require.BUY_BACK_ORDER,SELL_ORDER = _require.SELL_ORDER,COMPLETE = _require.COMPLETE,COST_PERFORMANCE = _require.COST_PERFORMANCE,REAL_RATE = _require.REAL_RATE,BREAK_OUT = _require.BREAK_OUT,STOP_BRIGHT = _require.STOP_BRIGHT,STOP_DIM = _require.STOP_DIM,DARK_STRIP = _require.DARK_STRIP;\n\nfunction formatTime(date) {\n  if (date) {\n    var oDate = date.slice(0, date.indexOf(\".\")); // 截取时间戳 . 前面的数\n\n    oDate = oDate.replace(/T/g, ' ').replace(/(-)/g, '/');\n\n    var nDate = new Date(oDate);\n\n    var year = nDate.getFullYear();\n    var month = nDate.getMonth() + 1;\n    var day = nDate.getDate();\n\n    var h = nDate.getHours();\n    var m = nDate.getMinutes();\n    var s = nDate.getSeconds();\n    console.log(__f__(h, m, s, \" at utils/pipe.js:33\"));\n    return [year, month, day].map(formatNumber).join('-');\n    //  + ' ' + [hour, minute, second].map(formatNumber).join(':')\n  } else {\n    return '';\n  }\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\n/**\r\n   * 返回key所对应的值\r\n   */\nfunction change(obj, num) {\n  var value = '';\n  var n = parseInt(num);\n  obj.map(function (item) {\n    if (item.key == num) value = item.value;\n  });\n  return value;\n}\n/**\r\n   * 返回key所对应的值\r\n   */\nfunction changeMore(obj, num) {\n  if (num) {\n    var value = [];\n    var n = parseInt(num);\n    obj.map(function (item) {\n      if (item.key & num) {\n        value.push(item.value);\n      }\n    });\n    return value.join('、');\n  }\n}\n\n/**\r\n   * 品质要求\r\n   */\nfunction pipeQuality(num) {\n  return changeMore(QUALITY, num);\n}\n\n/**\r\n   * 品质定位\r\n   */\nfunction pipePosition(num) {\n  return changeMore(POSITION, num);\n}\n\n/**\r\n   * 特性\r\n   */\nfunction pipeGloss(num) {\n  return changeMore(GLOSS, num);\n}\n\n/**\r\n   * 现货详情-库存状态\r\n   */\nfunction pipeStock(num) {\n  return changeMore(STOCK_TYPES, num);\n}\n\n/**\r\n   * 找布状态\r\n   */\nfunction pipeStatus(num) {\n  var newNum = parseInt(num);\n  var sI = 0; // 状态\n\n  if (newNum == 1) {\n    sI = 0;\n  } else if (newNum == 2) {\n    sI = 1;\n  } else if (newNum == 4) {\n    sI = 2;\n  } else if (newNum < 0) {\n    sI = 3;\n  }\n  return sI;\n}\n\n/**\r\n   * 认证状态\r\n   */\nfunction approveState(oData) {\n  // currentType：0: 未认证；1: 个人认证；2: 企业认证\n  // status：0: 认证中；1: 认证通过；2: 认证失败\n  // applyType：1：个人认证中；2：企业认证中\n\n  // 未认证：404\n  // 个人认证-审核中 status:0 currentType:null\n  // 个人认证失败-重新审核 status:2 currentType:null（0）\n  // 个人认证-通过：status:1 currentType:1\n  // 企业认证-审核中：status:0 currentType:null\n  // 企业认证 status:1 currentType:2\n  // 企业认证失败-重新审核：status:2 currentType:0\n  var current = oData.currentType;\n  var state = oData.status;\n\n  if (state == 0) {\n    return 1; // 认证中\n  } else if (state == 2) {\n    return 2; // 认证失败，重新认证\n  } else if (current == 1 && state == 1) {\n    return 3; // 个人认证\n  } else if (current == 2 && state == 1) {\n    return 4; // 企业认证\n  } else {\n    return 0;\n  }\n}\n\n\n/**\r\n   * 采购订单状态转换\r\n   *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n   *    分状态(总状态：1)：1：待支付；2：支付处理中；3：待结算；4：结算处理中；5：待收货；6：订单完成;9:买家支付中\r\n   */\nfunction changeBuyState(obj) {\n\n  var oState = 1;\n  var stateText = \"\";\n  var buyState = obj.buyOrder.status;\n\n  // if (obj.status == 1) { // 订单处理中\n\n  // }\n  // else \n  if (obj.status == 2) {// 取消订单\n    if (buyState == 3 && !obj.buyOrder.refundBankId) {\n      oState = -1;\n    } else if (buyState == 3 && obj.buyOrder.refundBankId) {\n      oState = -4;\n    } else {\n      oState = buyState == -4 ? buyState : buyState == -5 ? buyState : -1;\n    }\n    stateText = buyBackOrderState(oState);\n  } else {\n    oState = buyState;\n    stateText = buyOrderState(oState);\n  }\n  // else if (obj.status == 3) { // 完成订单\n  //   oState = buyState == 7 ? buyState : 9;\n  //   stateText = buyState == 7 ? \"线下订单\" : \"订单完成\";\n  // }\n\n  return {\n    state: oState,\n    text: stateText };\n\n}\n\n\n\n/**\r\n   * 销售订单状态转换\r\n   *    总状态(item.status)：1：正常；2：取消；3：完成\r\n   *    分状态(item.sellOrder.status)：1：等待代付；2：代付处理中；3：待发货；4：订单完成\r\n   */\nfunction changeSellState(obj) {\n  var oState = 1;\n  var stateText = \"\";\n  var sellState = obj.sellOrder.status;\n\n  if (obj.status == 1 || obj.status == 3) {\n    oState = sellState;\n    stateText = obj.sellOrder.cardid == null && sellState == 1 ? \"待确认\" : sellOrderState(sellState);\n  } else if (obj.status == 2) {\n    oState = -1;\n    stateText = \"订单已取消\";\n  }\n  //  else if (obj.status == 3) {\n  //   oState = sellState == 5 ? sellState : 9;\n  //   stateText = sellState == 5 ? \"线下订单\" : \"订单完成\"\n  // }\n\n  return {\n    state: oState,\n    text: stateText };\n\n}\n\n\n\n\n/**\r\n   * 交易订单--状态转换\r\n   */\n// 采购订单\nfunction buyOrderState(state) {\n  return change(BUY_ORDER, state);\n}\n// 采购退款订单\nfunction buyBackOrderState(state) {\n  return change(BUY_BACK_ORDER, state);\n}\n// 销售订单\nfunction sellOrderState(state) {\n  return change(SELL_ORDER, state);\n}\n\n/**\r\n   * 订单流水--退款结果\r\n   */\nfunction pipeComplete(state) {\n  return change(COMPLETE, state);\n}\n\n\n/**\r\n   * 采购订单评价--性价比\r\n   */\nfunction pipeCost(num) {\n  return changeMore(COST_PERFORMANCE, num);\n}\n/**\r\n   * 采购订单评价--实码率\r\n   */\nfunction pipeReal(num) {\n  return changeMore(REAL_RATE, num);\n}\n/**\r\n   * 采购订单评价--断经、断纬\r\n   */\nfunction pipeBreak(num) {\n  return changeMore(BREAK_OUT, num);\n}\n/**\r\n   * 采购订单评价--停车明档\r\n   */\nfunction pipeBright(num) {\n  return changeMore(STOP_BRIGHT, num);\n}\n/**\r\n   * 采购订单评价--停车暗档\r\n   */\nfunction pipeDim(num) {\n  return changeMore(STOP_DIM, num);\n}\n/**\r\n   * 采购订单评价--暗条\r\n   */\nfunction pipeDark(num) {\n  return changeMore(DARK_STRIP, num);\n}\n\n// 获取时间戳\nfunction getTimeStamp() {\n  var myDate = new Date();\n  var Y = myDate.getFullYear().toString().slice(2);\n  var M = myDate.getMonth() + 1 < 10 ? \"0\" + (myDate.getMonth() + 1) : (myDate.getMonth() + 1).toString();\n  var D = myDate.getDate() < 10 ? \"0\" + myDate.getDate() : myDate.getDate().toString();\n  var h = myDate.getHours().toString();\n  var m = myDate.getMinutes().toString();\n  var s = myDate.getSeconds() < 10 ? \"0\" + myDate.getSeconds() : myDate.getSeconds().toString();\n  var ms = myDate.getMilliseconds() < 10 ? \"00\" + myDate.getMilliseconds() : myDate.getMilliseconds() < 100 ? \"0\" + myDate.getMilliseconds() : myDate.getMilliseconds();\n  var timeId = Y + M + D + h + m + s + ms;\n  return timeId;\n}\nfunction timeName(time) {\n  if (!time) {\n    return '';\n  }\n  var myDate = new Date(time);\n  var Y = myDate.getFullYear().toString();\n  var M = myDate.getMonth() + 1 < 10 ? \"0\" + (myDate.getMonth() + 1) : (myDate.getMonth() + 1).toString();\n  var D = myDate.getDate() < 10 ? \"0\" + myDate.getDate() : myDate.getDate().toString();\n  var h = myDate.getHours() < 10 ? \"0\" + myDate.getHours() : myDate.getHours().toString();\n  var m = myDate.getMinutes() < 10 ? \"0\" + myDate.getMinutes() : myDate.getMinutes().toString();\n  var s = myDate.getSeconds() < 10 ? \"0\" + myDate.getSeconds() : myDate.getSeconds().toString();\n  var timeId = Y + '-' + M + '-' + D + ' ' + h + ':' + m + ':' + s;\n  return timeId;\n}\n\n// 设置时间\nfunction setTime(time) {\n  if (time && time.indexOf(\"T\") != -1) {\n    var date = new Date(time),\n    Y = date.getFullYear() + '-',\n    M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-',\n    D = date.getDate() < 10 ? '0' + date.getDate() + ' ' : date.getDate() + ' ',\n    h = date.getHours() < 10 ? '0' + date.getHours() + ':' : date.getHours() + ':',\n    m = date.getMinutes() < 10 ? '0' + date.getMinutes() + ':' : date.getMinutes() + ':',\n    s = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\n    console.log(__f__(\"data\", date, \" at utils/pipe.js:323\"));\n    return Y + M + D + h + m + s;\n  } else {\n    return time;\n  }\n}\nmodule.exports = {\n  formatTime: formatTime,\n  pipeStatus: pipeStatus,\n  pipeQuality: pipeQuality,\n  pipePosition: pipePosition,\n  pipeGloss: pipeGloss,\n  pipeStock: pipeStock,\n  approveState: approveState,\n  changeBuyState: changeBuyState,\n  changeSellState: changeSellState,\n  buyOrderState: buyOrderState,\n  buyBackOrderState: buyBackOrderState,\n  sellOrderState: sellOrderState,\n  pipeComplete: pipeComplete,\n  getTimeStamp: getTimeStamp,\n  // 采购订单评价\n  pipeCost: pipeCost,\n  pipeReal: pipeReal,\n  pipeBreak: pipeBreak,\n  pipeBright: pipeBright,\n  pipeDim: pipeDim,\n  pipeDark: pipeDark,\n  timeName: timeName,\n  setTime: setTime };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!*****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/const.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\r\n               * 品质要求\r\n               */\nvar QUALITY = [\n{ key: 1 << 3, value: '包染色' },\n{ key: 1 << 2, value: '染白色' },\n{ key: 1 << 1, value: '染黑色' },\n{ key: 1, value: '不包染色' }];\n\n\n/** 品质定位\r\n                             * \r\n                             */\nvar POSITION = [\n{ key: 1, value: '品牌订单' },\n{ key: 1 << 1, value: '高级订单' },\n{ key: 1 << 2, value: '一般订单' },\n{ key: 1 << 3, value: '市场订单' }];\n\n\n/** 特性\r\n                                  * \r\n                                  */\nvar GLOSS = [\n{ key: 1 << 2, value: '有光' },\n{ key: 1 << 1, value: '半光' },\n{ key: 1, value: '消光' }];\n\n\n/**\r\n                           * 库存状态\r\n                           */\nvar STOCK_TYPES = [\n{ key: 1, value: '有现货并生产中' },\n{ key: 1 << 1, value: '有现货' },\n{ key: 1 << 2, value: '生产中' },\n{ key: 1 << 3, value: '可定织' },\n{ key: 1 << 4, value: '已售罄' }];\n\n\n/** 采购订单\r\n                                 *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n                                 *    分状态(总状态：1)：1：待支付；2：支付处理中；3：待结算；4：结算处理中；5：待收货；6：订单完成;9:买家支付中\r\n                                 */\nvar BUY_ORDER = [\n{ key: 1, value: \"待支付\" },\n{ key: 2, value: \"已支付，银行处理中\" },\n{ key: 3, value: \"支付成功\" },\n{ key: 4, value: \"支付成功\" },\n{ key: 5, value: \"待收货\" },\n{ key: 6, value: \"已收货\" },\n{ key: 7, value: \"线下订单\" },\n{ key: 8, value: \"订单完成\" },\n{ key: 9, value: \"支付中\" }];\n\n\n/**\r\n                            * 采购订单\r\n                            *    总状态：1：正常；2：取消(0)；3：完成(7)\r\n                            *    分状态(总状态：2)：-4：退款中；-5：已退款\r\n                            */\nvar BUY_BACK_ORDER = [\n{ key: -1, value: \"订单已取消\" },\n// { key: -3, value: \"待退款\" },\n{ key: -4, value: \"退款中\" },\n{ key: -5, value: \"已退款\" }];\n\n\n/** \r\n                             * 销售订单\r\n                             *    总状态：1：正常；2：取消；3：完成\r\n                             *    分状态：1：等待代付；2：代付处理中；3：待发货；4：订单完成\r\n                             * \r\n                             *    待确认；已确认；买家已支付，待发货；已发货；订单完成；订单已取消\r\n                             */\nvar SELL_ORDER = [\n{ key: 1, value: \"已确认\" },\n{ key: 2, value: \"已确认\" },\n{ key: 3, value: \"买家已支付，待发货\" },\n{ key: 4, value: \"已发货\" },\n{ key: 5, value: \"线下订单\" },\n{ key: 6, value: \"订单完成\" }];\n\n\n/**\r\n                             * 订单退款结果\r\n                             */\nvar COMPLETE = [\n{ key: -1, value: \"退款失败\" },\n{ key: 0, value: \"退款中\" },\n{ key: 1, value: \"退款成功\" }];\n\n\n\n/**\r\n                             * 采购订单评价--性价比\r\n                             */\nvar COST_PERFORMANCE = [\n{ key: 1, value: '性价比偏高' },\n{ key: 1 << 1, value: '性价比合理' },\n{ key: 1 << 2, value: '性价比偏低' }];\n\n\n/**\r\n                                   * 采购订单评价--实码率\r\n                                   */\nvar REAL_RATE = [\n{ key: 1, value: '实码率正常' },\n{ key: 1 << 1, value: '实码率偏低' }];\n\n\n/**\r\n                                   * 采购订单评价--断经、断纬\r\n                                   */\nvar BREAK_OUT = [\n{ key: 1, value: '断经、断纬偶尔' },\n{ key: 1 << 1, value: '断经、断纬较多' },\n{ key: 1 << 2, value: '断经、断纬多' }];\n\n\n/**\r\n                                    * 采购订单评价--停车明档\r\n                                    */\nvar STOP_BRIGHT = [\n{ key: 1, value: '停车明档偶尔' },\n{ key: 1 << 1, value: '停车明档较多' },\n{ key: 1 << 2, value: '停车明档多' }];\n\n\n/**\r\n                                   * 采购订单评价--停车暗档\r\n                                   */\nvar STOP_DIM = [\n{ key: 1, value: '停车暗档偶尔' },\n{ key: 1 << 1, value: '停车暗档较多' },\n{ key: 1 << 2, value: '停车暗档多' }];\n\n\n/**\r\n                                   * 采购订单评价--暗条\r\n                                   */\nvar DARK_STRIP = [\n{ key: 1, value: '暗条偶尔' },\n{ key: 1 << 1, value: '暗条较多' },\n{ key: 1 << 2, value: '暗条多' }];\n\n\nmodule.exports = {\n  QUALITY: QUALITY,\n  POSITION: POSITION,\n  GLOSS: GLOSS,\n  STOCK_TYPES: STOCK_TYPES,\n  BUY_ORDER: BUY_ORDER,\n  BUY_BACK_ORDER: BUY_BACK_ORDER,\n  SELL_ORDER: SELL_ORDER,\n  COMPLETE: COMPLETE,\n\n  // 采购订单评价\n  COST_PERFORMANCE: COST_PERFORMANCE,\n  REAL_RATE: REAL_RATE,\n  BREAK_OUT: BREAK_OUT,\n  STOP_BRIGHT: STOP_BRIGHT,\n  STOP_DIM: STOP_DIM,\n  DARK_STRIP: DARK_STRIP };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!****************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/utils/util.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var Api = __webpack_require__(/*! services/config/api.js */ 23);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 28);\n\n\n/**\n                                                 * 封封微信的的request\n                                                 */\nvar bool = true;\nfunction request(url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"GET\";\n  var loginApi = Api.AuthLoginByWeixin;\n  return new Es6Promise(function (resolve, reject) {\n    wx.request({\n      url: url,\n      data: data,\n      method: method,\n      header: {\n        'Content-Type': 'application/json',\n        // 'Authorization': \"Bearer \"+ wx.getStorageSync('token')\n        'MYTK': wx.getStorageSync('token') },\n\n      success: function success(res) {\n\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res);\n        }\n        // 重新登录\n        else if (res.statusCode == 401 && url.indexOf(loginApi) == -1) {\n            var loginOn = wx.getStorageSync(\"loginOn\");\n\n            if (!loginOn) {\n              wx.setStorageSync(\"loginOn\", true);\n\n              //需要登录后才可以操作\n              var code = null;\n              return login().then(function (res) {\n                code = res.code;\n                return getUserInfo();\n              }).then(function (userInfo) {\n\n                wx.setStorageSync(\"rawData\", userInfo.rawData);\n                wx.setStorageSync(\"signature\", userInfo.signature);\n\n                // 重新登录，登录远程服务器\n                request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'POST').then(function (res) {\n                  wx.setStorageSync(\"loginOn\", false);\n\n                  if (res.data.code == 200) {\n                    if (res.data.sessionKey) {\n                      wx.setStorageSync(\"sessionKey\", res.data.sessionKey);\n                    }\n\n                    // 存储用户信息\n                    wx.setStorageSync('userInfo', res.data.userInfo);\n                    wx.setStorageSync('token', res.data.token);\n\n                    // 获取用户认证信息\n                    // getApproveData();\n                    // 获取支持的银行卡\n                    // getSupportBank();\n                    // 获取当前页面的路径\n                    var getPage = getCurrentPages();\n\n                    // 拼接当前页面路径\n                    var pageRoute = \"/\".concat(getPage[getPage.length - 1].route);\n                    var pageOptions = getPage[getPage.length - 1].options;\n                    var nStr = \"\";\n                    // 当前路径拼接\n                    for (var attr in pageOptions) {\n                      nStr += \"&\".concat(attr, \"=\").concat(pageOptions[attr]);\n                    }\n                    var pageUrl = pageRoute + nStr.replace('&', '?');\n\n                    if (wx.reLaunch) {\n                      wx.reLaunch({\n                        url: pageUrl });\n\n                    } else {\n                      wx.switchTab({\n                        url: '/pages/tab-index/index' });\n\n                    }\n                  } else {\n                    reject(res);\n                  }\n                }).catch(function (err) {\n                  wx.setStorageSync(\"loginOn\", false);\n                  reject(err);\n                });\n\n              }).catch(function (err) {\n                wx.setStorageSync(\"loginOn\", false);\n                reject(err);\n              });\n            }\n          }\n          // 无权限\n          else if (res.statusCode == 403) {\n              // backIndexPageModal(\"很抱歉，你没有查看权限\");\n              reject(res);\n            } else\n            {\n              reject(res);\n            }\n      },\n      fail: function fail(err) {\n        reject(err);\n\n        if (bool) {\n          bool = false;\n          wx.getNetworkType({\n            success: function success(res) {\n              // 判断有没有网络\n              if (res.networkType == \"none\") {\n                showModal(\"网络连接失败，请检测网络是否正常\", function () {\n                  bool = true;\n                });\n              } else {\n                if (err.errMsg.indexOf(\"timeout\") != -1) {\n                  showModal(\"请求超时，请重新请求！\", function () {\n                    bool = true;\n                  });\n                } else {\n                  showModal(err.errMsg, function () {\n                    bool = true;\n                  });\n                }\n              }\n            } });\n\n        }\n      } });\n\n  });\n}\n\n/**\n   * banner跳转\n   */\n\n// const bannerJumpRequest = (title,orderNo,picId,type,info,startDate,endDate,status) =>{\n//   var url = Api.bannerJump + \"\"\n//   var data = {\n//     title:title,\n//     orderNo:orderNo,\n//     picId:picId,\n//     type:type,\n//     info:info,\n//     startDate: startDate,\n//     endDate: endDate,\n//     status: status,\n//   }\n//   request(url,data,\"POST\")\n// }\n\n// const commentRequest = (url,data={},method=\"GET\") =>{\n//   var url = `${Api.guestComment}?page=1&size=5`\n//   var data = {\n\n//   }\n//   request(url,data,\"GET\")\n// }\n\n// const jumpMpRequest = (m_appid, headerTokne, contentType, end_method)=>{\n//   var url = Api.tiaozhuan\n//   var data={\n//     m_appid: \"wxfa94ddf446523122\",\n//     method: \"POST\",\t\n//     headerTokne: \"\",\n//     contentType: \"application/json\",\n//     end_method: \"/wx/carte/user/receiveData\"\n//   }\n//   request(url,data,\"POST\")\n// }\nvar showToast = function showToast(str) {\n  wx.showToast({\n    title: str,\n    image: '/images/icon-alert.png' });\n\n};\nvar showLoading = function showLoading(str) {\n  wx.showLoading({\n    title: str,\n    mask: true });\n\n};\n\n\n/**\n    * photo upload \n    */\nfunction uploadPic(filePath) {\n  return new Es6Promise(function (resolve, reject) {\n    var uploadTask = wx.uploadFile({\n      url: Api.PicUpload, //仅为示例，非真实的接口地址\n      filePath: filePath,\n      name: 'file',\n      header: {\n        'Authorization': \"Bearer \" + wx.getStorageSync('token') },\n\n      formData: {\n        'user': 'test' },\n\n      success: function success(res) {\n        resolve(res);\n        var data = res.data;\n\n        //do something\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n\n    // uploadTask.onProgressUpdate((res) => {\n    //   console.log(filePath+'上传进度', res.progress)\n    //   console.log(filePath+'已经上传的数据长度', res.totalBytesSent)\n    //   console.log(filePath+'预期需要上传的数据总长度', res.totalBytesExpectedToSend)\n    // })\n  });\n\n}\n\n\n/**\n   * 已经选中的图片上传 array\n   */\nfunction uploadPics(photoList) {\n  return new Es6Promise(function (resolve, reject) {\n    var picArray = photoList;\n    var photoJsonArray = [];\n    if (picArray.length != 0) {\n      for (var i = 0; i < picArray.length; i++) {\n        uploadPic(picArray[i]).then(function (res) {\n          photoJsonArray.push(JSON.parse(res.data));\n          //console.dir(res.data);\n          //console.dir(photoJsonArray);\n          if (photoJsonArray.length == picArray.length) {\n            resolve(photoJsonArray);\n          }\n        }).catch(function (err) {\n          // util.showToast(\"图片上传失败\");\n          reject(err);\n          return;\n        });\n      }\n    } else {\n      resolve([]);\n    }\n  });\n}\n\n/**\n   * 下载图片\n   */\nfunction downloadFile(imgUrl) {\n  return new Es6Promise(function (resolve, reject) {\n    wx.downloadFile({\n      url: imgUrl,\n      success: function success(res) {\n        if (res.statusCode === 200) {\n          resolve(res.tempFilePath);\n        } else {\n          reject();\n        }\n      },\n      fail: function fail(err) {\n        reject();\n      } });\n\n  });\n}\n\n/**\n   * 检查微信会话是否过期\n   */\nfunction checkSession() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.checkSession({\n      success: function success() {\n        resolve(true);\n      },\n      fail: function fail() {\n        reject(false);\n      } });\n\n  });\n}\n\n/**\n   * 调用微信登录\n   */\nfunction login() {\n  return new Es6Promise(function (resolve, reject) {\n    wx.login({\n      success: function success(res) {\n        if (res.code) {\n          //登录远程服务器\n          resolve(res);\n        } else {\n          reject(res);\n        }\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n\n/**\n   * 获取微信用户信息\n   */\nfunction getUserInfo() {\n  return new Es6Promise(function (resolve, reject) {\n    // 查看是否授权\n    // console.log('查看用户是否授权')\n    if (wx.getSetting) {\n      var getPages = getCurrentPages();\n      var page = getPages[getPages.length - 1];\n\n      wx.getSetting({\n        success: function success(getRes) {\n          if (getRes.authSetting['scope.userInfo']) {\n            wx.getUserInfo({\n              withCredentials: true,\n              success: function success(userRes) {\n                resolve(userRes);\n              },\n              fail: function fail(userErr) {\n                console.log(__f__(userErr, 'userInfo', \" at utils/util.js:330\"));\n                reject(err);\n              } });\n\n          } else {\n            page.setData({\n              userAuthor: true });\n\n            // console.log('用户需要授权');\n          }\n        },\n        fail: function fail(err) {\n          page.setData({\n            userAuthor: true });\n\n          console.log(__f__(\"调用 wx.getSetting 方法失败\", err, \" at utils/util.js:345\"));\n        } });\n\n    } else {\n      showModal('当前微信版本暂不支持 wx.getSetting 方法，请升级微信版本！');\n    }\n  });\n}\n\n/**\n   * 重新登录\n   */\nfunction loginAgain() {\n  var code = null;\n  login().then(function (res) {\n    code = res.code;\n    return getUserInfo();\n  }).then(function (userInfo) {\n\n    wx.setStorageSync(\"rawData\", userInfo.rawData);\n    wx.setStorageSync(\"signature\", userInfo.signature);\n\n    // 重新登录，登录远程服务器\n    request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'POST').then(function (res) {\n      if (res.statusCode == 200) {\n        var newData = res.data;\n\n        if (newData.sessionKey) {\n          wx.setStorageSync(\"sessionKey\", newData.sessionKey);\n        }\n\n        // 存储用户信息\n        wx.setStorageSync('userInfo', newData.userInfo);\n        wx.setStorageSync('token', newData.token);\n\n        // 获取当前页面的路径\n        var getPage = getCurrentPages();\n        var nowPage = getPage[getPage.length - 1];\n\n        // 用户已注册\n        if (newData.token && newData.userInfo.company && newData.userInfo.phone) {\n          // 拼接当前页面路径\n          var pageRoute = \"/\".concat(nowPage.route);\n          var pageOptions = nowPage.options;\n          var nStr = \"\";\n          // 当前路径拼接\n          for (var attr in pageOptions) {\n            nStr += \"&\".concat(attr, \"=\").concat(pageOptions[attr]);\n          }\n          var pageUrl = pageRoute + nStr.replace('&', '?');\n\n          // 执行当前页面的 onLoad 事件\n          // nowPage.onLoad(nowPage.options);\n          if (wx.reLaunch) {\n            wx.reLaunch({\n              url: pageUrl });\n\n          } else {\n            wx.switchTab({\n              url: '/pages/tab-index/index' });\n\n          }\n        }\n        // 用户未注册\n        else if (newData.token) {\n            var AppData = getApp().globalData;\n            AppData.regPage.route = nowPage.route;\n            AppData.regPage.opt = nowPage.options;\n\n            if (wx.reLaunch) {\n              // wx.reLaunch({\n              //   url: '/pages/public/authorize',\n              // })\n            } else {\n                // wx.redirectTo({\n                //   url: '/pages/public/authorize',\n                // })\n              }\n          }\n      } else {\n        showModal(\"登录服务器失败\");\n        // reject(res);\n      }\n    }).catch(function (err) {\n      showModal(\"登录服务器失败\");\n      // reject(err);\n    });\n  }).catch(function (err) {\n    showModal(\"登录服务器失败\");\n  });\n}\n\n/**\n   * 判断是否进入注册页\n   */\nfunction goRegPage() {\n  var AppData = getApp().globalData;\n  var userInfo = wx.getStorageSync(\"userInfo\");\n\n  // 用户未注册\n  if (!userInfo.company || !userInfo.phone) {\n    // 获取当前页面的路径\n    var getPage = getCurrentPages();\n    var nowPage = getPage[getPage.length - 1];\n\n    AppData.regPage.route = nowPage.route;\n    AppData.regPage.opt = nowPage.options;\n\n    if (wx.reLaunch) {\n      // wx.reLaunch({\n      //   url: '/pages/public/authorize',\n      // })\n    } else {\n        // wx.redirectTo({\n        //   url: '/pages/public/authorize',\n        // })\n      }\n    return false;\n  } else {\n    return true;\n  }\n}\n\n/**\n   * 微信是否授权判断\n   */\n// function scopeWChat() {\n// return new Promise(function (resolve, reject) {\n//   let token = wx.getStorageSync(\"token\");\n//   let scopeLogin = wx.getStorageSync('scopeLogin');\n\n//   if (!token && scopeLogin) {\n//     wx.getSetting({\n//       success: (res) => {\n//         let scopeInfo = res.authSetting['scope.userInfo'];\n\n//         // 是否授权\n//         if (scopeInfo) {\n//           resolve(true)\n//           wx.removeStorageSync(\"scopeLogin\");\n//         } else {\n//           reject(false);\n//         }\n//       }\n//     })\n//   }\n// })\n// }\n\n/**\n * 获取认证信息\n */\nfunction getApproveData() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      var approveApi = Api.UserApprove;\n\n      request(approveApi, {}, 'get').then(function (res) {\n        resolve(res);\n        wx.setStorageSync(\"approveInfo\", res.data);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取认证失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 获取支持的银行列表\n   */\nfunction getSupportBank() {\n  getPaySaveBank();\n  getPayCreditBank();\n  getCashBank();\n}\n\n/**\n   * 获取付款银行列表--储蓄卡\n   */\nfunction getPaySaveBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserPaySave).then(function (res) {\n        // 获取银行logo\n        var paySaveData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(paySaveData);\n        wx.setStorageSync(\"paySaveList\", paySaveData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取付款卡失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 获取付款银行列表--信用卡\n   */\nfunction getPayCreditBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserPayCredit).then(function (res) {\n        // 获取银行logo\n        var payCreditData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(payCreditData);\n        wx.setStorageSync(\"payCreditList\", payCreditData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取信用卡失败\");\n      });\n    }\n  });\n}\n\n\n/**\n   * 获取收款银行列表\n   */\nfunction getCashBank() {\n  return new Es6Promise(function (resolve, reject) {\n    var info = wx.getStorageSync('userInfo');\n\n    // 判断用户是否已经注册\n    if (info.phone) {\n      request(Api.UserCashBank).then(function (res) {\n        // 获取银行logo\n        var cashData = res.data.map(function (item) {\n          item.logo = item.logo ? \"\".concat(Api.ShowPic, \"/\").concat(item.logo, \"/download\") : null;\n          return item;\n        });\n        resolve(cashData);\n        wx.setStorageSync(\"cashBankList\", cashData);\n      }).catch(function (err) {\n        wx.hideLoading();\n        showModal(\"获取收款卡失败\");\n      });\n    }\n  });\n}\n\n/**\n   * 自动消失的提示框\n   */\nfunction showErrorToast(msg) {\n  wx.showToast({\n    title: msg,\n    duration: 2500,\n    image: '../../images/alert.png' });\n\n}\n\n/** \n   * 功能：modal 提醒框\n   * 参数：\n   *    第一个参数：当无第二个参数，为内容；有第二个参数，为标题\n   *    第二个参数：当参数类型为：string时，为内容；参数类型为function：为成功回调函数，并且不能传入第三个参数\n   *    第三个参数：成功回调的函数\n   * 例子：\n   *    showModal(\"内容\")\n   *    showModal(\"标题\", \"内容\")\n   *    showModal(\"内容\", function() { console.log(\"成功回调函数\") })\n   *    showModal(\"标题\", \"内容\", function() { console.log(\"成功回调函数\") })\n   */\nfunction showModal(oTitle, msg, fn) {\n  var sTitle = \"\";\n  var oFn = typeof msg == \"function\" ? msg : fn;\n  var sMsg = \"\";\n\n  if (msg != undefined && typeof msg == \"string\") {\n    sTitle = oTitle;\n    sMsg = msg;\n  } else {\n    sTitle = \"\";\n    sMsg = oTitle;\n  }\n\n  wx.showModal({\n    title: sTitle || \"\",\n    content: sMsg || \"\",\n    confirmColor: \"#ff8834\",\n    showCancel: false,\n    success: function success(res) {\n      oFn && oFn(res);\n    } });\n\n}\n\n/**\n   * 返回首页提醒框\n   */\nfunction backIndexPageModal(msg) {\n  wx.showModal({\n    content: msg,\n    showCancel: false,\n    confirmText: '确认',\n    confirmColor: \"#ff8834\",\n    success: function success(res) {\n      // if (res.confirm) {\n      if (wx.reLaunch) {\n        wx.reLaunch({\n          url: '/pages/tab-index/index' });\n\n      } else {\n        wx.switchTab({\n          url: '/pages/tab-index/index' });\n\n      }\n      // }\n    } });\n\n}\n\n/**\n   * 从需要上传的图片中，筛选出已经上传过的图片；并返回需要上传的图片 及 无需上传的图片对象\n   */\nvar picUpPic = function picUpPic(picListArr, picListObjArr) {\n  var newArr = [];\n  var oldArr = [];\n  var oldPicArr = [];\n\n  // 从新获图片数组中，筛选出已经上传过的图片\n  picListArr.forEach(function (item) {\n    if (item.indexOf(Api.NewApiRootUrl) == -1) {\n      newArr.push(item); // 未上传图片\n    } else {\n      oldArr.push(item); // 上传图片\n    }\n  });\n\n  // 获取已上传图片的图片对象\n  picListObjArr.forEach(function (item) {\n    oldArr.forEach(function (list) {\n      if (list.indexOf(item.id) != -1) {\n        oldPicArr.push(item);\n      }\n    });\n  });\n\n  return [newArr, oldPicArr];\n};\n\n/**\n    * 版本过低提醒框\n    */\nfunction versionTip() {\n  showModal(\"版本提示\", \"当前版本暂不支持该功能，请升级微信版本！\");\n}\n\n//获取当前日期\nfunction getTime(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n\n  var hour = date.getHours();\n  var minute = date.getMinutes();\n  var second = date.getSeconds();\n\n  return [year, month, day].map(formatNumber).join('-');\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\nfunction formatNumber(n) {\n  n = n.toString();\n  return n[1] ? n : '0' + n;\n}\n\nmodule.exports = {\n  request: request,\n  checkSession: checkSession,\n  login: login,\n  getUserInfo: getUserInfo,\n  goRegPage: goRegPage,\n  // scopeWChat,\n  uploadPic: uploadPic,\n  uploadPics: uploadPics,\n  downloadFile: downloadFile,\n\n  getApproveData: getApproveData,\n  getSupportBank: getSupportBank,\n  getPaySaveBank: getPaySaveBank,\n  getPayCreditBank: getPayCreditBank,\n  getCashBank: getCashBank,\n\n  showErrorToast: showErrorToast,\n  showModal: showModal,\n  showToast: showToast,\n  showLoading: showLoading,\n  versionTip: versionTip,\n  backIndexPageModal: backIndexPageModal,\n\n  getTime: getTime,\n  picUpPic: picUpPic };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!*********************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/lib/es6-promise.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {var require;!function (t, e) { true ? module.exports = e() : undefined;}(void 0, function () {\"use strict\";function t(t) {return \"function\" == typeof t || \"object\" == typeof t && null !== t;}function e(t) {return \"function\" == typeof t;}function n(t) {I = t;}function r(t) {J = t;}function o() {return function () {return process.nextTick(a);};}function i() {return \"undefined\" != typeof H ? function () {H(a);} : c();}function s() {var t = 0,e = new V(a),n = document.createTextNode(\"\");return e.observe(n, { characterData: !0 }), function () {n.data = t = ++t % 2;};}function u() {var t = new MessageChannel();return t.port1.onmessage = a, function () {return t.port2.postMessage(0);};}function c() {var t = setTimeout;return function () {return t(a, 1);};}function a() {for (var t = 0; t < G; t += 2) {var e = $[t],n = $[t + 1];e(n), $[t] = void 0, $[t + 1] = void 0;}G = 0;}function f() {try {var t = require,e = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'vertx'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));return H = e.runOnLoop || e.runOnContext, i();} catch (n) {return c();}}function l(t, e) {var n = arguments,r = this,o = new this.constructor(p);void 0 === o[et] && k(o);var i = r._state;return i ? !function () {var t = n[i - 1];J(function () {return x(i, o, t, r._result);});}() : E(r, o, t, e), o;}function h(t) {var e = this;if (t && \"object\" == typeof t && t.constructor === e) return t;var n = new e(p);return g(n, t), n;}function p() {}function v() {return new TypeError(\"You cannot resolve a promise with itself\");}function d() {return new TypeError(\"A promises callback cannot return that same promise.\");}function _(t) {try {return t.then;} catch (e) {return it.error = e, it;}}function y(t, e, n, r) {try {t.call(e, n, r);} catch (o) {return o;}}function m(t, e, n) {J(function (t) {var r = !1,o = y(n, e, function (n) {r || (r = !0, e !== n ? g(t, n) : S(t, n));}, function (e) {r || (r = !0, j(t, e));}, \"Settle: \" + (t._label || \" unknown promise\"));!r && o && (r = !0, j(t, o));}, t);}function b(t, e) {e._state === rt ? S(t, e._result) : e._state === ot ? j(t, e._result) : E(e, void 0, function (e) {return g(t, e);}, function (e) {return j(t, e);});}function w(t, n, r) {n.constructor === t.constructor && r === l && n.constructor.resolve === h ? b(t, n) : r === it ? (j(t, it.error), it.error = null) : void 0 === r ? S(t, n) : e(r) ? m(t, n, r) : S(t, n);}function g(e, n) {e === n ? j(e, v()) : t(n) ? w(e, n, _(n)) : S(e, n);}function A(t) {t._onerror && t._onerror(t._result), T(t);}function S(t, e) {t._state === nt && (t._result = e, t._state = rt, 0 !== t._subscribers.length && J(T, t));}function j(t, e) {t._state === nt && (t._state = ot, t._result = e, J(A, t));}function E(t, e, n, r) {var o = t._subscribers,i = o.length;t._onerror = null, o[i] = e, o[i + rt] = n, o[i + ot] = r, 0 === i && t._state && J(T, t);}function T(t) {var e = t._subscribers,n = t._state;if (0 !== e.length) {for (var r = void 0, o = void 0, i = t._result, s = 0; s < e.length; s += 3) {r = e[s], o = e[s + n], r ? x(n, r, o, i) : o(i);}t._subscribers.length = 0;}}function M() {this.error = null;}function P(t, e) {try {return t(e);} catch (n) {return st.error = n, st;}}function x(t, n, r, o) {var i = e(r),s = void 0,u = void 0,c = void 0,a = void 0;if (i) {if (s = P(r, o), s === st ? (a = !0, u = s.error, s.error = null) : c = !0, n === s) return void j(n, d());} else s = o, c = !0;n._state !== nt || (i && c ? g(n, s) : a ? j(n, u) : t === rt ? S(n, s) : t === ot && j(n, s));}function C(t, e) {try {e(function (e) {g(t, e);}, function (e) {j(t, e);});} catch (n) {j(t, n);}}function O() {return ut++;}function k(t) {t[et] = ut++, t._state = void 0, t._result = void 0, t._subscribers = [];}function Y(t, e) {this._instanceConstructor = t, this.promise = new t(p), this.promise[et] || k(this.promise), B(e) ? (this._input = e, this.length = e.length, this._remaining = e.length, this._result = new Array(this.length), 0 === this.length ? S(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(), 0 === this._remaining && S(this.promise, this._result))) : j(this.promise, q());}function q() {return new Error(\"Array Methods must be provided an Array\");}function F(t) {return new Y(this, t).promise;}function D(t) {var e = this;return new e(B(t) ? function (n, r) {for (var o = t.length, i = 0; i < o; i++) {e.resolve(t[i]).then(n, r);}} : function (t, e) {return e(new TypeError(\"You must pass an array to race.\"));});}function K(t) {var e = this,n = new e(p);return j(n, t), n;}function L() {throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");}function N() {throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");}function U(t) {this[et] = O(), this._result = this._state = void 0, this._subscribers = [], p !== t && (\"function\" != typeof t && L(), this instanceof U ? C(this, t) : N());}function W() {var t = void 0;if (\"undefined\" != typeof global) t = global;else if (\"undefined\" != typeof self) t = self;else try {t = Function(\"return this\")();} catch (e) {throw new Error(\"polyfill failed because global object is unavailable in this environment\");}var n = t.Promise;if (n) {var r = null;try {r = Object.prototype.toString.call(n.resolve());} catch (e) {}if (\"[object Promise]\" === r && !n.cast) return;}t.Promise = U;}var z = void 0;z = Array.isArray ? Array.isArray : function (t) {return \"[object Array]\" === Object.prototype.toString.call(t);};var B = z,G = 0,H = void 0,I = void 0,J = function J(t, e) {$[G] = t, $[G + 1] = e, G += 2, 2 === G && (I ? I(a) : tt());},Q = \"undefined\" != typeof window ? window : void 0,R = Q || {},V = R.MutationObserver || R.WebKitMutationObserver,X = \"undefined\" == typeof self && \"undefined\" != typeof process && \"[object process]\" === {}.toString.call(process),Z = \"undefined\" != typeof Uint8ClampedArray && \"undefined\" != typeof importScripts && \"undefined\" != typeof MessageChannel,$ = new Array(1e3),tt = void 0;tt = X ? o() : V ? s() : Z ? u() : void 0 === Q && \"function\" == \"function\" ? f() : c();var et = Math.random().toString(36).substring(16),nt = void 0,rt = 1,ot = 2,it = new M(),st = new M(),ut = 0;return Y.prototype._enumerate = function () {for (var t = this.length, e = this._input, n = 0; this._state === nt && n < t; n++) {this._eachEntry(e[n], n);}}, Y.prototype._eachEntry = function (t, e) {var n = this._instanceConstructor,r = n.resolve;if (r === h) {var o = _(t);if (o === l && t._state !== nt) this._settledAt(t._state, e, t._result);else if (\"function\" != typeof o) this._remaining--, this._result[e] = t;else if (n === U) {var i = new n(p);w(i, t, o), this._willSettleAt(i, e);} else this._willSettleAt(new n(function (e) {return e(t);}), e);} else this._willSettleAt(r(t), e);}, Y.prototype._settledAt = function (t, e, n) {var r = this.promise;r._state === nt && (this._remaining--, t === ot ? j(r, n) : this._result[e] = n), 0 === this._remaining && S(r, this._result);}, Y.prototype._willSettleAt = function (t, e) {var n = this;E(t, void 0, function (t) {return n._settledAt(rt, e, t);}, function (t) {return n._settledAt(ot, e, t);});}, U.all = F, U.race = D, U.resolve = h, U.reject = K, U._setScheduler = n, U._setAsap = r, U._asap = J, U.prototype = { constructor: U, then: l, \"catch\": function _catch(t) {return this.then(null, t);} }, U.polyfill = W, U.Promise = U, U.polyfill(), U;});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 29), __webpack_require__(/*! ./../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 30);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 29)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!*******************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/services/user.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\n               * 用户相关服务\n               */\n\nvar Util = __webpack_require__(/*! utils/util.js */ 27);\nvar Api = __webpack_require__(/*! services/config/api.js */ 23);\nvar Es6Promise = __webpack_require__(/*! lib/es6-promise.js */ 28);\n\n\n/**\n                                                 * 调用微信登录\n                                                 */\nfunction loginByWeixin() {\n  var code = null;\n  return new Es6Promise(function (resolve, reject) {\n    // return Util.login().then((res) => {\n    //   code = res.code;\n    //   return Util.getUserInfo();\n    // }).then((userInfo) => {\n    Es6Promise.all([\n    Util.login(),\n    Util.getUserInfo()]).\n    then(function (allRes) {\n      var code = allRes[0].code;\n      var userInfo = allRes[1];\n      var loginOn = wx.getStorageSync(\"loginOn\");\n\n      if (!loginOn) {// 防止重复请求登录\n        wx.setStorageSync(\"loginOn\", true);\n\n        wx.setStorageSync(\"rawData\", userInfo.rawData);\n        wx.setStorageSync(\"signature\", userInfo.signature);\n\n        //登录远程服务器\n        Util.request(Api.AuthLoginByWeixin, { code: code, userInfo: userInfo }, 'post').then(function (res) {\n          wx.setStorageSync(\"loginOn\", false);\n\n          if (res.statusCode == 200) {\n            if (res.data.sessionKey) {\n              wx.setStorageSync(\"sessionKey\", res.data.sessionKey);\n            }\n            //存储用户信息\n            wx.setStorageSync('userInfo', res.data.userInfo);\n            wx.setStorageSync('token', res.data.token);\n\n            resolve(res);\n          } else {\n            reject(res);\n          }\n        }).catch(function (err) {\n          wx.setStorageSync(\"loginOn\", false);\n          reject(err);\n        });\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\n/**\n   * 判断用户是否登录\n   */\nfunction checkLogin() {\n  return new Es6Promise(function (resolve, reject) {\n    if (wx.getStorageSync('userInfo') && wx.getStorageSync('token')) {\n\n      Util.checkSession().then(function () {\n        resolve(true);\n      }).catch(function () {\n        reject(false);\n      });\n\n    } else {\n      reject(false);\n    }\n  });\n}\n\nmodule.exports = {\n  loginByWeixin: loginByWeixin,\n  checkLogin: checkLogin };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc2VydmljZXMvdXNlci5qcyJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsIkFwaSIsIkVzNlByb21pc2UiLCJsb2dpbkJ5V2VpeGluIiwiY29kZSIsInJlc29sdmUiLCJyZWplY3QiLCJhbGwiLCJsb2dpbiIsImdldFVzZXJJbmZvIiwidGhlbiIsImFsbFJlcyIsInVzZXJJbmZvIiwibG9naW5PbiIsInd4IiwiZ2V0U3RvcmFnZVN5bmMiLCJzZXRTdG9yYWdlU3luYyIsInJhd0RhdGEiLCJzaWduYXR1cmUiLCJyZXF1ZXN0IiwiQXV0aExvZ2luQnlXZWl4aW4iLCJyZXMiLCJzdGF0dXNDb2RlIiwiZGF0YSIsInNlc3Npb25LZXkiLCJ0b2tlbiIsImNhdGNoIiwiZXJyIiwiY2hlY2tMb2dpbiIsImNoZWNrU2Vzc2lvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJDQUFBOzs7O0FBSUEsSUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHVCQUFELENBQXBCO0FBQ0EsSUFBTUMsR0FBRyxHQUFHRCxtQkFBTyxDQUFDLGdDQUFELENBQW5CO0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixtQkFBTyxDQUFDLDRCQUFELENBQTFCOzs7QUFHQTs7O0FBR0EsU0FBU0csYUFBVCxHQUF5QjtBQUN2QixNQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQU8sSUFBSUYsVUFBSixDQUFlLFVBQVVHLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0FKLGNBQVUsQ0FBQ0ssR0FBWCxDQUFlO0FBQ2JSLFFBQUksQ0FBQ1MsS0FBTCxFQURhO0FBRWJULFFBQUksQ0FBQ1UsV0FBTCxFQUZhLENBQWY7QUFHR0MsUUFISCxDQUdRLFVBQUFDLE1BQU0sRUFBSTtBQUNoQixVQUFJUCxJQUFJLEdBQUdPLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVVAsSUFBckI7QUFDQSxVQUFJUSxRQUFRLEdBQUdELE1BQU0sQ0FBQyxDQUFELENBQXJCO0FBQ0EsVUFBSUUsT0FBTyxHQUFHQyxFQUFFLENBQUNDLGNBQUgsQ0FBa0IsU0FBbEIsQ0FBZDs7QUFFQSxVQUFJLENBQUNGLE9BQUwsRUFBYyxDQUFFO0FBQ2RDLFVBQUUsQ0FBQ0UsY0FBSCxDQUFrQixTQUFsQixFQUE2QixJQUE3Qjs7QUFFQUYsVUFBRSxDQUFDRSxjQUFILENBQWtCLFNBQWxCLEVBQTZCSixRQUFRLENBQUNLLE9BQXRDO0FBQ0FILFVBQUUsQ0FBQ0UsY0FBSCxDQUFrQixXQUFsQixFQUErQkosUUFBUSxDQUFDTSxTQUF4Qzs7QUFFQTtBQUNBbkIsWUFBSSxDQUFDb0IsT0FBTCxDQUFhbEIsR0FBRyxDQUFDbUIsaUJBQWpCLEVBQW9DLEVBQUVoQixJQUFJLEVBQUVBLElBQVIsRUFBY1EsUUFBUSxFQUFFQSxRQUF4QixFQUFwQyxFQUF3RSxNQUF4RSxFQUFnRkYsSUFBaEYsQ0FBcUYsVUFBQVcsR0FBRyxFQUFJO0FBQzFGUCxZQUFFLENBQUNFLGNBQUgsQ0FBa0IsU0FBbEIsRUFBNkIsS0FBN0I7O0FBRUEsY0FBSUssR0FBRyxDQUFDQyxVQUFKLElBQWtCLEdBQXRCLEVBQTJCO0FBQ3pCLGdCQUFJRCxHQUFHLENBQUNFLElBQUosQ0FBU0MsVUFBYixFQUF5QjtBQUN2QlYsZ0JBQUUsQ0FBQ0UsY0FBSCxDQUFrQixZQUFsQixFQUFnQ0ssR0FBRyxDQUFDRSxJQUFKLENBQVNDLFVBQXpDO0FBQ0Q7QUFDRDtBQUNBVixjQUFFLENBQUNFLGNBQUgsQ0FBa0IsVUFBbEIsRUFBOEJLLEdBQUcsQ0FBQ0UsSUFBSixDQUFTWCxRQUF2QztBQUNBRSxjQUFFLENBQUNFLGNBQUgsQ0FBa0IsT0FBbEIsRUFBMkJLLEdBQUcsQ0FBQ0UsSUFBSixDQUFTRSxLQUFwQzs7QUFFQXBCLG1CQUFPLENBQUNnQixHQUFELENBQVA7QUFDRCxXQVRELE1BU087QUFDTGYsa0JBQU0sQ0FBQ2UsR0FBRCxDQUFOO0FBQ0Q7QUFDRixTQWZELEVBZUdLLEtBZkgsQ0FlUyxVQUFDQyxHQUFELEVBQVM7QUFDaEJiLFlBQUUsQ0FBQ0UsY0FBSCxDQUFrQixTQUFsQixFQUE2QixLQUE3QjtBQUNBVixnQkFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0QsU0FsQkQ7QUFtQkQ7QUFDRixLQW5DRCxFQW1DR0QsS0FuQ0gsQ0FtQ1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2hCckIsWUFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0QsS0FyQ0Q7QUFzQ0QsR0EzQ00sQ0FBUDtBQTRDRDs7QUFFRDs7O0FBR0EsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQixTQUFPLElBQUkxQixVQUFKLENBQWUsVUFBVUcsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDL0MsUUFBSVEsRUFBRSxDQUFDQyxjQUFILENBQWtCLFVBQWxCLEtBQWlDRCxFQUFFLENBQUNDLGNBQUgsQ0FBa0IsT0FBbEIsQ0FBckMsRUFBaUU7O0FBRS9EaEIsVUFBSSxDQUFDOEIsWUFBTCxHQUFvQm5CLElBQXBCLENBQXlCLFlBQU07QUFDN0JMLGVBQU8sQ0FBQyxJQUFELENBQVA7QUFDRCxPQUZELEVBRUdxQixLQUZILENBRVMsWUFBTTtBQUNicEIsY0FBTSxDQUFDLEtBQUQsQ0FBTjtBQUNELE9BSkQ7O0FBTUQsS0FSRCxNQVFPO0FBQ0xBLFlBQU0sQ0FBQyxLQUFELENBQU47QUFDRDtBQUNGLEdBWk0sQ0FBUDtBQWFEOztBQUVEd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Y1QixlQUFhLEVBQWJBLGFBRGU7QUFFZnlCLFlBQVUsRUFBVkEsVUFGZSxFQUFqQiIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog55So5oi355u45YWz5pyN5YqhXG4gKi9cblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3V0aWxzL3V0aWwuanMnKTtcbmNvbnN0IEFwaSA9IHJlcXVpcmUoJ3NlcnZpY2VzL2NvbmZpZy9hcGkuanMnKTtcbmNvbnN0IEVzNlByb21pc2UgPSByZXF1aXJlKCdsaWIvZXM2LXByb21pc2UuanMnKTtcblxuXG4vKipcbiAqIOiwg+eUqOW+ruS/oeeZu+W9lVxuICovXG5mdW5jdGlvbiBsb2dpbkJ5V2VpeGluKCkge1xuICBsZXQgY29kZSA9IG51bGw7XG4gIHJldHVybiBuZXcgRXM2UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gcmV0dXJuIFV0aWwubG9naW4oKS50aGVuKChyZXMpID0+IHtcbiAgICAvLyAgIGNvZGUgPSByZXMuY29kZTtcbiAgICAvLyAgIHJldHVybiBVdGlsLmdldFVzZXJJbmZvKCk7XG4gICAgLy8gfSkudGhlbigodXNlckluZm8pID0+IHtcbiAgICBFczZQcm9taXNlLmFsbChbXG4gICAgICBVdGlsLmxvZ2luKCksXG4gICAgICBVdGlsLmdldFVzZXJJbmZvKClcbiAgICBdKS50aGVuKGFsbFJlcyA9PiB7XG4gICAgICBsZXQgY29kZSA9IGFsbFJlc1swXS5jb2RlO1xuICAgICAgbGV0IHVzZXJJbmZvID0gYWxsUmVzWzFdO1xuICAgICAgbGV0IGxvZ2luT24gPSB3eC5nZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIik7XG5cbiAgICAgIGlmICghbG9naW5PbikgeyAvLyDpmLLmraLph43lpI3or7fmsYLnmbvlvZVcbiAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoXCJsb2dpbk9uXCIsIHRydWUpO1xuXG4gICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKFwicmF3RGF0YVwiLCB1c2VySW5mby5yYXdEYXRhKVxuICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcInNpZ25hdHVyZVwiLCB1c2VySW5mby5zaWduYXR1cmUpXG4gICAgICAgIFxuICAgICAgICAvL+eZu+W9lei/nOeoi+acjeWKoeWZqFxuICAgICAgICBVdGlsLnJlcXVlc3QoQXBpLkF1dGhMb2dpbkJ5V2VpeGluLCB7IGNvZGU6IGNvZGUsIHVzZXJJbmZvOiB1c2VySW5mbyB9LCAncG9zdCcpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIiwgZmFsc2UpO1xuXG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnNlc3Npb25LZXkpIHtcbiAgICAgICAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoXCJzZXNzaW9uS2V5XCIsIHJlcy5kYXRhLnNlc3Npb25LZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy/lrZjlgqjnlKjmiLfkv6Hmga9cbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCd1c2VySW5mbycsIHJlcy5kYXRhLnVzZXJJbmZvKTtcbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCd0b2tlbicsIHJlcy5kYXRhLnRva2VuKTtcblxuICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QocmVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICB3eC5zZXRTdG9yYWdlU3luYyhcImxvZ2luT25cIiwgZmFsc2UpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KVxuICB9KTtcbn1cblxuLyoqXG4gKiDliKTmlq3nlKjmiLfmmK/lkKbnmbvlvZVcbiAqL1xuZnVuY3Rpb24gY2hlY2tMb2dpbigpIHtcbiAgcmV0dXJuIG5ldyBFczZQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAod3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXJJbmZvJykgJiYgd3guZ2V0U3RvcmFnZVN5bmMoJ3Rva2VuJykpIHtcblxuICAgICAgVXRpbC5jaGVja1Nlc3Npb24oKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgcmVqZWN0KGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdChmYWxzZSk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2luQnlXZWl4aW4sXG4gIGNoZWNrTG9naW5cbn07XG5cblxuXG5cblxuXG5cblxuXG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 4:
/*!*************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    packName = uni.getAccountInfoSync().miniProgram.appId || '';\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\n       * h5 请求\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23320190923002\",\"_inBundle\":false,\"_integrity\":\"sha512-MnftsvgOac3q1FCOBPzivbFn8GNQFo7D2DY325HeEZyFCWgx5GEwHpGYjT1PQU6v7DaDn0ruxa3ObdpUIYbmZw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23320190923002.tgz\",\"_shasum\":\"0c400c140ca0b3c05f52d25f11583cf05a0c4e9a\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"fed4c73fb9142a1b277dd79313939cad90693d3e\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23320190923002\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!******************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json?{"type":"style"} ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/qing-f-c/sellDupty/customer-created/customer-created\": { \"navigationBarTitleText\": \"卖帮办新建客户\", \"usingComponents\": { \"my-picker\": \"/components/myPicker\", \"range-button\": \"/components/rangeButton\", \"swith-button\": \"/components/switchButton\" } }, \"pages/qing-f-c/buyDupty/setManagerCondition/setManagerCondition\": { \"usingComponents\": { \"my-picker\": \"/components/myPicker\", \"my-checkbox-group\": \"/components/myCheckboxGroup\", \"uni-icon\": \"/components/uni-icons/uni-icons\" } }, \"pages/qing-f-c/buyDupty/add-contact\": { \"navigationBarTitleText\": \"添加联系人\", \"usingComponents\": { \"my-picker\": \"/components/myPicker\", \"range-button\": \"/components/rangeButton\", \"my-checkbox-group\": \"/components/myCheckboxGroup\" } }, \"pages/qing-f-c/buyDupty/customer-details\": { \"navigationStyle\": \"custom\", \"usingComponents\": {} }, \"pages/qing-f-c/buyDupty/detail-competitor\": { \"navigationBarTitleText\": \"竞争对手详情\", \"usingComponents\": {} }, \"pages/qing-f-c/buyDupty/edit-competitor\": { \"navigationBarTitleText\": \"编辑竞争对手\", \"usingComponents\": {} }, \"pages/qing-f-c/buyDupty/add-competitor\": { \"navigationBarTitleText\": \"添加竞争对手\", \"usingComponents\": { \"my-picker\": \"/components/myPicker\" } }, \"pages/qing-f-c/buyDupty/set-identity\": { \"navigationBarTitleText\": \"设置特征\", \"usingComponents\": {} }, \"pages/qing-f-c/buyDupty/customer-admin\": { \"navigationBarTitleText\": \"买帮办客户管理\", \"usingComponents\": {} }, \"pages/qing-f-c/buyDupty/customer-created\": { \"navigationBarTitleText\": \"新建客户\", \"usingComponents\": {} }, \"pages/qing-f-c/login/login\": { \"navigationStyle\": \"custom\", \"usingComponents\": {} }, \"pages/qing-f-c/sales_director/customer-admin\": { \"navigationBarTitleText\": \"客户管理\", \"titleNView\": { \"buttons\": [{ \"float\": \"right\", \"fontSize\": \"15px\", \"text\": \"\" }] }, \"usingComponents\": {} }, \"pages/qing-f-c/sales_director/deputy-list\": { \"navigationBarTitleText\": \"选择区域经理\", \"usingComponents\": {} }, \"pages/qing-f-c/customer/customer-list\": { \"navigationBarTitleText\": \"客户管理\", \"usingComponents\": {} }, \"pages/qing-f-c/index\": { \"navigationBarTitleText\": \"\", \"usingComponents\": { \"mpvue-picker\": \"/components/mpvue-picker/mpvuePicker\" } }, \"pages/qing-f-c/claimIdentity/claimIdentity\": { \"navigationBarTitleText\": \"身份认领\", \"usingComponents\": {} }, \"pages/qing-f-c/register/register\": { \"navigationStyle\": \"custom\", \"usingComponents\": {} }, \"pages/qing-f-c/register/findPassword\": { \"navigationStyle\": \"custom\", \"usingComponents\": {} }, \"pages/qing-f-c/register/finish\": { \"navigationBarTitleText\": \"注册完成\", \"usingComponents\": {} }, \"pages/jin-suo-yun/index\": { \"navigationBarTitleText\": \"首页\", \"usingComponents\": {} }, \"pages/jin-suo-yun/choice-identity\": { \"navigationBarTitleText\": \"选择身份\", \"usingComponents\": {} }, \"pages/jin-suo-yun/register\": { \"navigationBarTitleText\": \"填写信息\", \"usingComponents\": {} }, \"pages/jin-suo-yun/choosing-company\": { \"navigationBarTitleText\": \"选择公司\", \"usingComponents\": {} }, \"pages/login/login\": { \"navigationBarTitleText\": \"登录首页\", \"usingComponents\": {} }, \"pages/index/index\": { \"navigationBarTitleText\": \"胚布配\", \"usingComponents\": { \"top-search\": \"/components/topSearch\", \"top-tabbar\": \"/components/topTabbar\", \"analyist-result\": \"/components/analyist-result\" } }, \"pages/qing-f-c/sellDupty/sellDupty\": { \"navigationBarTitleText\": \"买帮办客户管理\", \"usingComponents\": {} } }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"\", \"navigationBarBackgroundColor\": \"#EE603F\", \"backgroundColor\": \"white\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyw4REFBNkQsRUFBQywwQkFBeUIsU0FBMUIsRUFBb0MsbUJBQWtCLEVBQUMsYUFBWSxzQkFBYixFQUFvQyxnQkFBZSx5QkFBbkQsRUFBNkUsZ0JBQWUsMEJBQTVGLEVBQXRELEVBQTlELEVBQTZPLG1FQUFrRSxFQUFDLG1CQUFrQixFQUFDLGFBQVksc0JBQWIsRUFBb0MscUJBQW9CLDZCQUF4RCxFQUFzRixZQUFXLGlDQUFqRyxFQUFuQixFQUEvUyxFQUF1Yyx1Q0FBc0MsRUFBQywwQkFBeUIsT0FBMUIsRUFBa0MsbUJBQWtCLEVBQUMsYUFBWSxzQkFBYixFQUFvQyxnQkFBZSx5QkFBbkQsRUFBNkUscUJBQW9CLDZCQUFqRyxFQUFwRCxFQUE3ZSxFQUFrcUIsNENBQTJDLEVBQUMsbUJBQWtCLFFBQW5CLEVBQTRCLG1CQUFrQixFQUE5QyxFQUE3c0IsRUFBK3ZCLDZDQUE0QyxFQUFDLDBCQUF5QixRQUExQixFQUFtQyxtQkFBa0IsRUFBckQsRUFBM3lCLEVBQW8yQiwyQ0FBMEMsRUFBQywwQkFBeUIsUUFBMUIsRUFBbUMsbUJBQWtCLEVBQXJELEVBQTk0QixFQUF1OEIsMENBQXlDLEVBQUMsMEJBQXlCLFFBQTFCLEVBQW1DLG1CQUFrQixFQUFDLGFBQVksc0JBQWIsRUFBckQsRUFBaC9CLEVBQTJrQyx3Q0FBdUMsRUFBQywwQkFBeUIsTUFBMUIsRUFBaUMsbUJBQWtCLEVBQW5ELEVBQWxuQyxFQUF5cUMsMENBQXlDLEVBQUMsMEJBQXlCLFNBQTFCLEVBQW9DLG1CQUFrQixFQUF0RCxFQUFsdEMsRUFBNHdDLDRDQUEyQyxFQUFDLDBCQUF5QixNQUExQixFQUFpQyxtQkFBa0IsRUFBbkQsRUFBdnpDLEVBQTgyQyw4QkFBNkIsRUFBQyxtQkFBa0IsUUFBbkIsRUFBNEIsbUJBQWtCLEVBQTlDLEVBQTM0QyxFQUE2N0MsZ0RBQStDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLGNBQWEsRUFBQyxXQUFVLENBQUMsRUFBQyxTQUFRLE9BQVQsRUFBaUIsWUFBVyxNQUE1QixFQUFtQyxRQUFPLEVBQTFDLEVBQUQsQ0FBWCxFQUE5QyxFQUEwRyxtQkFBa0IsRUFBNUgsRUFBNStDLEVBQTRtRCw2Q0FBNEMsRUFBQywwQkFBeUIsUUFBMUIsRUFBbUMsbUJBQWtCLEVBQXJELEVBQXhwRCxFQUFpdEQseUNBQXdDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLG1CQUFrQixFQUFuRCxFQUF6dkQsRUFBZ3pELHdCQUF1QixFQUFDLDBCQUF5QixFQUExQixFQUE2QixtQkFBa0IsRUFBQyxnQkFBZSxzQ0FBaEIsRUFBL0MsRUFBdjBELEVBQSs2RCw4Q0FBNkMsRUFBQywwQkFBeUIsTUFBMUIsRUFBaUMsbUJBQWtCLEVBQW5ELEVBQTU5RCxFQUFtaEUsb0NBQW1DLEVBQUMsbUJBQWtCLFFBQW5CLEVBQTRCLG1CQUFrQixFQUE5QyxFQUF0akUsRUFBd21FLHdDQUF1QyxFQUFDLG1CQUFrQixRQUFuQixFQUE0QixtQkFBa0IsRUFBOUMsRUFBL29FLEVBQWlzRSxrQ0FBaUMsRUFBQywwQkFBeUIsTUFBMUIsRUFBaUMsbUJBQWtCLEVBQW5ELEVBQWx1RSxFQUF5eEUsMkJBQTBCLEVBQUMsMEJBQXlCLElBQTFCLEVBQStCLG1CQUFrQixFQUFqRCxFQUFuekUsRUFBdzJFLHFDQUFvQyxFQUFDLDBCQUF5QixNQUExQixFQUFpQyxtQkFBa0IsRUFBbkQsRUFBNTRFLEVBQW04RSw4QkFBNkIsRUFBQywwQkFBeUIsTUFBMUIsRUFBaUMsbUJBQWtCLEVBQW5ELEVBQWgrRSxFQUF1aEYsc0NBQXFDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQWlDLG1CQUFrQixFQUFuRCxFQUE1akYsRUFBbW5GLHFCQUFvQixFQUFDLDBCQUF5QixNQUExQixFQUFpQyxtQkFBa0IsRUFBbkQsRUFBdm9GLEVBQThyRixxQkFBb0IsRUFBQywwQkFBeUIsS0FBMUIsRUFBZ0MsbUJBQWtCLEVBQUMsY0FBYSx1QkFBZCxFQUFzQyxjQUFhLHVCQUFuRCxFQUEyRSxtQkFBa0IsNkJBQTdGLEVBQWxELEVBQWx0RixFQUFpNEYsc0NBQXFDLEVBQUMsMEJBQXlCLFNBQTFCLEVBQW9DLG1CQUFrQixFQUF0RCxFQUF0NkYsRUFBVCxFQUEwK0YsZUFBYyxFQUFDLDBCQUF5QixPQUExQixFQUFrQywwQkFBeUIsRUFBM0QsRUFBOEQsZ0NBQStCLFNBQTdGLEVBQXVHLG1CQUFrQixPQUF6SCxFQUF4L0YsRSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wicGFnZXNcIjp7XCJwYWdlcy9xaW5nLWYtYy9zZWxsRHVwdHkvY3VzdG9tZXItY3JlYXRlZC9jdXN0b21lci1jcmVhdGVkXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5Y2W5biu5Yqe5paw5bu65a6i5oi3XCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7XCJteS1waWNrZXJcIjpcIi9jb21wb25lbnRzL215UGlja2VyXCIsXCJyYW5nZS1idXR0b25cIjpcIi9jb21wb25lbnRzL3JhbmdlQnV0dG9uXCIsXCJzd2l0aC1idXR0b25cIjpcIi9jb21wb25lbnRzL3N3aXRjaEJ1dHRvblwifX0sXCJwYWdlcy9xaW5nLWYtYy9idXlEdXB0eS9zZXRNYW5hZ2VyQ29uZGl0aW9uL3NldE1hbmFnZXJDb25kaXRpb25cIjp7XCJ1c2luZ0NvbXBvbmVudHNcIjp7XCJteS1waWNrZXJcIjpcIi9jb21wb25lbnRzL215UGlja2VyXCIsXCJteS1jaGVja2JveC1ncm91cFwiOlwiL2NvbXBvbmVudHMvbXlDaGVja2JveEdyb3VwXCIsXCJ1bmktaWNvblwiOlwiL2NvbXBvbmVudHMvdW5pLWljb25zL3VuaS1pY29uc1wifX0sXCJwYWdlcy9xaW5nLWYtYy9idXlEdXB0eS9hZGQtY29udGFjdFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIua3u+WKoOiBlOezu+S6ulwiLFwidXNpbmdDb21wb25lbnRzXCI6e1wibXktcGlja2VyXCI6XCIvY29tcG9uZW50cy9teVBpY2tlclwiLFwicmFuZ2UtYnV0dG9uXCI6XCIvY29tcG9uZW50cy9yYW5nZUJ1dHRvblwiLFwibXktY2hlY2tib3gtZ3JvdXBcIjpcIi9jb21wb25lbnRzL215Q2hlY2tib3hHcm91cFwifX0sXCJwYWdlcy9xaW5nLWYtYy9idXlEdXB0eS9jdXN0b21lci1kZXRhaWxzXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL2J1eUR1cHR5L2RldGFpbC1jb21wZXRpdG9yXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi56ue5LqJ5a+55omL6K+m5oOFXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9xaW5nLWYtYy9idXlEdXB0eS9lZGl0LWNvbXBldGl0b3JcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLnvJbovpHnq57kuonlr7nmiYtcIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL2J1eUR1cHR5L2FkZC1jb21wZXRpdG9yXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5re75Yqg56ue5LqJ5a+55omLXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7XCJteS1waWNrZXJcIjpcIi9jb21wb25lbnRzL215UGlja2VyXCJ9fSxcInBhZ2VzL3FpbmctZi1jL2J1eUR1cHR5L3NldC1pZGVudGl0eVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuiuvue9rueJueW+gVwiLFwidXNpbmdDb21wb25lbnRzXCI6e319LFwicGFnZXMvcWluZy1mLWMvYnV5RHVwdHkvY3VzdG9tZXItYWRtaW5cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLkubDluK7lip7lrqLmiLfnrqHnkIZcIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL2J1eUR1cHR5L2N1c3RvbWVyLWNyZWF0ZWRcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLmlrDlu7rlrqLmiLdcIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL2xvZ2luL2xvZ2luXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL3NhbGVzX2RpcmVjdG9yL2N1c3RvbWVyLWFkbWluXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5a6i5oi3566h55CGXCIsXCJ0aXRsZU5WaWV3XCI6e1wiYnV0dG9uc1wiOlt7XCJmbG9hdFwiOlwicmlnaHRcIixcImZvbnRTaXplXCI6XCIxNXB4XCIsXCJ0ZXh0XCI6XCJcIn1dfSxcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL3FpbmctZi1jL3NhbGVzX2RpcmVjdG9yL2RlcHV0eS1saXN0XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6YCJ5oup5Yy65Z+f57uP55CGXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9xaW5nLWYtYy9jdXN0b21lci9jdXN0b21lci1saXN0XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5a6i5oi3566h55CGXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9xaW5nLWYtYy9pbmRleFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIlwiLFwidXNpbmdDb21wb25lbnRzXCI6e1wibXB2dWUtcGlja2VyXCI6XCIvY29tcG9uZW50cy9tcHZ1ZS1waWNrZXIvbXB2dWVQaWNrZXJcIn19LFwicGFnZXMvcWluZy1mLWMvY2xhaW1JZGVudGl0eS9jbGFpbUlkZW50aXR5XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6Lqr5Lu96K6k6aKGXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9xaW5nLWYtYy9yZWdpc3Rlci9yZWdpc3RlclwiOntcIm5hdmlnYXRpb25TdHlsZVwiOlwiY3VzdG9tXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9xaW5nLWYtYy9yZWdpc3Rlci9maW5kUGFzc3dvcmRcIjp7XCJuYXZpZ2F0aW9uU3R5bGVcIjpcImN1c3RvbVwiLFwidXNpbmdDb21wb25lbnRzXCI6e319LFwicGFnZXMvcWluZy1mLWMvcmVnaXN0ZXIvZmluaXNoXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5rOo5YaM5a6M5oiQXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9qaW4tc3VvLXl1bi9pbmRleFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIummlumhtVwiLFwidXNpbmdDb21wb25lbnRzXCI6e319LFwicGFnZXMvamluLXN1by15dW4vY2hvaWNlLWlkZW50aXR5XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6YCJ5oup6Lqr5Lu9XCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7fX0sXCJwYWdlcy9qaW4tc3VvLXl1bi9yZWdpc3RlclwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWhq+WGmeS/oeaBr1wiLFwidXNpbmdDb21wb25lbnRzXCI6e319LFwicGFnZXMvamluLXN1by15dW4vY2hvb3NpbmctY29tcGFueVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIumAieaLqeWFrOWPuFwiLFwidXNpbmdDb21wb25lbnRzXCI6e319LFwicGFnZXMvbG9naW4vbG9naW5cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLnmbvlvZXpppbpobVcIixcInVzaW5nQ29tcG9uZW50c1wiOnt9fSxcInBhZ2VzL2luZGV4L2luZGV4XCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6IOa5biD6YWNXCIsXCJ1c2luZ0NvbXBvbmVudHNcIjp7XCJ0b3Atc2VhcmNoXCI6XCIvY29tcG9uZW50cy90b3BTZWFyY2hcIixcInRvcC10YWJiYXJcIjpcIi9jb21wb25lbnRzL3RvcFRhYmJhclwiLFwiYW5hbHlpc3QtcmVzdWx0XCI6XCIvY29tcG9uZW50cy9hbmFseWlzdC1yZXN1bHRcIn19LFwicGFnZXMvcWluZy1mLWMvc2VsbER1cHR5L3NlbGxEdXB0eVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuS5sOW4ruWKnuWuouaIt+euoeeQhlwiLFwidXNpbmdDb21wb25lbnRzXCI6e319fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwid2hpdGVcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIlwiLFwibmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvclwiOlwiI0VFNjAzRlwiLFwiYmFja2dyb3VuZENvbG9yXCI6XCJ3aGl0ZVwifX0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*****************************************************************!*\
  !*** /Users/lee/Downloads/备份11/轻纺车网/pages.json?{"type":"stat"} ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__85973DE\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX184NTk3M0RFXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);